From 2427e05e5508caf971797beaf2480e331a2a3dc3 Mon Sep 17 00:00:00 2001
From: Kaushal Kumar <kaushal.kumar@amd.com>
Date: Thu, 15 Sep 2022 10:39:42 +0530
Subject: [PATCH 2/6] media-xilinx-Add-hdr-extract-driver

Signed-off-by: Kaushal Kumar <kaushal.kumar@amd.com>
---
 drivers/media/platform/xilinx/Kconfig         |   6 +
 drivers/media/platform/xilinx/Makefile        |   1 +
 .../media/platform/xilinx/xilinx-hdrextract.c | 423 ++++++++++++++++++
 3 files changed, 430 insertions(+)
 create mode 100644 drivers/media/platform/xilinx/xilinx-hdrextract.c

diff --git a/drivers/media/platform/xilinx/Kconfig b/drivers/media/platform/xilinx/Kconfig
index 54b72843aefc..56d437b4bb69 100644
--- a/drivers/media/platform/xilinx/Kconfig
+++ b/drivers/media/platform/xilinx/Kconfig
@@ -71,6 +71,12 @@ config VIDEO_XILINX_HDMI21RXSS
 
 	  Say M to modularize. Say N if unsure.
 
+config VIDEO_XILINX_HDREXTRACT
+	tristate "Xilinx Video HDREXTRACT IP"
+	depends on VIDEO_XILINX
+	help
+	  Driver for Xilinx Video HDREXTRACT IP.
+
 config VIDEO_XILINX_HLS
 	tristate "Xilinx Video HLS Core"
 	depends on VIDEO_XILINX
diff --git a/drivers/media/platform/xilinx/Makefile b/drivers/media/platform/xilinx/Makefile
index 2553f4e589fb..9744ff45ac42 100644
--- a/drivers/media/platform/xilinx/Makefile
+++ b/drivers/media/platform/xilinx/Makefile
@@ -15,6 +15,7 @@ obj-$(CONFIG_VIDEO_XILINX_DEMOSAIC) += xilinx-demosaic.o
 obj-$(CONFIG_VIDEO_XILINX_DPRXSS) += xilinx-dprxss.o
 obj-$(CONFIG_VIDEO_XILINX_GAMMA) += xilinx-gamma.o
 obj-$(CONFIG_VIDEO_XILINX_HDMI21RXSS) += xilinx-hdmirxss.o
+obj-$(CONFIG_VIDEO_XILINX_HDREXTRACT) += xilinx-hdrextract.o
 obj-$(CONFIG_VIDEO_XILINX_HLS) += xilinx-hls.o
 obj-$(CONFIG_VIDEO_XILINX_ISP) += xilinx-isppipeline.o
 obj-$(CONFIG_VIDEO_XILINX_M2M) += xilinx-m2m.o
diff --git a/drivers/media/platform/xilinx/xilinx-hdrextract.c b/drivers/media/platform/xilinx/xilinx-hdrextract.c
new file mode 100644
index 000000000000..dd788dcb3c13
--- /dev/null
+++ b/drivers/media/platform/xilinx/xilinx-hdrextract.c
@@ -0,0 +1,423 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (C) 2022, Advanced Micro Devices, Inc.
+ *
+ */
+
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/gpio/consumer.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/platform_device.h>
+
+#include <media/v4l2-async.h>
+#include <media/v4l2-subdev.h>
+
+#include "xilinx-vip.h"
+
+#define XHDREXTRACT_AP_CTRL			(0x00)
+#define XHDREXTRACT_WIDTH				(0x0018)
+#define XHDREXTRACT_HEIGHT			(0x0010)
+#define XHDREXTRACT_INPUT_BAYER_FORMAT		(0x28)
+
+#define XHDREXTRACT_MIN_HEIGHT	(64)
+#define XHDREXTRACT_MAX_HEIGHT	(4320)
+#define XHDREXTRACT_MIN_WIDTH	(64)
+#define XHDREXTRACT_MAX_WIDTH	(8192)
+
+#define XHDREXTRACT_DEF_IN_HEIGHT	(1440)
+#define XHDREXTRACT_DEF_IN_WIDTH	(1280)
+#define XHDREXTRACT_DEF_OUT_HEIGHT	(720)
+#define XHDREXTRACT_DEF_OUT_WIDTH	(1280)
+
+#define XHDREXTRACT_RESET_DEASSERT	(0)
+#define XHDREXTRACT_RESET_ASSERT		(1)
+#define XHDREXTRACT_START			BIT(0)
+#define XHDREXTRACT_AUTO_RESTART		BIT(7)
+#define XHDREXTRACT_STREAM_ON	(XHDREXTRACT_AUTO_RESTART | XHDREXTRACT_START)
+
+enum xhdrex_bayer_format {
+	XHDREXTRACT_RGGB = 0,
+	XHDREXTRACT_GRBG,
+	XHDREXTRACT_GBRG,
+	XHDREXTRACT_BGGR,
+};
+
+enum xhdrex_pads {
+	XHDREXTRACT_PAD_SINK = 0,
+	XHDREXTRACT_PAD_SOURCE_STREAM0,
+	XHDREXTRACT_PAD_SOURCE_STREAM1,
+	XHDREXTRACT_PAD_MAX
+};
+
+struct xhdrex_dev {
+	struct xvip_device xvip;
+	struct media_pad pads[3];
+	struct v4l2_mbus_framefmt formats[3];
+	struct v4l2_mbus_framefmt default_formats[3];
+
+	struct gpio_desc *rst_gpio;
+	u32 max_width;
+	u32 max_height;
+	u32 npads;
+	enum xhdrex_bayer_format bayer_fmt;
+};
+
+static inline u32 xhdrex_read(struct xhdrex_dev *xhdrex, u32 reg)
+{
+	u32 data;
+
+	data = xvip_read(&xhdrex->xvip, reg);
+	dev_dbg(xhdrex->xvip.dev,
+		"Reading 0x%x from reg offset 0x%x", data, reg);
+	return data;
+}
+
+static inline void xhdrex_write(struct xhdrex_dev *xhdrex, u32 reg, u32 data)
+{
+	xvip_write(&xhdrex->xvip, reg, data);
+	dev_dbg(xhdrex->xvip.dev,
+		"Writing 0x%x to reg offset 0x%x", data, reg);
+#ifdef DEBUG
+	if (xhdrex_read(xhdrex, reg) != data)
+		dev_err(xhdrex->xvip.dev,
+			"Wrote 0x%x does not match read back", data);
+#endif
+}
+
+static inline struct xhdrex_dev *to_xhdrex(struct v4l2_subdev *subdev)
+{
+	return container_of(subdev, struct xhdrex_dev, xvip.subdev);
+}
+
+static struct v4l2_mbus_framefmt
+*__xhdrex_get_pad_format(struct xhdrex_dev *xhdrex,
+			struct v4l2_subdev_state *sd_state,
+			unsigned int pad, u32 which)
+{
+	struct v4l2_mbus_framefmt *get_fmt;
+
+	pad = (pad == XVIP_PAD_SINK) ? XVIP_PAD_SINK : XVIP_PAD_SOURCE;
+
+	switch (which) {
+	case V4L2_SUBDEV_FORMAT_TRY:
+		get_fmt = v4l2_subdev_get_try_format(&xhdrex->xvip.subdev,
+						     sd_state, pad);
+		break;
+	case V4L2_SUBDEV_FORMAT_ACTIVE:
+		get_fmt = &xhdrex->formats[pad];
+		break;
+	default:
+		get_fmt = NULL;
+		break;
+	}
+
+	return get_fmt;
+}
+
+static int xhdrex_s_stream(struct v4l2_subdev *subdev, int enable)
+{
+	struct xhdrex_dev *xhdrex = to_xhdrex(subdev);
+
+	if (!enable) {
+		dev_dbg(xhdrex->xvip.dev, "%s : Off", __func__);
+		gpiod_set_value_cansleep(xhdrex->rst_gpio,
+					 XHDREXTRACT_RESET_ASSERT);
+		gpiod_set_value_cansleep(xhdrex->rst_gpio,
+					 XHDREXTRACT_RESET_DEASSERT);
+		return 0;
+	}
+
+	xhdrex_write(xhdrex, XHDREXTRACT_WIDTH,
+		     xhdrex->formats[XVIP_PAD_SOURCE].width);
+	xhdrex_write(xhdrex, XHDREXTRACT_HEIGHT,
+		     xhdrex->formats[XVIP_PAD_SOURCE].height);
+
+	/* Start Demosaic Video IP */
+	xhdrex_write(xhdrex, XHDREXTRACT_AP_CTRL, XHDREXTRACT_STREAM_ON);
+	return 0;
+}
+
+static const struct v4l2_subdev_video_ops xhdrex_video_ops = {
+	.s_stream = xhdrex_s_stream,
+};
+
+static int xhdrex_get_format(struct v4l2_subdev *subdev, struct v4l2_subdev_state *sd_state,
+			     struct v4l2_subdev_format *fmt)
+{
+	struct xhdrex_dev *xhdrex = to_xhdrex(subdev);
+	struct v4l2_mbus_framefmt *get_fmt;
+
+	get_fmt = __xhdrex_get_pad_format(xhdrex, sd_state, fmt->pad, fmt->which);
+	if (!get_fmt)
+		return -EINVAL;
+
+	fmt->format = *get_fmt;
+
+	return 0;
+}
+
+static bool
+xhdrex_is_format_bayer(struct xhdrex_dev *xhdrex, u32 code)
+{
+	switch (code) {
+	case MEDIA_BUS_FMT_SRGGB8_1X8:
+	case MEDIA_BUS_FMT_SRGGB10_1X10:
+	case MEDIA_BUS_FMT_SRGGB12_1X12:
+	case MEDIA_BUS_FMT_SRGGB16_1X16:
+		xhdrex->bayer_fmt = XHDREXTRACT_RGGB;
+		break;
+	case MEDIA_BUS_FMT_SGRBG8_1X8:
+	case MEDIA_BUS_FMT_SGRBG10_1X10:
+	case MEDIA_BUS_FMT_SGRBG12_1X12:
+	case MEDIA_BUS_FMT_SGRBG16_1X16:
+		xhdrex->bayer_fmt = XHDREXTRACT_GRBG;
+		break;
+	case MEDIA_BUS_FMT_SGBRG8_1X8:
+	case MEDIA_BUS_FMT_SGBRG10_1X10:
+	case MEDIA_BUS_FMT_SGBRG12_1X12:
+	case MEDIA_BUS_FMT_SGBRG16_1X16:
+		xhdrex->bayer_fmt = XHDREXTRACT_GBRG;
+		break;
+	case MEDIA_BUS_FMT_SBGGR8_1X8:
+	case MEDIA_BUS_FMT_SBGGR10_1X10:
+	case MEDIA_BUS_FMT_SBGGR12_1X12:
+	case MEDIA_BUS_FMT_SBGGR16_1X16:
+		xhdrex->bayer_fmt = XHDREXTRACT_BGGR;
+		break;
+	default:
+		dev_dbg(xhdrex->xvip.dev, "Unsupported format for Sink/Source Pad");
+		xhdrex->bayer_fmt = XHDREXTRACT_RGGB;
+		return false;
+	}
+	return true;
+}
+
+static int xhdrex_set_format(struct v4l2_subdev *subdev, struct v4l2_subdev_state *sd_state,
+			     struct v4l2_subdev_format *fmt)
+{
+	struct xhdrex_dev *xhdrex = to_xhdrex(subdev);
+	struct v4l2_mbus_framefmt *__format;
+
+	__format = __xhdrex_get_pad_format(xhdrex, sd_state, fmt->pad, fmt->which);
+	if (!__format)
+		return -EINVAL;
+
+	*__format = fmt->format;
+
+	__format->width = clamp_t(unsigned int, fmt->format.width,
+				  XHDREXTRACT_MIN_WIDTH, xhdrex->max_width);
+	__format->height = clamp_t(unsigned int, fmt->format.height,
+				   XHDREXTRACT_MIN_HEIGHT, xhdrex->max_height);
+
+	if (xhdrex_is_format_bayer(xhdrex, __format->code)) {
+		dev_dbg(xhdrex->xvip.dev,
+			"Unsupported Sink Pad Media format, defaulting to RGGB");
+			__format->code = MEDIA_BUS_FMT_SRGGB10_1X10;
+	}
+	fmt->format = *__format;
+	return 0;
+}
+
+static int xhdrex_open(struct v4l2_subdev *subdev, struct v4l2_subdev_fh *fh)
+{
+	struct xhdrex_dev *xhdrex = to_xhdrex(subdev);
+	struct v4l2_mbus_framefmt *format;
+
+	format = v4l2_subdev_get_try_format(subdev, fh->state, XHDREXTRACT_PAD_SINK);
+	*format = xhdrex->default_formats[XHDREXTRACT_PAD_SINK];
+
+	format = v4l2_subdev_get_try_format(subdev, fh->state, XHDREXTRACT_PAD_SOURCE_STREAM0);
+	*format = xhdrex->default_formats[XHDREXTRACT_PAD_SOURCE_STREAM0];
+	format = v4l2_subdev_get_try_format(subdev, fh->state, XHDREXTRACT_PAD_SOURCE_STREAM1);
+	*format = xhdrex->default_formats[XHDREXTRACT_PAD_SOURCE_STREAM1];
+	return 0;
+}
+
+static int xhdrex_close(struct v4l2_subdev *subdev, struct v4l2_subdev_fh *fh)
+{
+	return 0;
+}
+
+static const struct v4l2_subdev_internal_ops xhdrex_internal_ops = {
+	.open = xhdrex_open,
+	.close = xhdrex_close,
+};
+
+static const struct v4l2_subdev_pad_ops xhdrex_pad_ops = {
+	.enum_mbus_code = xvip_enum_mbus_code,
+	.enum_frame_size = xvip_enum_frame_size,
+	.get_fmt = xhdrex_get_format,
+	.set_fmt = xhdrex_set_format,
+};
+
+static const struct v4l2_subdev_ops xhdrex_ops = {
+	.video = &xhdrex_video_ops,
+	.pad = &xhdrex_pad_ops,
+};
+
+static const struct media_entity_operations xhdrex_media_ops = {
+	.link_validate = v4l2_subdev_link_validate,
+};
+
+static int xhdrex_parse_of(struct xhdrex_dev *xhdrex)
+{
+	struct device *dev = xhdrex->xvip.dev;
+	struct device_node *node = dev->of_node;
+	struct device_node *ports;
+	struct device_node *port;
+	u32 port_id = 0;
+	int rval;
+
+	rval = of_property_read_u32(node, "xlnx,max-height",
+				    &xhdrex->max_height);
+	if (rval < 0) {
+		dev_err(dev, "missing xlnx,max-height property!");
+		return -EINVAL;
+	} else if (xhdrex->max_height > XHDREXTRACT_MAX_HEIGHT ||
+		 xhdrex->max_height < XHDREXTRACT_MIN_HEIGHT) {
+		dev_err(dev, "Invalid height in dt");
+		return -EINVAL;
+	}
+
+	rval = of_property_read_u32(node, "xlnx,max-width",
+				    &xhdrex->max_width);
+	if (rval < 0) {
+		dev_err(dev, "missing xlnx,max-width property!");
+		return -EINVAL;
+	} else if (xhdrex->max_width > XHDREXTRACT_MAX_WIDTH ||
+		 xhdrex->max_width < XHDREXTRACT_MIN_WIDTH) {
+		dev_err(dev, "Invalid width in dt");
+		return -EINVAL;
+	}
+
+	ports = of_get_child_by_name(node, "ports");
+	if (!ports)
+		ports = node;
+	/* Get the format description for each pad */
+	for_each_child_of_node(ports, port) {
+		if (port->name && (of_node_cmp(port->name, "port") == 0)) {
+			rval = of_property_read_u32(port, "reg", &port_id);
+			if (rval < 0) {
+				dev_err(dev, "No reg in DT");
+				return rval;
+			}
+
+			if (port_id >= XHDREXTRACT_PAD_MAX) {
+				dev_err(dev, "Invalid reg in DT");
+				return -EINVAL;
+			}
+			ports++;
+		}
+	}
+
+	xhdrex->rst_gpio = devm_gpiod_get(dev, "reset", GPIOD_OUT_HIGH);
+	if (IS_ERR(xhdrex->rst_gpio)) {
+		if (PTR_ERR(xhdrex->rst_gpio) != -EPROBE_DEFER)
+			dev_err(dev, "Reset GPIO not setup in DT");
+		return PTR_ERR(xhdrex->rst_gpio);
+	}
+	return 0;
+}
+
+static int xhdrex_probe(struct platform_device *pdev)
+{
+	struct xhdrex_dev *xhdrex;
+	struct v4l2_subdev *subdev;
+	struct v4l2_mbus_framefmt *default_format;
+	int rval;
+
+	xhdrex = devm_kzalloc(&pdev->dev, sizeof(*xhdrex), GFP_KERNEL);
+	if (!xhdrex)
+		return -ENOMEM;
+	xhdrex->xvip.dev = &pdev->dev;
+	rval = xhdrex_parse_of(xhdrex);
+	if (rval < 0)
+		return rval;
+	rval = xvip_init_resources(&xhdrex->xvip);
+	if (rval)
+		return -EIO;
+
+	/* Reset HDR Extract IP */
+	gpiod_set_value_cansleep(xhdrex->rst_gpio,
+				 XHDREXTRACT_RESET_DEASSERT);
+
+	/* Init V4L2 subdev */
+	subdev = &xhdrex->xvip.subdev;
+	v4l2_subdev_init(subdev, &xhdrex_ops);
+	subdev->dev = &pdev->dev;
+	subdev->internal_ops = &xhdrex_internal_ops;
+	strscpy(subdev->name, dev_name(&pdev->dev), sizeof(subdev->name));
+	subdev->flags |= V4L2_SUBDEV_FL_HAS_DEVNODE;
+
+	/* Default Format Initialization */
+	default_format = &xhdrex->default_formats[XHDREXTRACT_PAD_SINK];
+	default_format->code = MEDIA_BUS_FMT_SRGGB10_1X10;
+	default_format->colorspace = V4L2_COLORSPACE_SRGB;
+	default_format->width = XHDREXTRACT_DEF_IN_WIDTH;
+	default_format->height = XHDREXTRACT_DEF_IN_HEIGHT;
+	xhdrex->formats[XHDREXTRACT_PAD_SINK] = *default_format;
+
+	default_format = &xhdrex->default_formats[XHDREXTRACT_PAD_SINK];
+	*default_format = xhdrex->default_formats[XHDREXTRACT_PAD_SINK];
+	default_format->width = XHDREXTRACT_DEF_OUT_WIDTH;
+	default_format->height = XHDREXTRACT_DEF_OUT_HEIGHT;
+	xhdrex->formats[XHDREXTRACT_PAD_SOURCE_STREAM0] = *default_format;
+	xhdrex->formats[XHDREXTRACT_PAD_SOURCE_STREAM1] = *default_format;
+	xhdrex->pads[0].flags = MEDIA_PAD_FL_SINK;
+	xhdrex->pads[1].flags = MEDIA_PAD_FL_SOURCE;
+	xhdrex->pads[2].flags = MEDIA_PAD_FL_SOURCE;
+
+	/* Init Media Entity */
+	subdev->entity.ops = &xhdrex_media_ops;
+	rval = media_entity_pads_init(&subdev->entity, 3, xhdrex->pads);
+	if (rval < 0)
+		goto media_error;
+
+	platform_set_drvdata(pdev, xhdrex);
+	rval = v4l2_async_register_subdev(subdev);
+	if (rval < 0) {
+		dev_err(&pdev->dev, "failed to register subdev");
+		goto v4l2_subdev_error;
+	}
+	dev_info(&pdev->dev,
+		 "Xilinx Video HDR Extract Probe Successful");
+	return 0;
+
+v4l2_subdev_error:
+	media_entity_cleanup(&subdev->entity);
+media_error:
+	xvip_cleanup_resources(&xhdrex->xvip);
+	return rval;
+}
+
+static int xhdrex_remove(struct platform_device *pdev)
+{
+	struct xhdrex_dev *xhdrex = platform_get_drvdata(pdev);
+	struct v4l2_subdev *subdev = &xhdrex->xvip.subdev;
+
+	v4l2_async_unregister_subdev(subdev);
+	media_entity_cleanup(&subdev->entity);
+	xvip_cleanup_resources(&xhdrex->xvip);
+	return 0;
+}
+
+static const struct of_device_id xhdrex_of_id_table[] = {
+	{.compatible = "xlnx,hdrextract-1.0"},
+	{ }
+};
+MODULE_DEVICE_TABLE(of, xhdrex_of_id_table);
+
+static struct platform_driver xhdrex_driver = {
+	.driver = {
+		.name = "xilinx-hdrextract",
+		.of_match_table = xhdrex_of_id_table,
+	},
+	.probe = xhdrex_probe,
+	.remove = xhdrex_remove,
+};
+
+module_platform_driver(xhdrex_driver);
+MODULE_DESCRIPTION("Xilinx HDR Extract IP Driver");
+MODULE_LICENSE("GPL v2");
-- 
2.17.1

