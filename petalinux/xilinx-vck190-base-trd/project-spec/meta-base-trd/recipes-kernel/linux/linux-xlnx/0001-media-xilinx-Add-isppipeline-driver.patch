From 73f7ef5d8ea8af1764294b713968140efa0ed70e Mon Sep 17 00:00:00 2001
From: Kaushal Kumar <kaushal.kumar@amd.com>
Date: Thu, 15 Sep 2022 10:40:42 +0530
Subject: [PATCH 1/6] media-xilinx-Add-isppipeline-driver

Signed-off-by: Kaushal Kumar <kaushal.kumar@amd.com>
---
 drivers/media/platform/xilinx/Kconfig         |   9 +
 drivers/media/platform/xilinx/Makefile        |   1 +
 .../platform/xilinx/xilinx-isppipeline.c      | 552 ++++++++++++++++++
 3 files changed, 562 insertions(+)
 create mode 100644 drivers/media/platform/xilinx/xilinx-isppipeline.c

diff --git a/drivers/media/platform/xilinx/Kconfig b/drivers/media/platform/xilinx/Kconfig
index d98bd20e3638..54b72843aefc 100644
--- a/drivers/media/platform/xilinx/Kconfig
+++ b/drivers/media/platform/xilinx/Kconfig
@@ -77,6 +77,15 @@ config VIDEO_XILINX_HLS
 	help
 	  Driver for the Xilinx Video HLS Cores
 
+config VIDEO_XILINX_ISP
+	tristate "Xilinx Video ISP Pipeline"
+	depends on VIDEO_XILINX
+	help
+	  Driver for Xilinx Vitis Vision ISP Pipeline. This is a V4L sub-device
+	  based driver for Vitis Vision ISP pipeline that takes a Bayer video
+	  stream format as input and generates an RGB video output.
+	  Say M to modularize. Say N if unsure.
+
 config VIDEO_XILINX_REMAPPER
 	tristate "Xilinx Video Remapper"
 	depends on VIDEO_XILINX
diff --git a/drivers/media/platform/xilinx/Makefile b/drivers/media/platform/xilinx/Makefile
index e91436ce9e97..2553f4e589fb 100644
--- a/drivers/media/platform/xilinx/Makefile
+++ b/drivers/media/platform/xilinx/Makefile
@@ -16,6 +16,7 @@ obj-$(CONFIG_VIDEO_XILINX_DPRXSS) += xilinx-dprxss.o
 obj-$(CONFIG_VIDEO_XILINX_GAMMA) += xilinx-gamma.o
 obj-$(CONFIG_VIDEO_XILINX_HDMI21RXSS) += xilinx-hdmirxss.o
 obj-$(CONFIG_VIDEO_XILINX_HLS) += xilinx-hls.o
+obj-$(CONFIG_VIDEO_XILINX_ISP) += xilinx-isppipeline.o
 obj-$(CONFIG_VIDEO_XILINX_M2M) += xilinx-m2m.o
 obj-$(CONFIG_VIDEO_XILINX_MULTISCALER) += xilinx-multi-scaler.o
 obj-$(CONFIG_VIDEO_XILINX_REMAPPER) += xilinx-remapper.o
diff --git a/drivers/media/platform/xilinx/xilinx-isppipeline.c b/drivers/media/platform/xilinx/xilinx-isppipeline.c
new file mode 100644
index 000000000000..0cd6d7bc463e
--- /dev/null
+++ b/drivers/media/platform/xilinx/xilinx-isppipeline.c
@@ -0,0 +1,552 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Xilinx ISP IP
+ *
+ * Copyright (C) 2020, Xilinx, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * Copyright (C) 2022, Advanced Micro Devices, Inc.
+ *
+ */
+
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/gpio/consumer.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/platform_device.h>
+
+#include <media/v4l2-async.h>
+#include <media/v4l2-subdev.h>
+
+#include "xilinx-vip.h"
+
+#define XISPPIPELINE_AP_CTRL			(0x00)
+#define XISPPIPELINE_WIDTH				(0x0010)
+#define XISPPIPELINE_HEIGHT			(0x0018)
+#define XISPPIPELINE_RGAIN				(0x0030)
+#define XISPPIPELINE_BGAIN				(0x0038)
+#define XISPPIPELINE_MODE_REG			(0x0020)
+#define XISPPIPELINE_PAWB				(0x0054)
+#define XISPPIPELINE_GAMMA_LUT			(0x0800)
+#define XISPPIPELINE_INPUT_BAYER_FORMAT		(0x28)
+
+#define XISPPIPELINE_GAMMA_LUT_LEN		(768)
+#define XISPPIPELINE_MIN_HEIGHT			(64)
+#define XISPPIPELINE_MAX_HEIGHT			(4320)
+#define XISPPIPELINE_DEF_HEIGHT			(720)
+#define XISPPIPELINE_MIN_WIDTH			(64)
+#define XISPPIPELINE_MAX_WIDTH			(8192)
+#define XISPPIPELINE_DEF_WIDTH			(1280)
+
+#define XISPPIPELINE_RESET_DEASSERT		(0)
+#define XISPPIPELINE_RESET_ASSERT			(1)
+#define XISPPIPELINE_START				BIT(0)
+#define XISPPIPELINE_AUTO_RESTART			BIT(7)
+#define XISPPIPELINE_STREAM_ON	(XISPPIPELINE_AUTO_RESTART | XISPPIPELINE_START)
+
+enum xisp_bayer_format {
+	XISPPIPELINE_RGGB = 0,
+	XISPPIPELINE_GRBG,
+	XISPPIPELINE_GBRG,
+	XISPPIPELINE_BGGR,
+};
+
+struct xisp_dev {
+	struct xvip_device xvip;
+	struct media_pad pads[2];
+	struct v4l2_mbus_framefmt formats[2];
+	struct v4l2_mbus_framefmt default_formats[2];
+
+	enum xisp_bayer_format bayer_fmt;
+	struct gpio_desc *rst_gpio;
+	u32 max_width;
+	u32 max_height;
+	u32 rgain;
+	u32 bgain;
+	const u8 *gamma_lut;
+	u32 mode_reg;
+	u32 pawb;
+};
+
+static inline u32 xisp_read(struct xisp_dev *xisp, u32 reg)
+{
+	u32 data;
+
+	data = xvip_read(&xisp->xvip, reg);
+	dev_dbg(xisp->xvip.dev,
+		"Reading 0x%x from reg offset 0x%x", data, reg);
+	return data;
+}
+
+static inline void xisp_write(struct xisp_dev *xisp, u32 reg, u32 data)
+{
+	xvip_write(&xisp->xvip, reg, data);
+	dev_dbg(xisp->xvip.dev,
+		"Writing 0x%x to reg offset 0x%x", data, reg);
+#ifdef DEBUG
+	if (xisp_read(xisp, reg) != data)
+		dev_err(xisp->xvip.dev,
+			"Wrote 0x%x does not match read back", data);
+#endif
+}
+
+static inline struct xisp_dev *to_xisp(struct v4l2_subdev *subdev)
+{
+	return container_of(subdev, struct xisp_dev, xvip.subdev);
+}
+
+static struct v4l2_mbus_framefmt
+*__xisp_get_pad_format(struct xisp_dev *xisp,
+			struct v4l2_subdev_state *sd_state,
+			unsigned int pad, u32 which)
+{
+	struct v4l2_mbus_framefmt *get_fmt;
+
+	switch (which) {
+	case V4L2_SUBDEV_FORMAT_TRY:
+		get_fmt = v4l2_subdev_get_try_format(&xisp->xvip.subdev,
+						     sd_state, pad);
+		break;
+	case V4L2_SUBDEV_FORMAT_ACTIVE:
+		get_fmt = &xisp->formats[pad];
+		break;
+	default:
+		get_fmt = NULL;
+		break;
+	}
+
+	return get_fmt;
+}
+
+static void xisp_set_lut_entries(struct xisp_dev *xisp,
+				 const u32 lut_base, const u8 *lut)
+{
+	int itr;
+	u32 lut_offset, lut_data;
+
+	lut_offset = lut_base;
+
+	for (itr = 0; itr < XISPPIPELINE_GAMMA_LUT_LEN; itr = itr + 4) {
+		lut_data = (lut[itr + 3] << 24) | (lut[itr + 2] << 16) | (lut[itr + 1] << 8) |
+		lut[itr];
+		xisp_write(xisp, lut_offset, lut_data);
+		lut_offset += 4;
+	}
+}
+
+static int xisp_s_stream(struct v4l2_subdev *subdev, int enable)
+{
+	struct xisp_dev *xisp = to_xisp(subdev);
+
+	if (!enable) {
+		dev_dbg(xisp->xvip.dev, "%s : Off", __func__);
+		gpiod_set_value_cansleep(xisp->rst_gpio,
+					 XISPPIPELINE_RESET_ASSERT);
+		gpiod_set_value_cansleep(xisp->rst_gpio,
+					 XISPPIPELINE_RESET_DEASSERT);
+		return 0;
+	}
+
+	static u8 gamma_lut[XISPPIPELINE_GAMMA_LUT_LEN] = {0, 6, 10, 13, 15, 18, 20, 23, 25, 27,
+	29, 31, 33, 35, 36, 38, 40, 41, 43, 45, 46, 48, 49, 51, 52, 54, 55, 57, 58, 59, 61, 62,
+	63, 65, 66, 67, 69, 70, 71, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89,
+	90, 91, 92, 93, 95, 96, 97, 98,	99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
+	111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
+	129, 130, 131, 132, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 142, 143, 144,
+	145, 146, 147, 148, 149, 149, 150, 151, 152, 153, 154, 155, 155, 156, 157, 158, 159, 160,
+	161, 161, 162, 163, 164, 165, 166, 166, 167, 168, 169, 170, 170, 171, 172, 173, 174, 175,
+	175, 176, 177, 178, 179, 179, 180, 181, 182, 182, 183, 184, 185, 186, 186, 187, 188, 189,
+	189, 190, 191, 192, 193, 193, 194, 195, 196, 196, 197, 198, 199, 199, 200, 201, 202, 202,
+	203, 204, 205, 205, 206, 207, 208, 208, 209, 210, 211, 211, 212, 213, 213, 214, 215, 216,
+	216, 217, 218, 219, 219, 220, 221, 221, 222, 223, 224, 224, 225, 226, 226, 227, 228, 228,
+	229, 230, 231, 231, 232, 233, 233, 234, 235, 235, 236, 237, 238, 238, 239, 240, 240,
+	241, 242, 242, 243, 244, 244, 245, 246, 246, 247, 248, 248, 249, 250, 250, 251, 252,
+	252, 253, 254, 255, 0, 6, 10, 13, 15, 18, 20, 23, 25, 27, 29, 31, 33, 35, 36, 38, 40, 41,
+	43, 45, 46, 48, 49, 51, 52, 54, 55, 57, 58, 59, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72,
+	74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98,
+	99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
+	116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
+	132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 142, 143, 144, 145, 146, 147,
+	148, 149, 149, 150, 151, 152, 153, 154, 155, 155, 156, 157, 158, 159, 160, 161, 161,
+	162, 163, 164, 165, 166, 166, 167, 168, 169, 170, 170, 171, 172, 173, 174, 175, 175,
+	176, 177, 178, 179, 179, 180, 181, 182, 182, 183, 184, 185, 186, 186, 187, 188, 189,
+	189, 190, 191, 192, 193, 193, 194, 195, 196, 196, 197, 198, 199, 199, 200, 201, 202,
+	202, 203, 204, 205, 205, 206, 207, 208, 208, 209, 210, 211, 211, 212, 213, 213, 214,
+	215, 216, 216, 217, 218, 219, 219, 220, 221, 221, 222, 223, 224, 224, 225, 226, 226,
+	227, 228, 228, 229, 230, 231, 231, 232, 233, 233, 234, 235, 235, 236, 237, 238, 238,
+	239, 240, 240, 241, 242, 242, 243, 244, 244, 245, 246, 246, 247, 248, 248, 249, 250,
+	250, 251, 252, 252, 253, 254, 255, 0, 6, 10, 13, 15, 18, 20, 23, 25, 27, 29, 31, 33, 35,
+	36, 38, 40, 41, 43, 45, 46, 48, 49, 51, 52, 54, 55, 57, 58, 59, 61, 62, 63, 65, 66, 67,
+	69, 70, 71, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93,
+	95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
+	113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
+	130, 131, 132, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 142, 143, 144,
+	145, 146, 147, 148, 149, 149, 150, 151, 152, 153, 154, 155, 155, 156, 157, 158, 159,
+	160, 161, 161, 162, 163, 164, 165, 166, 166, 167, 168, 169, 170, 170, 171, 172, 173,
+	174, 175, 175, 176, 177, 178, 179, 179, 180, 181, 182, 182, 183, 184, 185, 186, 186,
+	187, 188, 189, 189, 190, 191, 192, 193, 193, 194, 195, 196, 196, 197, 198, 199, 199,
+	200, 201, 202, 202, 203, 204, 205, 205, 206, 207, 208, 208, 209, 210, 211, 211, 212,
+	213, 213, 214, 215, 216, 216, 217, 218, 219, 219, 220, 221, 221, 222, 223, 224, 224,
+	225, 226, 226, 227, 228, 228, 229, 230, 231, 231, 232, 233, 233, 234, 235, 235, 236,
+	237, 238, 238, 239, 240, 240, 241, 242, 242, 243, 244, 244, 245, 246, 246, 247, 248,
+	248, 249, 250, 250, 251, 252, 252, 253, 254, 255};
+
+	xisp_write(xisp, XISPPIPELINE_WIDTH,
+		   xisp->formats[XVIP_PAD_SINK].width);
+	xisp_write(xisp, XISPPIPELINE_HEIGHT,
+		   xisp->formats[XVIP_PAD_SINK].height);
+	xisp_write(xisp, XISPPIPELINE_RGAIN, xisp->rgain);
+	xisp_write(xisp, XISPPIPELINE_BGAIN, xisp->bgain);
+	xisp_write(xisp, XISPPIPELINE_MODE_REG, 1);
+	xisp_write(xisp, XISPPIPELINE_PAWB, xisp->pawb);
+	xisp_set_lut_entries(xisp, XISPPIPELINE_GAMMA_LUT, gamma_lut);
+
+	/* Start Isppipeline Video IP */
+	xisp_write(xisp, XISPPIPELINE_AP_CTRL, XISPPIPELINE_STREAM_ON);
+	return 0;
+}
+
+static const struct v4l2_subdev_video_ops xisp_video_ops = {
+	.s_stream = xisp_s_stream,
+};
+
+static int xisp_get_format(struct v4l2_subdev *subdev,
+			   struct v4l2_subdev_state *sd_state,
+			   struct v4l2_subdev_format *fmt)
+{
+	struct xisp_dev *xisp = to_xisp(subdev);
+	struct v4l2_mbus_framefmt *get_fmt;
+
+	get_fmt = __xisp_get_pad_format(xisp, sd_state, fmt->pad, fmt->which);
+	if (!get_fmt)
+		return -EINVAL;
+
+	fmt->format = *get_fmt;
+
+	return 0;
+}
+
+static bool
+xisp_is_format_bayer(struct xisp_dev *xisp, u32 code)
+{
+	switch (code) {
+	case MEDIA_BUS_FMT_SRGGB8_1X8:
+	case MEDIA_BUS_FMT_SRGGB10_1X10:
+	case MEDIA_BUS_FMT_SRGGB12_1X12:
+	case MEDIA_BUS_FMT_SRGGB16_1X16:
+		xisp->bayer_fmt = XISPPIPELINE_RGGB;
+		break;
+	case MEDIA_BUS_FMT_SGRBG8_1X8:
+	case MEDIA_BUS_FMT_SGRBG10_1X10:
+	case MEDIA_BUS_FMT_SGRBG12_1X12:
+	case MEDIA_BUS_FMT_SGRBG16_1X16:
+		xisp->bayer_fmt = XISPPIPELINE_GRBG;
+		break;
+	case MEDIA_BUS_FMT_SGBRG8_1X8:
+	case MEDIA_BUS_FMT_SGBRG10_1X10:
+	case MEDIA_BUS_FMT_SGBRG12_1X12:
+	case MEDIA_BUS_FMT_SGBRG16_1X16:
+		xisp->bayer_fmt = XISPPIPELINE_GBRG;
+		break;
+	case MEDIA_BUS_FMT_SBGGR8_1X8:
+	case MEDIA_BUS_FMT_SBGGR10_1X10:
+	case MEDIA_BUS_FMT_SBGGR12_1X12:
+	case MEDIA_BUS_FMT_SBGGR16_1X16:
+		xisp->bayer_fmt = XISPPIPELINE_BGGR;
+		break;
+	default:
+		dev_dbg(xisp->xvip.dev, "Unsupported format for Sink Pad");
+		return false;
+	}
+	return true;
+}
+
+static int xisp_set_format(struct v4l2_subdev *subdev,
+			   struct v4l2_subdev_state *sd_state,
+			   struct v4l2_subdev_format *fmt)
+{
+	struct xisp_dev *xisp = to_xisp(subdev);
+	struct v4l2_mbus_framefmt *__format;
+
+	__format = __xisp_get_pad_format(xisp, sd_state, fmt->pad, fmt->which);
+	if (!__format)
+		return -EINVAL;
+
+	*__format = fmt->format;
+
+	__format->width = clamp_t(unsigned int, fmt->format.width,
+				  XISPPIPELINE_MIN_WIDTH, xisp->max_width);
+	__format->height = clamp_t(unsigned int, fmt->format.height,
+				   XISPPIPELINE_MIN_HEIGHT, xisp->max_height);
+
+	if (fmt->pad == XVIP_PAD_SOURCE) {
+		if (__format->code != MEDIA_BUS_FMT_RBG888_1X24 &&
+		    __format->code != MEDIA_BUS_FMT_RBG101010_1X30 &&
+		    __format->code != MEDIA_BUS_FMT_RBG121212_1X36 &&
+		    __format->code != MEDIA_BUS_FMT_RBG161616_1X48) {
+			dev_dbg(xisp->xvip.dev,
+				"%s : Unsupported source media bus code format",
+				__func__);
+			__format->code = MEDIA_BUS_FMT_RBG888_1X24;
+		}
+	}
+
+	if (fmt->pad == XVIP_PAD_SINK) {
+		if (!xisp_is_format_bayer(xisp, __format->code)) {
+			dev_dbg(xisp->xvip.dev,
+				"Unsupported Sink Pad Media format, defaulting to RGGB");
+			__format->code = MEDIA_BUS_FMT_SRGGB8_1X8;
+		}
+	}
+
+	fmt->format = *__format;
+	return 0;
+}
+
+static int xisp_open(struct v4l2_subdev *subdev, struct v4l2_subdev_fh *fh)
+{
+	struct xisp_dev *xisp = to_xisp(subdev);
+	struct v4l2_mbus_framefmt *format;
+
+	format = v4l2_subdev_get_try_format(subdev, fh->state, XVIP_PAD_SINK);
+	*format = xisp->default_formats[XVIP_PAD_SINK];
+
+	format = v4l2_subdev_get_try_format(subdev, fh->state, XVIP_PAD_SOURCE);
+	*format = xisp->default_formats[XVIP_PAD_SOURCE];
+	return 0;
+}
+
+static int xisp_close(struct v4l2_subdev *subdev, struct v4l2_subdev_fh *fh)
+{
+	return 0;
+}
+
+static const struct v4l2_subdev_internal_ops xisp_internal_ops = {
+	.open = xisp_open,
+	.close = xisp_close,
+};
+
+static const struct v4l2_subdev_pad_ops xisp_pad_ops = {
+	.enum_mbus_code = xvip_enum_mbus_code,
+	.enum_frame_size = xvip_enum_frame_size,
+	.get_fmt = xisp_get_format,
+	.set_fmt = xisp_set_format,
+};
+
+static const struct v4l2_subdev_ops xisp_ops = {
+	.video = &xisp_video_ops,
+	.pad = &xisp_pad_ops,
+};
+
+static const struct media_entity_operations xisp_media_ops = {
+	.link_validate = v4l2_subdev_link_validate,
+};
+
+static int xisp_parse_of(struct xisp_dev *xisp)
+{
+	struct device *dev = xisp->xvip.dev;
+	struct device_node *node = dev->of_node;
+	struct device_node *ports;
+	struct device_node *port;
+	u32 port_id = 0;
+	int rval;
+
+	rval = of_property_read_u32(node, "xlnx,max-height",
+				    &xisp->max_height);
+	if (rval < 0) {
+		dev_err(dev, "missing xlnx,max-height property!");
+		return -EINVAL;
+	}
+
+	if (xisp->max_height > XISPPIPELINE_MAX_HEIGHT ||
+	    xisp->max_height < XISPPIPELINE_MIN_HEIGHT) {
+		dev_err(dev, "Invalid height in dt");
+		return -EINVAL;
+	}
+
+	rval = of_property_read_u32(node, "xlnx,max-width",
+				    &xisp->max_width);
+	if (rval < 0) {
+		dev_err(dev, "missing xlnx,max-width property!");
+		return -EINVAL;
+	}
+
+	if (xisp->max_width > XISPPIPELINE_MAX_WIDTH ||
+	    xisp->max_width < XISPPIPELINE_MIN_WIDTH) {
+		dev_err(dev, "Invalid width in dt");
+		return -EINVAL;
+	}
+
+	rval = of_property_read_u32(node, "xlnx,rgain",
+				    &xisp->rgain);
+	if (rval < 0) {
+		dev_err(dev, "missing xlnx,rgain!");
+		return -EINVAL;
+	}
+
+	rval = of_property_read_u32(node, "xlnx,bgain",
+				    &xisp->bgain);
+	if (rval < 0) {
+		dev_err(dev, "missing xlnx,bgain!");
+		return -EINVAL;
+	}
+
+	rval = of_property_read_u32(node, "xlnx,pawb",
+				    &xisp->pawb);
+	if (rval < 0) {
+		dev_err(dev, "missing xlnx,pawb!");
+		return -EINVAL;
+	}
+
+	rval = of_property_read_u32(node, "xlnx,mode-reg",
+				    &xisp->mode_reg);
+	if (rval < 0) {
+		dev_err(dev, "missing xlnx,mode-reg!");
+		return -EINVAL;
+	}
+
+	ports = of_get_child_by_name(node, "ports");
+	if (!ports)
+		ports = node;
+	/* Get the format description for each pad */
+	for_each_child_of_node(ports, port) {
+		if (port->name && (of_node_cmp(port->name, "port") == 0)) {
+			rval = of_property_read_u32(port, "reg", &port_id);
+			if (rval < 0) {
+				dev_err(dev, "No reg in DT");
+				return rval;
+			}
+
+			if (port_id != 0 && port_id != 1) {
+				dev_err(dev, "Invalid reg in DT");
+				return -EINVAL;
+			}
+		}
+	}
+
+	xisp->rst_gpio = devm_gpiod_get(dev, "reset", GPIOD_OUT_HIGH);
+	if (IS_ERR(xisp->rst_gpio)) {
+		if (PTR_ERR(xisp->rst_gpio) != -EPROBE_DEFER)
+			dev_err(dev, "Reset GPIO not setup in DT");
+		return PTR_ERR(xisp->rst_gpio);
+	}
+	return 0;
+}
+
+static int xisp_probe(struct platform_device *pdev)
+{
+	struct xisp_dev *xisp;
+	struct v4l2_subdev *subdev;
+	struct v4l2_mbus_framefmt *def_fmt;
+	int rval;
+
+	xisp = devm_kzalloc(&pdev->dev, sizeof(*xisp), GFP_KERNEL);
+	if (!xisp)
+		return -ENOMEM;
+
+	xisp->xvip.dev = &pdev->dev;
+
+	rval = xisp_parse_of(xisp);
+	if (rval < 0)
+		return rval;
+
+	rval = xvip_init_resources(&xisp->xvip);
+	if (rval)
+		return -EIO;
+
+	/* Reset Isppipeline IP */
+	gpiod_set_value_cansleep(xisp->rst_gpio,
+				 XISPPIPELINE_RESET_DEASSERT);
+
+	/* Init V4L2 subdev */
+	subdev = &xisp->xvip.subdev;
+	v4l2_subdev_init(subdev, &xisp_ops);
+	subdev->dev = &pdev->dev;
+	subdev->internal_ops = &xisp_internal_ops;
+	strscpy(subdev->name, dev_name(&pdev->dev), sizeof(subdev->name));
+	subdev->flags |= V4L2_SUBDEV_FL_HAS_DEVNODE;
+
+	/* Default Formats Initialization */
+	def_fmt = &xisp->default_formats[XVIP_PAD_SINK];
+	def_fmt->field = V4L2_FIELD_NONE;
+	def_fmt->colorspace = V4L2_COLORSPACE_SRGB;
+	def_fmt->width = XISPPIPELINE_DEF_WIDTH;
+	def_fmt->height = XISPPIPELINE_DEF_HEIGHT;
+
+	/*
+	 * Sink Pad can be any Bayer format.
+	 * Default Sink Pad format is RGGB.
+	 */
+	def_fmt->code = MEDIA_BUS_FMT_SRGGB10_1X10;
+	xisp->formats[XVIP_PAD_SINK] = *def_fmt;
+
+	def_fmt = &xisp->default_formats[XVIP_PAD_SOURCE];
+	*def_fmt = xisp->default_formats[XVIP_PAD_SINK];
+
+	/* Source Pad has a fixed media bus format of RGB */
+	def_fmt->code = MEDIA_BUS_FMT_RBG888_1X24;
+	xisp->formats[XVIP_PAD_SOURCE] = *def_fmt;
+
+	xisp->pads[XVIP_PAD_SINK].flags = MEDIA_PAD_FL_SINK;
+	xisp->pads[XVIP_PAD_SOURCE].flags = MEDIA_PAD_FL_SOURCE;
+
+	/* Init Media Entity */
+	subdev->entity.ops = &xisp_media_ops;
+	rval = media_entity_pads_init(&subdev->entity, 2, xisp->pads);
+	if (rval < 0)
+		goto media_error;
+
+	platform_set_drvdata(pdev, xisp);
+	rval = v4l2_async_register_subdev(subdev);
+	if (rval < 0) {
+		dev_err(&pdev->dev, "failed to register subdev");
+		goto v4l2_subdev_error;
+	}
+	dev_info(&pdev->dev,
+		 "Xilinx Video Isppipeline Probe Successful");
+	return 0;
+
+v4l2_subdev_error:
+	media_entity_cleanup(&subdev->entity);
+media_error:
+	xvip_cleanup_resources(&xisp->xvip);
+
+	return rval;
+}
+
+static int xisp_remove(struct platform_device *pdev)
+{
+	struct xisp_dev *xisp = platform_get_drvdata(pdev);
+	struct v4l2_subdev *subdev = &xisp->xvip.subdev;
+
+	v4l2_async_unregister_subdev(subdev);
+	media_entity_cleanup(&subdev->entity);
+	xvip_cleanup_resources(&xisp->xvip);
+
+	return 0;
+}
+
+static const struct of_device_id xisp_of_id_table[] = {
+	{.compatible = "xlnx,isppipeline-1.0"},
+	{ }
+};
+
+MODULE_DEVICE_TABLE(of, xisp_of_id_table);
+
+static struct platform_driver xisp_driver = {
+	.driver = {
+		.name = "xilinx-isppipeline",
+		.of_match_table = xisp_of_id_table,
+	},
+	.probe = xisp_probe,
+	.remove = xisp_remove,
+
+};
+
+module_platform_driver(xisp_driver);
+MODULE_DESCRIPTION("Xilinx Isppipeline IP Driver");
+MODULE_LICENSE("GPL v2");
-- 
2.17.1

