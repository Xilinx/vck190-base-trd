-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.2
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity blackLevelCorrection is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_Src_rows_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    p_Src_rows_empty_n : IN STD_LOGIC;
    p_Src_rows_read : OUT STD_LOGIC;
    p_Src_cols_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    p_Src_cols_empty_n : IN STD_LOGIC;
    p_Src_cols_read : OUT STD_LOGIC;
    p_Src_data_V_V_dout : IN STD_LOGIC_VECTOR (19 downto 0);
    p_Src_data_V_V_empty_n : IN STD_LOGIC;
    p_Src_data_V_V_read : OUT STD_LOGIC;
    p_Dst_data_V_V_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    p_Dst_data_V_V_full_n : IN STD_LOGIC;
    p_Dst_data_V_V_write : OUT STD_LOGIC );
end;


architecture behav of blackLevelCorrection is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv11_7E0 : STD_LOGIC_VECTOR (10 downto 0) := "11111100000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv28_8422 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000001000010000100010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_Src_rows_blk_n : STD_LOGIC;
    signal p_Src_cols_blk_n : STD_LOGIC;
    signal p_Src_data_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln69_reg_341 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Dst_data_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal icmp_ln69_reg_341_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal rw_ptr_0_i_reg_109 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln59_fu_316_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln59_reg_336 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln69_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln69_reg_341_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal rw_ptr_fu_143_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal trunc_ln647_fu_149_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln647_reg_350 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln887_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_355 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_78_1_i_reg_360 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln887_16_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_16_reg_365 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln301_fu_244_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln301_reg_370 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln301_6_fu_301_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln301_6_reg_375 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal lshr_ln_fu_124_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_78_fu_153_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_80_fu_179_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln215_fu_195_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1354_fu_198_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1118_fu_322_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_fu_208_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln887_fu_217_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_79_fu_224_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln23_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln301_fu_240_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln215_24_fu_252_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1354_1_fu_255_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1118_16_fu_329_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_s_fu_265_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln887_2_fu_274_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_81_fu_281_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln23_1_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln301_6_fu_297_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln59_fu_316_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln59_fu_316_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_fu_322_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_fu_322_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1118_16_fu_329_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_16_fu_329_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln1118_16_fu_329_p10 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1118_fu_322_p10 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln59_fu_316_p00 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln59_fu_316_p10 : STD_LOGIC_VECTOR (30 downto 0);

    component ISPPipeline_accelbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component ISPPipeline_accelcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;



begin
    ISPPipeline_accelbkb_U31 : component ISPPipeline_accelbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 31)
    port map (
        din0 => mul_ln59_fu_316_p0,
        din1 => mul_ln59_fu_316_p1,
        dout => mul_ln59_fu_316_p2);

    ISPPipeline_accelcud_U32 : component ISPPipeline_accelcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 11,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1118_fu_322_p0,
        din1 => mul_ln1118_fu_322_p1,
        dout => mul_ln1118_fu_322_p2);

    ISPPipeline_accelcud_U33 : component ISPPipeline_accelcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 11,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1118_16_fu_329_p0,
        din1 => mul_ln1118_16_fu_329_p1,
        dout => mul_ln1118_16_fu_329_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (p_Src_cols_empty_n = ap_const_logic_0) or (p_Src_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((not(((ap_start = ap_const_logic_0) or (p_Src_cols_empty_n = ap_const_logic_0) or (p_Src_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    rw_ptr_0_i_reg_109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln69_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                rw_ptr_0_i_reg_109 <= rw_ptr_fu_143_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (p_Src_cols_empty_n = ap_const_logic_0) or (p_Src_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                rw_ptr_0_i_reg_109 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln69_reg_341 <= icmp_ln69_fu_138_p2;
                icmp_ln69_reg_341_pp0_iter1_reg <= icmp_ln69_reg_341;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln69_reg_341_pp0_iter2_reg <= icmp_ln69_reg_341_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln69_reg_341 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln887_16_reg_365 <= icmp_ln887_16_fu_189_p2;
                icmp_ln887_reg_355 <= icmp_ln887_fu_163_p2;
                p_Result_78_1_i_reg_360 <= p_Src_data_V_V_dout(19 downto 10);
                trunc_ln647_reg_350 <= trunc_ln647_fu_149_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (p_Src_cols_empty_n = ap_const_logic_0) or (p_Src_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                mul_ln59_reg_336 <= mul_ln59_fu_316_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln69_reg_341_pp0_iter1_reg = ap_const_lv1_0))) then
                select_ln301_6_reg_375 <= select_ln301_6_fu_301_p3;
                select_ln301_reg_370 <= select_ln301_fu_244_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_Src_rows_empty_n, p_Src_cols_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, icmp_ln69_fu_138_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (p_Src_cols_empty_n = ap_const_logic_0) or (p_Src_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln69_fu_138_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((icmp_ln69_fu_138_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln1354_1_fu_255_p2 <= std_logic_vector(signed(ap_const_lv11_7E0) + signed(zext_ln215_24_fu_252_p1));
    add_ln1354_fu_198_p2 <= std_logic_vector(signed(ap_const_lv11_7E0) + signed(zext_ln215_fu_195_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(p_Src_data_V_V_empty_n, p_Dst_data_V_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln69_reg_341, ap_enable_reg_pp0_iter3, icmp_ln69_reg_341_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln69_reg_341_pp0_iter2_reg = ap_const_lv1_0) and (p_Dst_data_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln69_reg_341 = ap_const_lv1_0) and (p_Src_data_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(p_Src_data_V_V_empty_n, p_Dst_data_V_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln69_reg_341, ap_enable_reg_pp0_iter3, icmp_ln69_reg_341_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln69_reg_341_pp0_iter2_reg = ap_const_lv1_0) and (p_Dst_data_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln69_reg_341 = ap_const_lv1_0) and (p_Src_data_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(p_Src_data_V_V_empty_n, p_Dst_data_V_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln69_reg_341, ap_enable_reg_pp0_iter3, icmp_ln69_reg_341_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln69_reg_341_pp0_iter2_reg = ap_const_lv1_0) and (p_Dst_data_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln69_reg_341 = ap_const_lv1_0) and (p_Src_data_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, p_Src_rows_empty_n, p_Src_cols_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (p_Src_cols_empty_n = ap_const_logic_0) or (p_Src_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(p_Src_data_V_V_empty_n, icmp_ln69_reg_341)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln69_reg_341 = ap_const_lv1_0) and (p_Src_data_V_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter3_assign_proc : process(p_Dst_data_V_V_full_n, icmp_ln69_reg_341_pp0_iter2_reg)
    begin
                ap_block_state5_pp0_stage0_iter3 <= ((icmp_ln69_reg_341_pp0_iter2_reg = ap_const_lv1_0) and (p_Dst_data_V_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln69_fu_138_p2)
    begin
        if ((icmp_ln69_fu_138_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln23_1_fu_291_p2 <= "0" when (tmp_81_fu_281_p4 = ap_const_lv3_0) else "1";
    icmp_ln23_fu_234_p2 <= "0" when (tmp_79_fu_224_p4 = ap_const_lv3_0) else "1";
    icmp_ln69_fu_138_p2 <= "1" when (rw_ptr_0_i_reg_109 = mul_ln59_reg_336) else "0";
    icmp_ln887_16_fu_189_p2 <= "1" when (tmp_80_fu_179_p4 = ap_const_lv5_0) else "0";
    icmp_ln887_fu_163_p2 <= "1" when (tmp_78_fu_153_p4 = ap_const_lv5_0) else "0";
    lshr_ln_fu_124_p4 <= p_Src_cols_dout(15 downto 1);
    mul_ln1118_16_fu_329_p0 <= ap_const_lv28_8422(17 - 1 downto 0);
    mul_ln1118_16_fu_329_p1 <= mul_ln1118_16_fu_329_p10(11 - 1 downto 0);
    mul_ln1118_16_fu_329_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1354_1_fu_255_p2),28));
    mul_ln1118_fu_322_p0 <= ap_const_lv28_8422(17 - 1 downto 0);
    mul_ln1118_fu_322_p1 <= mul_ln1118_fu_322_p10(11 - 1 downto 0);
    mul_ln1118_fu_322_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1354_fu_198_p2),28));
    mul_ln59_fu_316_p0 <= mul_ln59_fu_316_p00(15 - 1 downto 0);
    mul_ln59_fu_316_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_124_p4),31));
    mul_ln59_fu_316_p1 <= mul_ln59_fu_316_p10(16 - 1 downto 0);
    mul_ln59_fu_316_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Src_rows_dout),31));

    p_Dst_data_V_V_blk_n_assign_proc : process(p_Dst_data_V_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, icmp_ln69_reg_341_pp0_iter2_reg)
    begin
        if (((icmp_ln69_reg_341_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            p_Dst_data_V_V_blk_n <= p_Dst_data_V_V_full_n;
        else 
            p_Dst_data_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_Dst_data_V_V_din <= (select_ln301_6_reg_375 & select_ln301_reg_370);

    p_Dst_data_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln69_reg_341_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln69_reg_341_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            p_Dst_data_V_V_write <= ap_const_logic_1;
        else 
            p_Dst_data_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    p_Src_cols_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_Src_cols_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_Src_cols_blk_n <= p_Src_cols_empty_n;
        else 
            p_Src_cols_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_Src_cols_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_Src_rows_empty_n, p_Src_cols_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_Src_cols_empty_n = ap_const_logic_0) or (p_Src_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_Src_cols_read <= ap_const_logic_1;
        else 
            p_Src_cols_read <= ap_const_logic_0;
        end if; 
    end process;


    p_Src_data_V_V_blk_n_assign_proc : process(p_Src_data_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln69_reg_341)
    begin
        if (((icmp_ln69_reg_341 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_Src_data_V_V_blk_n <= p_Src_data_V_V_empty_n;
        else 
            p_Src_data_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_Src_data_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln69_reg_341, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln69_reg_341 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_Src_data_V_V_read <= ap_const_logic_1;
        else 
            p_Src_data_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    p_Src_rows_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_Src_rows_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_Src_rows_blk_n <= p_Src_rows_empty_n;
        else 
            p_Src_rows_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_Src_rows_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_Src_rows_empty_n, p_Src_cols_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_Src_cols_empty_n = ap_const_logic_0) or (p_Src_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_Src_rows_read <= ap_const_logic_1;
        else 
            p_Src_rows_read <= ap_const_logic_0;
        end if; 
    end process;

    rw_ptr_fu_143_p2 <= std_logic_vector(unsigned(rw_ptr_0_i_reg_109) + unsigned(ap_const_lv31_1));
    select_ln301_6_fu_301_p3 <= 
        ap_const_lv10_3FF when (icmp_ln23_1_fu_291_p2(0) = '1') else 
        trunc_ln301_6_fu_297_p1;
    select_ln301_fu_244_p3 <= 
        ap_const_lv10_3FF when (icmp_ln23_fu_234_p2(0) = '1') else 
        trunc_ln301_fu_240_p1;
    select_ln887_2_fu_274_p3 <= 
        ap_const_lv13_0 when (icmp_ln887_16_reg_365(0) = '1') else 
        tmp_s_fu_265_p4;
    select_ln887_fu_217_p3 <= 
        ap_const_lv13_0 when (icmp_ln887_reg_355(0) = '1') else 
        tmp_fu_208_p4;
    tmp_78_fu_153_p4 <= p_Src_data_V_V_dout(9 downto 5);
    tmp_79_fu_224_p4 <= select_ln887_fu_217_p3(12 downto 10);
    tmp_80_fu_179_p4 <= p_Src_data_V_V_dout(19 downto 15);
    tmp_81_fu_281_p4 <= select_ln887_2_fu_274_p3(12 downto 10);
    tmp_fu_208_p4 <= mul_ln1118_fu_322_p2(27 downto 15);
    tmp_s_fu_265_p4 <= mul_ln1118_16_fu_329_p2(27 downto 15);
    trunc_ln301_6_fu_297_p1 <= select_ln887_2_fu_274_p3(10 - 1 downto 0);
    trunc_ln301_fu_240_p1 <= select_ln887_fu_217_p3(10 - 1 downto 0);
    trunc_ln647_fu_149_p1 <= p_Src_data_V_V_dout(10 - 1 downto 0);
    zext_ln215_24_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_78_1_i_reg_360),11));
    zext_ln215_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln647_reg_350),11));
end behav;
