-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ISPPipeline_accel_gammacorrection_9_9_2160_3840_2_Pipeline_colLoop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    aecin_4202_dout : IN STD_LOGIC_VECTOR (47 downto 0);
    aecin_4202_empty_n : IN STD_LOGIC;
    aecin_4202_read : OUT STD_LOGIC;
    p_dst_4201_din : OUT STD_LOGIC_VECTOR (47 downto 0);
    p_dst_4201_full_n : IN STD_LOGIC;
    p_dst_4201_write : OUT STD_LOGIC;
    width_cast : IN STD_LOGIC_VECTOR (10 downto 0);
    lut_0_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lut_0_0_ce0 : OUT STD_LOGIC;
    lut_0_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    lut_1_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lut_1_0_ce0 : OUT STD_LOGIC;
    lut_1_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    lut_2_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lut_2_0_ce0 : OUT STD_LOGIC;
    lut_2_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    lut_0_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lut_0_1_ce0 : OUT STD_LOGIC;
    lut_0_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    lut_1_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lut_1_1_ce0 : OUT STD_LOGIC;
    lut_1_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    lut_2_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lut_2_1_ce0 : OUT STD_LOGIC;
    lut_2_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of ISPPipeline_accel_gammacorrection_9_9_2160_3840_2_Pipeline_colLoop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln60_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal aecin_4202_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal p_dst_4201_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln573_fu_226_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln573_1_fu_231_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln573_2_fu_236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln573_3_fu_271_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln573_4_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln573_5_fu_281_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_V_2_fu_76 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_V : STD_LOGIC_VECTOR (10 downto 0);
    signal j_V_3_fu_185_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal val1_fu_202_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal val2_fu_206_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal val3_fu_216_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal val1_1_fu_241_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal val2_1_fu_251_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal val3_1_fu_261_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ISPPipeline_accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component ISPPipeline_accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    j_V_2_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln60_fu_191_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_V_2_fu_76 <= j_V_3_fu_185_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_V_2_fu_76 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    aecin_4202_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, aecin_4202_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            aecin_4202_blk_n <= aecin_4202_empty_n;
        else 
            aecin_4202_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    aecin_4202_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            aecin_4202_read <= ap_const_logic_1;
        else 
            aecin_4202_read <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, aecin_4202_empty_n, p_dst_4201_full_n)
    begin
                ap_block_pp0_stage0_01001 <= (((p_dst_4201_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_logic_0 = aecin_4202_empty_n) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, aecin_4202_empty_n, p_dst_4201_full_n)
    begin
                ap_block_pp0_stage0_11001 <= (((p_dst_4201_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_logic_0 = aecin_4202_empty_n) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, aecin_4202_empty_n, p_dst_4201_full_n)
    begin
                ap_block_pp0_stage0_subdone <= (((p_dst_4201_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_logic_0 = aecin_4202_empty_n) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(aecin_4202_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (ap_const_logic_0 = aecin_4202_empty_n);
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(p_dst_4201_full_n)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (p_dst_4201_full_n = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln60_fu_191_p2)
    begin
        if (((icmp_ln60_fu_191_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_V_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_V_2_fu_76, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_V <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_j_V <= j_V_2_fu_76;
        end if; 
    end process;

    icmp_ln60_fu_191_p2 <= "1" when (ap_sig_allocacmp_j_V = width_cast) else "0";
    j_V_3_fu_185_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_V) + unsigned(ap_const_lv11_1));
    lut_0_0_address0 <= zext_ln573_fu_226_p1(8 - 1 downto 0);

    lut_0_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lut_0_0_ce0 <= ap_const_logic_1;
        else 
            lut_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_0_1_address0 <= zext_ln573_3_fu_271_p1(8 - 1 downto 0);

    lut_0_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lut_0_1_ce0 <= ap_const_logic_1;
        else 
            lut_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_1_0_address0 <= zext_ln573_1_fu_231_p1(8 - 1 downto 0);

    lut_1_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lut_1_0_ce0 <= ap_const_logic_1;
        else 
            lut_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_1_1_address0 <= zext_ln573_4_fu_276_p1(8 - 1 downto 0);

    lut_1_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lut_1_1_ce0 <= ap_const_logic_1;
        else 
            lut_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_2_0_address0 <= zext_ln573_2_fu_236_p1(8 - 1 downto 0);

    lut_2_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lut_2_0_ce0 <= ap_const_logic_1;
        else 
            lut_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_2_1_address0 <= zext_ln573_5_fu_281_p1(8 - 1 downto 0);

    lut_2_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lut_2_1_ce0 <= ap_const_logic_1;
        else 
            lut_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_dst_4201_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, p_dst_4201_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_dst_4201_blk_n <= p_dst_4201_full_n;
        else 
            p_dst_4201_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_dst_4201_din <= (((((lut_2_1_q0 & lut_1_1_q0) & lut_0_1_q0) & lut_2_0_q0) & lut_1_0_q0) & lut_0_0_q0);

    p_dst_4201_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_dst_4201_write <= ap_const_logic_1;
        else 
            p_dst_4201_write <= ap_const_logic_0;
        end if; 
    end process;

    val1_1_fu_241_p4 <= aecin_4202_dout(31 downto 24);
    val1_fu_202_p1 <= aecin_4202_dout(8 - 1 downto 0);
    val2_1_fu_251_p4 <= aecin_4202_dout(39 downto 32);
    val2_fu_206_p4 <= aecin_4202_dout(15 downto 8);
    val3_1_fu_261_p4 <= aecin_4202_dout(47 downto 40);
    val3_fu_216_p4 <= aecin_4202_dout(23 downto 16);
    zext_ln573_1_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val2_fu_206_p4),64));
    zext_ln573_2_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val3_fu_216_p4),64));
    zext_ln573_3_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val1_1_fu_241_p4),64));
    zext_ln573_4_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val2_1_fu_251_p4),64));
    zext_ln573_5_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val3_1_fu_261_p4),64));
    zext_ln573_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val1_fu_202_p1),64));
end behav;
