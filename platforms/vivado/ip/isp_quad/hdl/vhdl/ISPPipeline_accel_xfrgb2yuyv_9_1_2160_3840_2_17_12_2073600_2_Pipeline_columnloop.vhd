-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ISPPipeline_accel_xfrgb2yuyv_9_1_2160_3840_2_17_12_2073600_2_Pipeline_columnloop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_dst_4201_dout : IN STD_LOGIC_VECTOR (47 downto 0);
    p_dst_4201_empty_n : IN STD_LOGIC;
    p_dst_4201_read : OUT STD_LOGIC;
    p_imgOutput_4203_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_imgOutput_4203_full_n : IN STD_LOGIC;
    p_imgOutput_4203_write : OUT STD_LOGIC;
    trunc_ln : IN STD_LOGIC_VECTOR (10 downto 0) );
end;


architecture behav of ISPPipeline_accel_xfrgb2yuyv_9_1_2160_3840_2_17_12_2073600_2_Pipeline_columnloop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv22_20E6 : STD_LOGIC_VECTOR (21 downto 0) := "0000000010000011100110";
    constant ap_const_lv22_4000 : STD_LOGIC_VECTOR (21 downto 0) := "0000000100000000000000";
    constant ap_const_lv22_3FED0E : STD_LOGIC_VECTOR (21 downto 0) := "1111111110110100001110";
    constant ap_const_lv22_382E : STD_LOGIC_VECTOR (21 downto 0) := "0000000011100000101110";
    constant ap_const_lv20_C8C : STD_LOGIC_VECTOR (19 downto 0) := "00000000110010001100";
    constant ap_const_lv22_3832 : STD_LOGIC_VECTOR (21 downto 0) := "0000000011100000110010";
    constant ap_const_lv21_1FF6E9 : STD_LOGIC_VECTOR (20 downto 0) := "111111111011011101001";
    constant ap_const_lv23_4084 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000010000100";
    constant ap_const_lv23_7FDAC0 : STD_LOGIC_VECTOR (22 downto 0) := "11111111101101011000000";
    constant ap_const_lv23_7FD0E5 : STD_LOGIC_VECTOR (22 downto 0) := "11111111101000011100101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln6270_fu_125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal p_dst_4201_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal p_imgOutput_4203_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal G_assign_reg_418 : STD_LOGIC_VECTOR (7 downto 0);
    signal G_assign_reg_418_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal B_assign_reg_423 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln772_fu_168_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal G_assign_1_reg_437 : STD_LOGIC_VECTOR (7 downto 0);
    signal G_assign_1_reg_437_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal B_assign_1_reg_442 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln772_1_fu_212_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_339_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_347_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_355_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_363_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal call_ret_xfExtractPixels_2_17_15_s_fu_105_ap_ready : STD_LOGIC;
    signal call_ret_xfExtractPixels_2_17_15_s_fu_105_ap_return_0 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret_xfExtractPixels_2_17_15_s_fu_105_ap_return_1 : STD_LOGIC_VECTOR (23 downto 0);
    signal j_fu_82 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_1 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_2_fu_119_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln708_fu_144_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln708_1_fu_172_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_303_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_312_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_321_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_330_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_371_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln1_fu_230_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_380_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln738_1_fu_245_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_389_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln738_2_fu_260_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_398_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln738_3_fu_275_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal Value_uchar_2_fu_269_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Value_uchar_3_fu_284_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Value_uchar_1_fu_254_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Value_uchar_fu_239_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_303_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_303_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_303_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_312_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_312_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_312_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_321_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_321_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_321_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_330_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_330_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_330_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_339_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_339_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_339_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_347_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_347_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_355_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_355_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_355_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_363_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_363_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_363_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_371_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_371_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_380_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_380_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_389_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_389_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_398_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_398_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_303_ce : STD_LOGIC;
    signal grp_fu_312_ce : STD_LOGIC;
    signal grp_fu_321_ce : STD_LOGIC;
    signal grp_fu_330_ce : STD_LOGIC;
    signal grp_fu_339_ce : STD_LOGIC;
    signal grp_fu_347_ce : STD_LOGIC;
    signal grp_fu_355_ce : STD_LOGIC;
    signal grp_fu_363_ce : STD_LOGIC;
    signal grp_fu_371_ce : STD_LOGIC;
    signal grp_fu_380_ce : STD_LOGIC;
    signal grp_fu_389_ce : STD_LOGIC;
    signal grp_fu_398_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_330_p00 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_339_p00 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_339_p20 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_347_p00 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_355_p00 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_355_p20 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_363_p00 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_363_p20 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_398_p00 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component ISPPipeline_accel_xfExtractPixels_2_17_15_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        p_read2 : IN STD_LOGIC_VECTOR (47 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component ISPPipeline_accel_mac_muladd_8ns_14ns_15ns_22_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component ISPPipeline_accel_mac_muladd_8ns_14s_15ns_22_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component ISPPipeline_accel_mac_muladd_8ns_12ns_22ns_23_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component ISPPipeline_accel_mac_muladd_8ns_14ns_22s_23_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component ISPPipeline_accel_mac_muladd_8ns_13s_22ns_23_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component ISPPipeline_accel_mac_muladd_8ns_15ns_23ns_23_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (22 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component ISPPipeline_accel_mac_muladd_8ns_15s_23s_23_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (22 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component ISPPipeline_accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    call_ret_xfExtractPixels_2_17_15_s_fu_105 : component ISPPipeline_accel_xfExtractPixels_2_17_15_s
    port map (
        ap_ready => call_ret_xfExtractPixels_2_17_15_s_fu_105_ap_ready,
        p_read2 => p_dst_4201_dout,
        ap_return_0 => call_ret_xfExtractPixels_2_17_15_s_fu_105_ap_return_0,
        ap_return_1 => call_ret_xfExtractPixels_2_17_15_s_fu_105_ap_return_1);

    mac_muladd_8ns_14ns_15ns_22_4_1_U647 : component ISPPipeline_accel_mac_muladd_8ns_14ns_15ns_22_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 14,
        din2_WIDTH => 15,
        dout_WIDTH => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_303_p0,
        din1 => grp_fu_303_p1,
        din2 => grp_fu_303_p2,
        ce => grp_fu_303_ce,
        dout => grp_fu_303_p3);

    mac_muladd_8ns_14s_15ns_22_4_1_U648 : component ISPPipeline_accel_mac_muladd_8ns_14s_15ns_22_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 14,
        din2_WIDTH => 15,
        dout_WIDTH => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_312_p0,
        din1 => grp_fu_312_p1,
        din2 => grp_fu_312_p2,
        ce => grp_fu_312_ce,
        dout => grp_fu_312_p3);

    mac_muladd_8ns_14ns_15ns_22_4_1_U649 : component ISPPipeline_accel_mac_muladd_8ns_14ns_15ns_22_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 14,
        din2_WIDTH => 15,
        dout_WIDTH => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_321_p0,
        din1 => grp_fu_321_p1,
        din2 => grp_fu_321_p2,
        ce => grp_fu_321_ce,
        dout => grp_fu_321_p3);

    mac_muladd_8ns_14ns_15ns_22_4_1_U650 : component ISPPipeline_accel_mac_muladd_8ns_14ns_15ns_22_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 14,
        din2_WIDTH => 15,
        dout_WIDTH => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_330_p0,
        din1 => grp_fu_330_p1,
        din2 => grp_fu_330_p2,
        ce => grp_fu_330_ce,
        dout => grp_fu_330_p3);

    mac_muladd_8ns_12ns_22ns_23_4_1_U651 : component ISPPipeline_accel_mac_muladd_8ns_12ns_22ns_23_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 12,
        din2_WIDTH => 22,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_339_p0,
        din1 => grp_fu_339_p1,
        din2 => grp_fu_339_p2,
        ce => grp_fu_339_ce,
        dout => grp_fu_339_p3);

    mac_muladd_8ns_14ns_22s_23_4_1_U652 : component ISPPipeline_accel_mac_muladd_8ns_14ns_22s_23_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 14,
        din2_WIDTH => 22,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_347_p0,
        din1 => grp_fu_347_p1,
        din2 => grp_fu_312_p3,
        ce => grp_fu_347_ce,
        dout => grp_fu_347_p3);

    mac_muladd_8ns_13s_22ns_23_4_1_U653 : component ISPPipeline_accel_mac_muladd_8ns_13s_22ns_23_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 13,
        din2_WIDTH => 22,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_355_p0,
        din1 => grp_fu_355_p1,
        din2 => grp_fu_355_p2,
        ce => grp_fu_355_ce,
        dout => grp_fu_355_p3);

    mac_muladd_8ns_12ns_22ns_23_4_1_U654 : component ISPPipeline_accel_mac_muladd_8ns_12ns_22ns_23_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 12,
        din2_WIDTH => 22,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_363_p0,
        din1 => grp_fu_363_p1,
        din2 => grp_fu_363_p2,
        ce => grp_fu_363_ce,
        dout => grp_fu_363_p3);

    mac_muladd_8ns_15ns_23ns_23_4_1_U655 : component ISPPipeline_accel_mac_muladd_8ns_15ns_23ns_23_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        din2_WIDTH => 23,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_371_p0,
        din1 => grp_fu_371_p1,
        din2 => grp_fu_339_p3,
        ce => grp_fu_371_ce,
        dout => grp_fu_371_p3);

    mac_muladd_8ns_15s_23s_23_4_1_U656 : component ISPPipeline_accel_mac_muladd_8ns_15s_23s_23_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        din2_WIDTH => 23,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_380_p0,
        din1 => grp_fu_380_p1,
        din2 => grp_fu_347_p3,
        ce => grp_fu_380_ce,
        dout => grp_fu_380_p3);

    mac_muladd_8ns_15s_23s_23_4_1_U657 : component ISPPipeline_accel_mac_muladd_8ns_15s_23s_23_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        din2_WIDTH => 23,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_389_p0,
        din1 => grp_fu_389_p1,
        din2 => grp_fu_355_p3,
        ce => grp_fu_389_ce,
        dout => grp_fu_389_p3);

    mac_muladd_8ns_15ns_23ns_23_4_1_U658 : component ISPPipeline_accel_mac_muladd_8ns_15ns_23ns_23_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        din2_WIDTH => 23,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_398_p0,
        din1 => grp_fu_398_p1,
        din2 => grp_fu_363_p3,
        ce => grp_fu_398_ce,
        dout => grp_fu_398_p3);

    flow_control_loop_pipe_sequential_init_U : component ISPPipeline_accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    j_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln6270_fu_125_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_82 <= j_2_fu_119_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_82 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                B_assign_1_reg_442 <= call_ret_xfExtractPixels_2_17_15_s_fu_105_ap_return_1(23 downto 16);
                B_assign_reg_423 <= call_ret_xfExtractPixels_2_17_15_s_fu_105_ap_return_0(23 downto 16);
                G_assign_1_reg_437 <= call_ret_xfExtractPixels_2_17_15_s_fu_105_ap_return_1(15 downto 8);
                G_assign_reg_418 <= call_ret_xfExtractPixels_2_17_15_s_fu_105_ap_return_0(15 downto 8);
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                G_assign_1_reg_437_pp0_iter2_reg <= G_assign_1_reg_437;
                G_assign_reg_418_pp0_iter2_reg <= G_assign_reg_418;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Value_uchar_1_fu_254_p2 <= (trunc_ln738_1_fu_245_p4 xor ap_const_lv8_80);
    Value_uchar_2_fu_269_p2 <= (trunc_ln738_2_fu_260_p4 xor ap_const_lv8_80);
    Value_uchar_3_fu_284_p2 <= std_logic_vector(unsigned(trunc_ln738_3_fu_275_p4) + unsigned(ap_const_lv8_10));
    Value_uchar_fu_239_p2 <= std_logic_vector(unsigned(trunc_ln1_fu_230_p4) + unsigned(ap_const_lv8_10));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter6, p_dst_4201_empty_n, p_imgOutput_4203_full_n)
    begin
                ap_block_pp0_stage0_01001 <= (((p_imgOutput_4203_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((p_dst_4201_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter6, p_dst_4201_empty_n, p_imgOutput_4203_full_n)
    begin
                ap_block_pp0_stage0_11001 <= (((p_imgOutput_4203_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((p_dst_4201_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter6, p_dst_4201_empty_n, p_imgOutput_4203_full_n)
    begin
                ap_block_pp0_stage0_subdone <= (((p_imgOutput_4203_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((p_dst_4201_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(p_dst_4201_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (p_dst_4201_empty_n = ap_const_logic_0);
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage0_iter6_assign_proc : process(p_imgOutput_4203_full_n)
    begin
                ap_block_state7_pp0_stage0_iter6 <= (p_imgOutput_4203_full_n = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln6270_fu_125_p2)
    begin
        if (((icmp_ln6270_fu_125_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_82, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_1 <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_j_1 <= j_fu_82;
        end if; 
    end process;


    grp_fu_303_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_303_ce <= ap_const_logic_1;
        else 
            grp_fu_303_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_303_p0 <= zext_ln772_fu_168_p1(8 - 1 downto 0);
    grp_fu_303_p1 <= ap_const_lv22_20E6(14 - 1 downto 0);
    grp_fu_303_p2 <= ap_const_lv22_4000(15 - 1 downto 0);

    grp_fu_312_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_312_ce <= ap_const_logic_1;
        else 
            grp_fu_312_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_312_p0 <= zext_ln772_fu_168_p1(8 - 1 downto 0);
    grp_fu_312_p1 <= ap_const_lv22_3FED0E(14 - 1 downto 0);
    grp_fu_312_p2 <= ap_const_lv22_4000(15 - 1 downto 0);

    grp_fu_321_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_321_ce <= ap_const_logic_1;
        else 
            grp_fu_321_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_321_p0 <= zext_ln772_fu_168_p1(8 - 1 downto 0);
    grp_fu_321_p1 <= ap_const_lv22_382E(14 - 1 downto 0);
    grp_fu_321_p2 <= ap_const_lv22_4000(15 - 1 downto 0);

    grp_fu_330_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_330_ce <= ap_const_logic_1;
        else 
            grp_fu_330_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_330_p0 <= grp_fu_330_p00(8 - 1 downto 0);
    grp_fu_330_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln708_1_fu_172_p1),22));
    grp_fu_330_p1 <= ap_const_lv22_20E6(14 - 1 downto 0);
    grp_fu_330_p2 <= ap_const_lv22_4000(15 - 1 downto 0);

    grp_fu_339_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_339_ce <= ap_const_logic_1;
        else 
            grp_fu_339_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_339_p0 <= grp_fu_339_p00(8 - 1 downto 0);
    grp_fu_339_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_assign_reg_423),20));
    grp_fu_339_p1 <= ap_const_lv20_C8C(12 - 1 downto 0);
    grp_fu_339_p2 <= grp_fu_339_p20(22 - 1 downto 0);
    grp_fu_339_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_303_p3),23));

    grp_fu_347_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_347_ce <= ap_const_logic_1;
        else 
            grp_fu_347_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_347_p0 <= grp_fu_347_p00(8 - 1 downto 0);
    grp_fu_347_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_assign_reg_423),22));
    grp_fu_347_p1 <= ap_const_lv22_3832(14 - 1 downto 0);

    grp_fu_355_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_355_ce <= ap_const_logic_1;
        else 
            grp_fu_355_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_355_p0 <= grp_fu_355_p00(8 - 1 downto 0);
    grp_fu_355_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_assign_reg_423),21));
    grp_fu_355_p1 <= ap_const_lv21_1FF6E9(13 - 1 downto 0);
    grp_fu_355_p2 <= grp_fu_355_p20(22 - 1 downto 0);
    grp_fu_355_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_321_p3),23));

    grp_fu_363_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_363_ce <= ap_const_logic_1;
        else 
            grp_fu_363_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_363_p0 <= grp_fu_363_p00(8 - 1 downto 0);
    grp_fu_363_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_assign_1_reg_442),20));
    grp_fu_363_p1 <= ap_const_lv20_C8C(12 - 1 downto 0);
    grp_fu_363_p2 <= grp_fu_363_p20(22 - 1 downto 0);
    grp_fu_363_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_330_p3),23));

    grp_fu_371_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_371_ce <= ap_const_logic_1;
        else 
            grp_fu_371_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_371_p0 <= zext_ln772_1_fu_212_p1(8 - 1 downto 0);
    grp_fu_371_p1 <= ap_const_lv23_4084(15 - 1 downto 0);

    grp_fu_380_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_380_ce <= ap_const_logic_1;
        else 
            grp_fu_380_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_380_p0 <= zext_ln772_1_fu_212_p1(8 - 1 downto 0);
    grp_fu_380_p1 <= ap_const_lv23_7FDAC0(15 - 1 downto 0);

    grp_fu_389_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_389_ce <= ap_const_logic_1;
        else 
            grp_fu_389_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_389_p0 <= zext_ln772_1_fu_212_p1(8 - 1 downto 0);
    grp_fu_389_p1 <= ap_const_lv23_7FD0E5(15 - 1 downto 0);

    grp_fu_398_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_398_ce <= ap_const_logic_1;
        else 
            grp_fu_398_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_398_p0 <= grp_fu_398_p00(8 - 1 downto 0);
    grp_fu_398_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(G_assign_1_reg_437_pp0_iter2_reg),23));
    grp_fu_398_p1 <= ap_const_lv23_4084(15 - 1 downto 0);
    icmp_ln6270_fu_125_p2 <= "1" when (ap_sig_allocacmp_j_1 = trunc_ln) else "0";
    j_2_fu_119_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_1) + unsigned(ap_const_lv11_1));

    p_dst_4201_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, p_dst_4201_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_dst_4201_blk_n <= p_dst_4201_empty_n;
        else 
            p_dst_4201_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_dst_4201_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_dst_4201_read <= ap_const_logic_1;
        else 
            p_dst_4201_read <= ap_const_logic_0;
        end if; 
    end process;


    p_imgOutput_4203_blk_n_assign_proc : process(ap_enable_reg_pp0_iter6, p_imgOutput_4203_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            p_imgOutput_4203_blk_n <= p_imgOutput_4203_full_n;
        else 
            p_imgOutput_4203_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_imgOutput_4203_din <= (((Value_uchar_2_fu_269_p2 & Value_uchar_3_fu_284_p2) & Value_uchar_1_fu_254_p2) & Value_uchar_fu_239_p2);

    p_imgOutput_4203_write_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            p_imgOutput_4203_write <= ap_const_logic_1;
        else 
            p_imgOutput_4203_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln1_fu_230_p4 <= grp_fu_371_p3(22 downto 15);
    trunc_ln708_1_fu_172_p1 <= call_ret_xfExtractPixels_2_17_15_s_fu_105_ap_return_1(8 - 1 downto 0);
    trunc_ln708_fu_144_p1 <= call_ret_xfExtractPixels_2_17_15_s_fu_105_ap_return_0(8 - 1 downto 0);
    trunc_ln738_1_fu_245_p4 <= grp_fu_380_p3(22 downto 15);
    trunc_ln738_2_fu_260_p4 <= grp_fu_389_p3(22 downto 15);
    trunc_ln738_3_fu_275_p4 <= grp_fu_398_p3(22 downto 15);
    zext_ln772_1_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(G_assign_reg_418_pp0_iter2_reg),23));
    zext_ln772_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln708_fu_144_p1),22));
end behav;
