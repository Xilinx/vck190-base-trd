-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.2
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rb_kernel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    imgblock_0_0_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_0_1_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_0_2_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_0_3_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_0_4_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_0_5_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_1_0_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_1_1_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_1_2_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_1_3_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_1_4_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_1_5_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_2_0_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_2_1_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_2_2_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_2_3_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_2_4_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_2_5_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_3_0_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_3_1_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_3_2_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_3_3_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_3_4_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_3_5_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_4_0_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_4_1_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_4_2_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_4_3_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_4_4_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_4_5_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    loop_r : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of rb_kernel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_FFFFFFF9 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ret_V_9_fu_436_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_9_reg_764 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ret_V_11_fu_566_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_11_reg_770 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_43_fu_572_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_43_reg_775 : STD_LOGIC_VECTOR (9 downto 0);
    signal t3_fu_661_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal t3_reg_781 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln79_fu_677_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln79_reg_786 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln81_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln81_reg_791 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal or_ln_fu_308_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln215_fu_316_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_320_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_37_fu_342_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_37_fu_342_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal rhs_V_fu_360_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal lhs_V_fu_338_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_fu_364_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_38_fu_382_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_38_fu_382_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_39_fu_404_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln215_22_fu_400_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1353_fu_422_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1353_fu_426_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1353_20_fu_432_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal lhs_V_7_fu_370_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln215_fu_442_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_450_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln215_3_fu_472_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_40_fu_480_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal rhs_V_5_fu_498_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal lhs_V_8_fu_468_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_10_fu_502_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_41_fu_512_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_42_fu_534_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln215_26_fu_530_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1353_21_fu_552_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1353_16_fu_556_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1353_22_fu_562_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal lhs_V_9_fu_508_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln_fu_593_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln75_fu_600_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln74_1_fu_590_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln75_fu_604_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln_fu_610_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln75_fu_620_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal t2_fu_628_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln1_fu_639_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln78_1_fu_650_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln78_fu_646_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln78_1_fu_657_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln77_fu_635_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_fu_624_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln79_fu_671_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln78_fu_667_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_fu_681_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln79_fu_693_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln80_fu_696_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln80_fu_709_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_fu_715_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln80_fu_725_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_19_fu_735_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_67_fu_701_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln80_1_fu_729_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln80_1_fu_745_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln80_fu_749_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal imgblock_0_0_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_0_1_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_0_2_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_0_3_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_0_4_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_0_5_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_1_0_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_1_1_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_1_2_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_1_3_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_1_4_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_1_5_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_2_0_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_2_1_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_2_2_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_2_3_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_2_4_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_2_5_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_3_0_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_3_1_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_3_2_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_3_3_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_3_4_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_3_5_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_4_0_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_4_1_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_4_2_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_4_3_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_4_4_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_4_5_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal loop_r_int_reg : STD_LOGIC_VECTOR (0 downto 0);

    component ISPPipeline_accelkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        din3 : IN STD_LOGIC_VECTOR (9 downto 0);
        din4 : IN STD_LOGIC_VECTOR (9 downto 0);
        din5 : IN STD_LOGIC_VECTOR (9 downto 0);
        din6 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;



begin
    ISPPipeline_accelkbM_U223 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_0_0_V_read_int_reg,
        din1 => imgblock_0_1_V_read_int_reg,
        din2 => imgblock_0_2_V_read_int_reg,
        din3 => imgblock_0_3_V_read_int_reg,
        din4 => imgblock_0_4_V_read_int_reg,
        din5 => imgblock_0_5_V_read_int_reg,
        din6 => zext_ln215_fu_316_p1,
        dout => tmp_s_fu_320_p8);

    ISPPipeline_accelkbM_U224 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_2_0_V_read_int_reg,
        din1 => imgblock_2_1_V_read_int_reg,
        din2 => imgblock_2_2_V_read_int_reg,
        din3 => imgblock_2_3_V_read_int_reg,
        din4 => imgblock_2_4_V_read_int_reg,
        din5 => imgblock_2_5_V_read_int_reg,
        din6 => tmp_37_fu_342_p7,
        dout => tmp_37_fu_342_p8);

    ISPPipeline_accelkbM_U225 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_2_0_V_read_int_reg,
        din1 => imgblock_2_1_V_read_int_reg,
        din2 => imgblock_2_2_V_read_int_reg,
        din3 => imgblock_2_3_V_read_int_reg,
        din4 => imgblock_2_4_V_read_int_reg,
        din5 => imgblock_2_5_V_read_int_reg,
        din6 => tmp_38_fu_382_p7,
        dout => tmp_38_fu_382_p8);

    ISPPipeline_accelkbM_U226 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_4_0_V_read_int_reg,
        din1 => imgblock_4_1_V_read_int_reg,
        din2 => imgblock_4_2_V_read_int_reg,
        din3 => imgblock_4_3_V_read_int_reg,
        din4 => imgblock_4_4_V_read_int_reg,
        din5 => imgblock_4_5_V_read_int_reg,
        din6 => zext_ln215_fu_316_p1,
        dout => tmp_39_fu_404_p8);

    ISPPipeline_accelkbM_U227 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_1_0_V_read_int_reg,
        din1 => imgblock_1_1_V_read_int_reg,
        din2 => imgblock_1_2_V_read_int_reg,
        din3 => imgblock_1_3_V_read_int_reg,
        din4 => imgblock_1_4_V_read_int_reg,
        din5 => imgblock_1_5_V_read_int_reg,
        din6 => select_ln215_fu_442_p3,
        dout => tmp_fu_450_p8);

    ISPPipeline_accelkbM_U228 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_1_0_V_read_int_reg,
        din1 => imgblock_1_1_V_read_int_reg,
        din2 => imgblock_1_2_V_read_int_reg,
        din3 => imgblock_1_3_V_read_int_reg,
        din4 => imgblock_1_4_V_read_int_reg,
        din5 => imgblock_1_5_V_read_int_reg,
        din6 => select_ln215_3_fu_472_p3,
        dout => tmp_40_fu_480_p8);

    ISPPipeline_accelkbM_U229 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_3_0_V_read_int_reg,
        din1 => imgblock_3_1_V_read_int_reg,
        din2 => imgblock_3_2_V_read_int_reg,
        din3 => imgblock_3_3_V_read_int_reg,
        din4 => imgblock_3_4_V_read_int_reg,
        din5 => imgblock_3_5_V_read_int_reg,
        din6 => select_ln215_fu_442_p3,
        dout => tmp_41_fu_512_p8);

    ISPPipeline_accelkbM_U230 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_3_0_V_read_int_reg,
        din1 => imgblock_3_1_V_read_int_reg,
        din2 => imgblock_3_2_V_read_int_reg,
        din3 => imgblock_3_3_V_read_int_reg,
        din4 => imgblock_3_4_V_read_int_reg,
        din5 => imgblock_3_5_V_read_int_reg,
        din6 => select_ln215_3_fu_472_p3,
        dout => tmp_42_fu_534_p8);

    ISPPipeline_accelkbM_U231 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_2_0_V_read_int_reg,
        din1 => imgblock_2_1_V_read_int_reg,
        din2 => imgblock_2_2_V_read_int_reg,
        din3 => imgblock_2_3_V_read_int_reg,
        din4 => imgblock_2_4_V_read_int_reg,
        din5 => imgblock_2_5_V_read_int_reg,
        din6 => zext_ln215_fu_316_p1,
        dout => tmp_43_fu_572_p8);




    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                icmp_ln81_reg_791 <= icmp_ln81_fu_687_p2;
                ret_V_11_reg_770 <= ret_V_11_fu_566_p2;
                ret_V_9_reg_764 <= ret_V_9_fu_436_p2;
                    t3_reg_781(13 downto 1) <= t3_fu_661_p2(13 downto 1);
                tmp_43_reg_775 <= tmp_43_fu_572_p8;
                trunc_ln79_reg_786 <= trunc_ln79_fu_677_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                imgblock_0_0_V_read_int_reg <= imgblock_0_0_V_read;
                imgblock_0_1_V_read_int_reg <= imgblock_0_1_V_read;
                imgblock_0_2_V_read_int_reg <= imgblock_0_2_V_read;
                imgblock_0_3_V_read_int_reg <= imgblock_0_3_V_read;
                imgblock_0_4_V_read_int_reg <= imgblock_0_4_V_read;
                imgblock_0_5_V_read_int_reg <= imgblock_0_5_V_read;
                imgblock_1_0_V_read_int_reg <= imgblock_1_0_V_read;
                imgblock_1_1_V_read_int_reg <= imgblock_1_1_V_read;
                imgblock_1_2_V_read_int_reg <= imgblock_1_2_V_read;
                imgblock_1_3_V_read_int_reg <= imgblock_1_3_V_read;
                imgblock_1_4_V_read_int_reg <= imgblock_1_4_V_read;
                imgblock_1_5_V_read_int_reg <= imgblock_1_5_V_read;
                imgblock_2_0_V_read_int_reg <= imgblock_2_0_V_read;
                imgblock_2_1_V_read_int_reg <= imgblock_2_1_V_read;
                imgblock_2_2_V_read_int_reg <= imgblock_2_2_V_read;
                imgblock_2_3_V_read_int_reg <= imgblock_2_3_V_read;
                imgblock_2_4_V_read_int_reg <= imgblock_2_4_V_read;
                imgblock_2_5_V_read_int_reg <= imgblock_2_5_V_read;
                imgblock_3_0_V_read_int_reg <= imgblock_3_0_V_read;
                imgblock_3_1_V_read_int_reg <= imgblock_3_1_V_read;
                imgblock_3_2_V_read_int_reg <= imgblock_3_2_V_read;
                imgblock_3_3_V_read_int_reg <= imgblock_3_3_V_read;
                imgblock_3_4_V_read_int_reg <= imgblock_3_4_V_read;
                imgblock_3_5_V_read_int_reg <= imgblock_3_5_V_read;
                imgblock_4_0_V_read_int_reg <= imgblock_4_0_V_read;
                imgblock_4_1_V_read_int_reg <= imgblock_4_1_V_read;
                imgblock_4_2_V_read_int_reg <= imgblock_4_2_V_read;
                imgblock_4_3_V_read_int_reg <= imgblock_4_3_V_read;
                imgblock_4_4_V_read_int_reg <= imgblock_4_4_V_read;
                imgblock_4_5_V_read_int_reg <= imgblock_4_5_V_read;
                loop_r_int_reg <= loop_r;
            end if;
        end if;
    end process;
    t3_reg_781(0) <= '0';
    add_ln1353_16_fu_556_p2 <= std_logic_vector(unsigned(zext_ln215_26_fu_530_p1) + unsigned(zext_ln1353_21_fu_552_p1));
    add_ln1353_fu_426_p2 <= std_logic_vector(unsigned(zext_ln215_22_fu_400_p1) + unsigned(zext_ln1353_fu_422_p1));
    add_ln80_fu_696_p2 <= std_logic_vector(unsigned(trunc_ln79_reg_786) + unsigned(sext_ln79_fu_693_p1));
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
    ap_return <= 
        ap_const_lv14_0 when (icmp_ln81_reg_791(0) = '1') else 
        select_ln80_fu_749_p3;
    icmp_ln81_fu_687_p2 <= "1" when (signed(res_fu_681_p2) < signed(ap_const_lv32_FFFFFFF9)) else "0";
    lhs_V_7_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_364_p2),12));
    lhs_V_8_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_450_p8),11));
    lhs_V_9_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_10_fu_502_p2),12));
    lhs_V_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_320_p8),11));
    or_ln_fu_308_p3 <= (ap_const_lv1_1 & loop_r_int_reg);
    res_fu_681_p2 <= std_logic_vector(unsigned(sub_ln79_fu_671_p2) + unsigned(sext_ln78_fu_667_p1));
    ret_V_10_fu_502_p2 <= std_logic_vector(unsigned(rhs_V_5_fu_498_p1) + unsigned(lhs_V_8_fu_468_p1));
    ret_V_11_fu_566_p2 <= std_logic_vector(unsigned(zext_ln1353_22_fu_562_p1) + unsigned(lhs_V_9_fu_508_p1));
    ret_V_9_fu_436_p2 <= std_logic_vector(unsigned(zext_ln1353_20_fu_432_p1) + unsigned(lhs_V_7_fu_370_p1));
    ret_V_fu_364_p2 <= std_logic_vector(unsigned(rhs_V_fu_360_p1) + unsigned(lhs_V_fu_338_p1));
    rhs_V_5_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_40_fu_480_p8),11));
    rhs_V_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_fu_342_p8),11));
    select_ln215_3_fu_472_p3 <= 
        ap_const_lv3_4 when (loop_r_int_reg(0) = '1') else 
        ap_const_lv3_3;
    select_ln215_fu_442_p3 <= 
        ap_const_lv3_2 when (loop_r_int_reg(0) = '1') else 
        ap_const_lv3_1;
    select_ln80_fu_749_p3 <= 
        sub_ln80_1_fu_729_p2 when (tmp_67_fu_701_p3(0) = '1') else 
        zext_ln80_1_fu_745_p1;
        sext_ln75_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_610_p4),31));

        sext_ln78_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t3_fu_661_p2),32));

        sext_ln79_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t3_reg_781),16));

    shl_ln1_fu_639_p3 <= (tmp_43_reg_775 & ap_const_lv3_0);
    shl_ln78_1_fu_650_p3 <= (tmp_43_reg_775 & ap_const_lv1_0);
    shl_ln_fu_593_p3 <= (ret_V_9_reg_764 & ap_const_lv2_0);
    sub_ln75_fu_604_p2 <= std_logic_vector(unsigned(zext_ln75_fu_600_p1) - unsigned(zext_ln74_1_fu_590_p1));
    sub_ln79_fu_671_p2 <= std_logic_vector(unsigned(zext_ln77_fu_635_p1) - unsigned(t1_fu_624_p1));
    sub_ln80_1_fu_729_p2 <= std_logic_vector(unsigned(ap_const_lv14_0) - unsigned(zext_ln80_fu_725_p1));
    sub_ln80_fu_709_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(add_ln80_fu_696_p2));
    t1_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln75_fu_620_p1),32));
    t2_fu_628_p3 <= (ret_V_11_reg_770 & ap_const_lv1_0);
    t3_fu_661_p2 <= std_logic_vector(unsigned(zext_ln78_fu_646_p1) - unsigned(zext_ln78_1_fu_657_p1));
    tmp_18_fu_715_p4 <= sub_ln80_fu_709_p2(15 downto 3);
    tmp_19_fu_735_p4 <= add_ln80_fu_696_p2(15 downto 3);
    tmp_37_fu_342_p7 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_r_int_reg),3));
    tmp_38_fu_382_p7 <= (ap_const_lv2_2 & loop_r_int_reg);
    tmp_67_fu_701_p3 <= add_ln80_fu_696_p2(15 downto 15);
    trunc_ln79_fu_677_p1 <= sub_ln79_fu_671_p2(16 - 1 downto 0);
    trunc_ln_fu_610_p4 <= sub_ln75_fu_604_p2(14 downto 1);
    zext_ln1353_20_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1353_fu_426_p2),12));
    zext_ln1353_21_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_fu_534_p8),11));
    zext_ln1353_22_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1353_16_fu_556_p2),12));
    zext_ln1353_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_404_p8),11));
    zext_ln215_22_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_38_fu_382_p8),11));
    zext_ln215_26_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_fu_512_p8),11));
    zext_ln215_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_308_p3),3));
    zext_ln74_1_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_9_reg_764),15));
    zext_ln75_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_593_p3),15));
    zext_ln77_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t2_fu_628_p3),32));
    zext_ln78_1_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln78_1_fu_650_p3),14));
    zext_ln78_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_639_p3),14));
    zext_ln80_1_fu_745_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_735_p4),14));
    zext_ln80_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_715_p4),14));
end behav;
