-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.2
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rgr_bgb_kernel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    imgblock_0_0_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_0_1_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_0_2_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_0_3_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_0_4_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_0_5_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_1_0_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_1_1_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_1_2_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_1_3_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_1_4_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_1_5_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_2_0_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_2_1_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_2_2_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_2_3_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_2_4_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_2_5_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_3_0_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_3_1_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_3_2_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_3_3_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_3_4_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_3_5_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_4_0_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_4_1_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_4_2_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_4_3_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_4_4_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_4_5_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    loop_r : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of rgr_bgb_kernel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv15_7FF9 : STD_LOGIC_VECTOR (14 downto 0) := "111111111111001";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ret_V_3_fu_558_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ret_V_3_reg_788 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal lshr_ln_reg_793 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln96_fu_680_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln96_reg_798 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln96_reg_798_pp0_iter1_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln96_fu_692_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln96_reg_803 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal or_ln_fu_300_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln215_fu_308_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_312_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_19_fu_334_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal rhs_V_fu_352_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal lhs_V_fu_330_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln215_fu_362_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_20_fu_370_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln215_1_fu_392_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_21_fu_400_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal rhs_V_1_fu_418_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal lhs_V_1_fu_388_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_1_fu_422_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_22_fu_432_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_22_fu_432_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_23_fu_462_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_23_fu_462_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln215_6_fu_450_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1353_12_fu_480_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1353_fu_484_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1353_13_fu_490_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal lhs_V_2_fu_428_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_2_fu_494_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_504_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_24_fu_526_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln215_7_fu_522_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1353_14_fu_544_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1353_4_fu_548_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1353_15_fu_554_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1353_fu_500_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_25_fu_564_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_26_fu_586_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal rhs_V_2_fu_604_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal lhs_V_3_fu_582_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_4_fu_608_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal t3_fu_614_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_27_fu_626_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln_fu_648_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln95_1_fu_656_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln95_fu_644_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal t4_fu_660_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ret_V_fu_356_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln94_fu_622_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln95_2_fu_666_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln96_fu_689_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln91_fu_686_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln96_1_fu_701_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln96_fu_698_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal res_fu_704_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln97_fu_718_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln97_3_fu_724_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln97_fu_734_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln97_fu_738_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln97_4_fu_748_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln97_1_fu_758_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_65_fu_710_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln97_1_fu_742_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln97_1_fu_762_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln98_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln97_fu_766_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal imgblock_0_0_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_0_1_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_0_2_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_0_3_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_0_4_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_0_5_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_1_0_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_1_1_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_1_2_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_1_3_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_1_4_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_1_5_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_2_0_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_2_1_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_2_2_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_2_3_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_2_4_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_2_5_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_3_0_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_3_1_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_3_2_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_3_3_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_3_4_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_3_5_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_4_0_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_4_1_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_4_2_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_4_3_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_4_4_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_4_5_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal loop_r_int_reg : STD_LOGIC_VECTOR (0 downto 0);

    component ISPPipeline_accelkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        din3 : IN STD_LOGIC_VECTOR (9 downto 0);
        din4 : IN STD_LOGIC_VECTOR (9 downto 0);
        din5 : IN STD_LOGIC_VECTOR (9 downto 0);
        din6 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;



begin
    ISPPipeline_accelkbM_U141 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_0_0_V_read_int_reg,
        din1 => imgblock_0_1_V_read_int_reg,
        din2 => imgblock_0_2_V_read_int_reg,
        din3 => imgblock_0_3_V_read_int_reg,
        din4 => imgblock_0_4_V_read_int_reg,
        din5 => imgblock_0_5_V_read_int_reg,
        din6 => zext_ln215_fu_308_p1,
        dout => tmp_s_fu_312_p8);

    ISPPipeline_accelkbM_U142 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_4_0_V_read_int_reg,
        din1 => imgblock_4_1_V_read_int_reg,
        din2 => imgblock_4_2_V_read_int_reg,
        din3 => imgblock_4_3_V_read_int_reg,
        din4 => imgblock_4_4_V_read_int_reg,
        din5 => imgblock_4_5_V_read_int_reg,
        din6 => zext_ln215_fu_308_p1,
        dout => tmp_19_fu_334_p8);

    ISPPipeline_accelkbM_U143 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_1_0_V_read_int_reg,
        din1 => imgblock_1_1_V_read_int_reg,
        din2 => imgblock_1_2_V_read_int_reg,
        din3 => imgblock_1_3_V_read_int_reg,
        din4 => imgblock_1_4_V_read_int_reg,
        din5 => imgblock_1_5_V_read_int_reg,
        din6 => select_ln215_fu_362_p3,
        dout => tmp_20_fu_370_p8);

    ISPPipeline_accelkbM_U144 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_1_0_V_read_int_reg,
        din1 => imgblock_1_1_V_read_int_reg,
        din2 => imgblock_1_2_V_read_int_reg,
        din3 => imgblock_1_3_V_read_int_reg,
        din4 => imgblock_1_4_V_read_int_reg,
        din5 => imgblock_1_5_V_read_int_reg,
        din6 => select_ln215_1_fu_392_p3,
        dout => tmp_21_fu_400_p8);

    ISPPipeline_accelkbM_U145 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_2_0_V_read_int_reg,
        din1 => imgblock_2_1_V_read_int_reg,
        din2 => imgblock_2_2_V_read_int_reg,
        din3 => imgblock_2_3_V_read_int_reg,
        din4 => imgblock_2_4_V_read_int_reg,
        din5 => imgblock_2_5_V_read_int_reg,
        din6 => tmp_22_fu_432_p7,
        dout => tmp_22_fu_432_p8);

    ISPPipeline_accelkbM_U146 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_2_0_V_read_int_reg,
        din1 => imgblock_2_1_V_read_int_reg,
        din2 => imgblock_2_2_V_read_int_reg,
        din3 => imgblock_2_3_V_read_int_reg,
        din4 => imgblock_2_4_V_read_int_reg,
        din5 => imgblock_2_5_V_read_int_reg,
        din6 => tmp_23_fu_462_p7,
        dout => tmp_23_fu_462_p8);

    ISPPipeline_accelkbM_U147 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_3_0_V_read_int_reg,
        din1 => imgblock_3_1_V_read_int_reg,
        din2 => imgblock_3_2_V_read_int_reg,
        din3 => imgblock_3_3_V_read_int_reg,
        din4 => imgblock_3_4_V_read_int_reg,
        din5 => imgblock_3_5_V_read_int_reg,
        din6 => select_ln215_fu_362_p3,
        dout => tmp_fu_504_p8);

    ISPPipeline_accelkbM_U148 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_3_0_V_read_int_reg,
        din1 => imgblock_3_1_V_read_int_reg,
        din2 => imgblock_3_2_V_read_int_reg,
        din3 => imgblock_3_3_V_read_int_reg,
        din4 => imgblock_3_4_V_read_int_reg,
        din5 => imgblock_3_5_V_read_int_reg,
        din6 => select_ln215_1_fu_392_p3,
        dout => tmp_24_fu_526_p8);

    ISPPipeline_accelkbM_U149 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_2_0_V_read_int_reg,
        din1 => imgblock_2_1_V_read_int_reg,
        din2 => imgblock_2_2_V_read_int_reg,
        din3 => imgblock_2_3_V_read_int_reg,
        din4 => imgblock_2_4_V_read_int_reg,
        din5 => imgblock_2_5_V_read_int_reg,
        din6 => select_ln215_fu_362_p3,
        dout => tmp_25_fu_564_p8);

    ISPPipeline_accelkbM_U150 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_2_0_V_read_int_reg,
        din1 => imgblock_2_1_V_read_int_reg,
        din2 => imgblock_2_2_V_read_int_reg,
        din3 => imgblock_2_3_V_read_int_reg,
        din4 => imgblock_2_4_V_read_int_reg,
        din5 => imgblock_2_5_V_read_int_reg,
        din6 => select_ln215_1_fu_392_p3,
        dout => tmp_26_fu_586_p8);

    ISPPipeline_accelkbM_U151 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_2_0_V_read_int_reg,
        din1 => imgblock_2_1_V_read_int_reg,
        din2 => imgblock_2_2_V_read_int_reg,
        din3 => imgblock_2_3_V_read_int_reg,
        din4 => imgblock_2_4_V_read_int_reg,
        din5 => imgblock_2_5_V_read_int_reg,
        din6 => zext_ln215_fu_308_p1,
        dout => tmp_27_fu_626_p8);




    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                add_ln96_reg_798 <= add_ln96_fu_680_p2;
                add_ln96_reg_798_pp0_iter1_reg <= add_ln96_reg_798;
                lshr_ln_reg_793 <= ret_V_fu_356_p2(10 downto 1);
                ret_V_3_reg_788 <= ret_V_3_fu_558_p2;
                sub_ln96_reg_803 <= sub_ln96_fu_692_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                imgblock_0_0_V_read_int_reg <= imgblock_0_0_V_read;
                imgblock_0_1_V_read_int_reg <= imgblock_0_1_V_read;
                imgblock_0_2_V_read_int_reg <= imgblock_0_2_V_read;
                imgblock_0_3_V_read_int_reg <= imgblock_0_3_V_read;
                imgblock_0_4_V_read_int_reg <= imgblock_0_4_V_read;
                imgblock_0_5_V_read_int_reg <= imgblock_0_5_V_read;
                imgblock_1_0_V_read_int_reg <= imgblock_1_0_V_read;
                imgblock_1_1_V_read_int_reg <= imgblock_1_1_V_read;
                imgblock_1_2_V_read_int_reg <= imgblock_1_2_V_read;
                imgblock_1_3_V_read_int_reg <= imgblock_1_3_V_read;
                imgblock_1_4_V_read_int_reg <= imgblock_1_4_V_read;
                imgblock_1_5_V_read_int_reg <= imgblock_1_5_V_read;
                imgblock_2_0_V_read_int_reg <= imgblock_2_0_V_read;
                imgblock_2_1_V_read_int_reg <= imgblock_2_1_V_read;
                imgblock_2_2_V_read_int_reg <= imgblock_2_2_V_read;
                imgblock_2_3_V_read_int_reg <= imgblock_2_3_V_read;
                imgblock_2_4_V_read_int_reg <= imgblock_2_4_V_read;
                imgblock_2_5_V_read_int_reg <= imgblock_2_5_V_read;
                imgblock_3_0_V_read_int_reg <= imgblock_3_0_V_read;
                imgblock_3_1_V_read_int_reg <= imgblock_3_1_V_read;
                imgblock_3_2_V_read_int_reg <= imgblock_3_2_V_read;
                imgblock_3_3_V_read_int_reg <= imgblock_3_3_V_read;
                imgblock_3_4_V_read_int_reg <= imgblock_3_4_V_read;
                imgblock_3_5_V_read_int_reg <= imgblock_3_5_V_read;
                imgblock_4_0_V_read_int_reg <= imgblock_4_0_V_read;
                imgblock_4_1_V_read_int_reg <= imgblock_4_1_V_read;
                imgblock_4_2_V_read_int_reg <= imgblock_4_2_V_read;
                imgblock_4_3_V_read_int_reg <= imgblock_4_3_V_read;
                imgblock_4_4_V_read_int_reg <= imgblock_4_4_V_read;
                imgblock_4_5_V_read_int_reg <= imgblock_4_5_V_read;
                loop_r_int_reg <= loop_r;
            end if;
        end if;
    end process;
    add_ln1353_4_fu_548_p2 <= std_logic_vector(unsigned(zext_ln215_7_fu_522_p1) + unsigned(zext_ln1353_14_fu_544_p1));
    add_ln1353_fu_484_p2 <= std_logic_vector(unsigned(zext_ln215_6_fu_450_p1) + unsigned(zext_ln1353_12_fu_480_p1));
    add_ln96_fu_680_p2 <= std_logic_vector(unsigned(zext_ln94_fu_622_p1) + unsigned(zext_ln95_2_fu_666_p1));
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
    ap_return <= 
        ap_const_lv14_0 when (icmp_ln98_fu_774_p2(0) = '1') else 
        select_ln97_fu_766_p3;
    icmp_ln98_fu_774_p2 <= "1" when (signed(res_fu_704_p2) < signed(ap_const_lv15_7FF9)) else "0";
    lhs_V_1_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_370_p8),11));
    lhs_V_2_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_1_fu_422_p2),12));
    lhs_V_3_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_564_p8),11));
    lhs_V_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_312_p8),11));
    or_ln_fu_300_p3 <= (ap_const_lv1_1 & loop_r_int_reg);
    res_fu_704_p2 <= std_logic_vector(unsigned(zext_ln96_1_fu_701_p1) + unsigned(sext_ln96_fu_698_p1));
    ret_V_1_fu_422_p2 <= std_logic_vector(unsigned(rhs_V_1_fu_418_p1) + unsigned(lhs_V_1_fu_388_p1));
    ret_V_2_fu_494_p2 <= std_logic_vector(unsigned(zext_ln1353_13_fu_490_p1) + unsigned(lhs_V_2_fu_428_p1));
    ret_V_3_fu_558_p2 <= std_logic_vector(unsigned(zext_ln1353_15_fu_554_p1) + unsigned(zext_ln1353_fu_500_p1));
    ret_V_4_fu_608_p2 <= std_logic_vector(unsigned(rhs_V_2_fu_604_p1) + unsigned(lhs_V_3_fu_582_p1));
    ret_V_fu_356_p2 <= std_logic_vector(unsigned(rhs_V_fu_352_p1) + unsigned(lhs_V_fu_330_p1));
    rhs_V_1_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_400_p8),11));
    rhs_V_2_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_586_p8),11));
    rhs_V_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_334_p8),11));
    select_ln215_1_fu_392_p3 <= 
        ap_const_lv3_4 when (loop_r_int_reg(0) = '1') else 
        ap_const_lv3_3;
    select_ln215_fu_362_p3 <= 
        ap_const_lv3_2 when (loop_r_int_reg(0) = '1') else 
        ap_const_lv3_1;
    select_ln97_fu_766_p3 <= 
        sub_ln97_1_fu_742_p2 when (tmp_65_fu_710_p3(0) = '1') else 
        zext_ln97_1_fu_762_p1;
        sext_ln96_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln96_reg_803),15));

        sext_ln97_1_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln97_4_fu_748_p4),13));

        sext_ln97_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln97_3_fu_724_p4),13));

    shl_ln_fu_648_p3 <= (tmp_27_fu_626_p8 & ap_const_lv2_0);
    sub_ln96_fu_692_p2 <= std_logic_vector(unsigned(zext_ln96_fu_689_p1) - unsigned(zext_ln91_fu_686_p1));
    sub_ln97_1_fu_742_p2 <= std_logic_vector(unsigned(ap_const_lv14_0) - unsigned(zext_ln97_fu_738_p1));
    sub_ln97_fu_718_p2 <= std_logic_vector(unsigned(ap_const_lv15_0) - unsigned(res_fu_704_p2));
    t3_fu_614_p3 <= (ret_V_4_fu_608_p2 & ap_const_lv2_0);
    t4_fu_660_p2 <= std_logic_vector(unsigned(zext_ln95_1_fu_656_p1) + unsigned(zext_ln95_fu_644_p1));
    tmp_22_fu_432_p7 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_r_int_reg),3));
    tmp_23_fu_462_p7 <= (ap_const_lv2_2 & loop_r_int_reg);
    tmp_65_fu_710_p3 <= res_fu_704_p2(14 downto 14);
    trunc_ln97_3_fu_724_p4 <= sub_ln97_fu_718_p2(14 downto 3);
    trunc_ln97_4_fu_748_p4 <= res_fu_704_p2(14 downto 3);
    zext_ln1353_12_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_462_p8),11));
    zext_ln1353_13_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1353_fu_484_p2),12));
    zext_ln1353_14_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_526_p8),11));
    zext_ln1353_15_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1353_4_fu_548_p2),13));
    zext_ln1353_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_2_fu_494_p2),13));
    zext_ln215_6_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_432_p8),11));
    zext_ln215_7_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_504_p8),11));
    zext_ln215_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_300_p3),3));
    zext_ln91_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_3_reg_788),14));
    zext_ln94_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t3_fu_614_p3),14));
    zext_ln95_1_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_648_p3),13));
    zext_ln95_2_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t4_fu_660_p2),14));
    zext_ln95_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_626_p8),13));
    zext_ln96_1_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln96_reg_798_pp0_iter1_reg),15));
    zext_ln96_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_793),14));
    zext_ln97_1_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln97_1_fu_758_p1),14));
    zext_ln97_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln97_fu_734_p1),14));
end behav;
