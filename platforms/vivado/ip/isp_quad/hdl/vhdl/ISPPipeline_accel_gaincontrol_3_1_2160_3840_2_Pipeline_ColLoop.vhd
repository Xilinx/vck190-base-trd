-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ISPPipeline_accel_gaincontrol_3_1_2160_3840_2_Pipeline_ColLoop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    imgInput2_4196_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    imgInput2_4196_empty_n : IN STD_LOGIC;
    imgInput2_4196_read : OUT STD_LOGIC;
    gain_out_4197_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    gain_out_4197_full_n : IN STD_LOGIC;
    gain_out_4197_write : OUT STD_LOGIC;
    width_cast : IN STD_LOGIC_VECTOR (10 downto 0);
    rhs : IN STD_LOGIC_VECTOR (15 downto 0);
    ret : IN STD_LOGIC_VECTOR (0 downto 0);
    rhs_37 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of ISPPipeline_accel_gaincontrol_3_1_2160_3840_2_Pipeline_ColLoop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln90_fu_131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal imgInput2_4196_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gain_out_4197_blk_n : STD_LOGIC;
    signal ret_read_reg_270 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal rhs_37_cast_fu_109_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_37_cast_reg_276 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_cast_fu_113_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_cast_reg_281 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln674_fu_142_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln674_reg_290 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln674_reg_290_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln674_reg_290_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_1_fu_150_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_1_reg_300 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_1_reg_300_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_1_reg_300_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal j_V_fu_68 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_V_4 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_V_5_fu_125_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_fu_164_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_249_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_164_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln_fu_179_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln55_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_fu_179_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln315_fu_188_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_65_fu_202_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_256_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_65_fu_202_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln315_6_fu_217_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln55_1_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln315_6_fu_217_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln315_6_fu_226_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1057_1_fu_234_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1057_fu_196_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_249_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_249_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_256_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_256_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_249_ce : STD_LOGIC;
    signal grp_fu_256_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_249_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_256_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component ISPPipeline_accel_mul_mul_16ns_16ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ISPPipeline_accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_mul_16ns_16ns_32_4_1_U66 : component ISPPipeline_accel_mul_mul_16ns_16ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_249_p0,
        din1 => grp_fu_249_p1,
        ce => grp_fu_249_ce,
        dout => grp_fu_249_p2);

    mul_mul_16ns_16ns_32_4_1_U67 : component ISPPipeline_accel_mul_mul_16ns_16ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_256_p0,
        din1 => grp_fu_256_p1,
        ce => grp_fu_256_ce,
        dout => grp_fu_256_p2);

    flow_control_loop_pipe_sequential_init_U : component ISPPipeline_accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    j_V_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln90_fu_131_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_V_fu_68 <= j_V_5_fu_125_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_V_fu_68 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                p_Result_1_reg_300 <= imgInput2_4196_dout(31 downto 16);
                    rhs_37_cast_reg_276(15 downto 0) <= rhs_37_cast_fu_109_p1(15 downto 0);
                    rhs_cast_reg_281(15 downto 0) <= rhs_cast_fu_113_p1(15 downto 0);
                trunc_ln674_reg_290 <= trunc_ln674_fu_142_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                p_Result_1_reg_300_pp0_iter2_reg <= p_Result_1_reg_300;
                p_Result_1_reg_300_pp0_iter3_reg <= p_Result_1_reg_300_pp0_iter2_reg;
                trunc_ln674_reg_290_pp0_iter2_reg <= trunc_ln674_reg_290;
                trunc_ln674_reg_290_pp0_iter3_reg <= trunc_ln674_reg_290_pp0_iter2_reg;
            end if;
        end if;
    end process;
    rhs_37_cast_reg_276(31 downto 16) <= "0000000000000000";
    rhs_cast_reg_281(31 downto 16) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, imgInput2_4196_empty_n, gain_out_4197_full_n)
    begin
                ap_block_pp0_stage0_01001 <= (((gain_out_4197_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((imgInput2_4196_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, imgInput2_4196_empty_n, gain_out_4197_full_n)
    begin
                ap_block_pp0_stage0_11001 <= (((gain_out_4197_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((imgInput2_4196_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, imgInput2_4196_empty_n, gain_out_4197_full_n)
    begin
                ap_block_pp0_stage0_subdone <= (((gain_out_4197_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((imgInput2_4196_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(imgInput2_4196_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (imgInput2_4196_empty_n = ap_const_logic_0);
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter4_assign_proc : process(gain_out_4197_full_n)
    begin
                ap_block_state5_pp0_stage0_iter4 <= (gain_out_4197_full_n = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln90_fu_131_p2)
    begin
        if (((icmp_ln90_fu_131_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_V_4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_V_fu_68, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_V_4 <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_j_V_4 <= j_V_fu_68;
        end if; 
    end process;


    gain_out_4197_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, gain_out_4197_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            gain_out_4197_blk_n <= gain_out_4197_full_n;
        else 
            gain_out_4197_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    gain_out_4197_din <= (select_ln1057_1_fu_234_p3 & select_ln1057_fu_196_p3);

    gain_out_4197_write_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            gain_out_4197_write <= ap_const_logic_1;
        else 
            gain_out_4197_write <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_249_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_249_ce <= ap_const_logic_1;
        else 
            grp_fu_249_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_249_p0 <= grp_fu_249_p00(16 - 1 downto 0);
    grp_fu_249_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln674_fu_142_p1),32));
    grp_fu_249_p1 <= rhs_cast_reg_281(16 - 1 downto 0);

    grp_fu_256_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_256_ce <= ap_const_logic_1;
        else 
            grp_fu_256_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_256_p0 <= grp_fu_256_p00(16 - 1 downto 0);
    grp_fu_256_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_1_fu_150_p4),32));
    grp_fu_256_p1 <= rhs_37_cast_reg_276(16 - 1 downto 0);
    icmp_ln55_1_fu_211_p2 <= "0" when (tmp_65_fu_202_p4 = ap_const_lv9_0) else "1";
    icmp_ln55_fu_173_p2 <= "0" when (tmp_fu_164_p4 = ap_const_lv9_0) else "1";
    icmp_ln90_fu_131_p2 <= "1" when (ap_sig_allocacmp_j_V_4 = width_cast) else "0";

    imgInput2_4196_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, imgInput2_4196_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imgInput2_4196_blk_n <= imgInput2_4196_empty_n;
        else 
            imgInput2_4196_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    imgInput2_4196_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imgInput2_4196_read <= ap_const_logic_1;
        else 
            imgInput2_4196_read <= ap_const_logic_0;
        end if; 
    end process;

    j_V_5_fu_125_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_V_4) + unsigned(ap_const_lv11_1));
    p_Result_1_fu_150_p4 <= imgInput2_4196_dout(31 downto 16);
    ret_read_reg_270 <= ret;
    rhs_37_cast_fu_109_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_37),32));
    rhs_cast_fu_113_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs),32));
    select_ln1057_1_fu_234_p3 <= 
        select_ln315_6_fu_226_p3 when (ret(0) = '1') else 
        p_Result_1_reg_300_pp0_iter3_reg;
    select_ln1057_fu_196_p3 <= 
        trunc_ln674_reg_290_pp0_iter3_reg when (ret(0) = '1') else 
        select_ln315_fu_188_p3;
    select_ln315_6_fu_226_p3 <= 
        ap_const_lv16_FFFF when (icmp_ln55_1_fu_211_p2(0) = '1') else 
        trunc_ln315_6_fu_217_p4;
    select_ln315_fu_188_p3 <= 
        ap_const_lv16_FFFF when (icmp_ln55_fu_173_p2(0) = '1') else 
        trunc_ln_fu_179_p4;
    tmp_65_fu_202_p1 <= grp_fu_256_p2;
    tmp_65_fu_202_p4 <= tmp_65_fu_202_p1(31 downto 23);
    tmp_fu_164_p1 <= grp_fu_249_p2;
    tmp_fu_164_p4 <= tmp_fu_164_p1(31 downto 23);
    trunc_ln315_6_fu_217_p1 <= grp_fu_256_p2;
    trunc_ln315_6_fu_217_p4 <= trunc_ln315_6_fu_217_p1(22 downto 7);
    trunc_ln674_fu_142_p1 <= imgInput2_4196_dout(16 - 1 downto 0);
    trunc_ln_fu_179_p1 <= grp_fu_249_p2;
    trunc_ln_fu_179_p4 <= trunc_ln_fu_179_p1(22 downto 7);
end behav;
