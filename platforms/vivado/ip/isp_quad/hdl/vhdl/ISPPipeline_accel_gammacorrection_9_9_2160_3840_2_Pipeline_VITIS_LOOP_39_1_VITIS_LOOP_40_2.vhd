-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ISPPipeline_accel_gammacorrection_9_9_2160_3840_2_Pipeline_VITIS_LOOP_39_1_VITIS_LOOP_40_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    gamma_lut_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    gamma_lut_ce0 : OUT STD_LOGIC;
    gamma_lut_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    lut_2_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lut_2_0_ce0 : OUT STD_LOGIC;
    lut_2_0_we0 : OUT STD_LOGIC;
    lut_2_0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lut_2_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lut_2_1_ce0 : OUT STD_LOGIC;
    lut_2_1_we0 : OUT STD_LOGIC;
    lut_2_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lut_1_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lut_1_0_ce0 : OUT STD_LOGIC;
    lut_1_0_we0 : OUT STD_LOGIC;
    lut_1_0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lut_1_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lut_1_1_ce0 : OUT STD_LOGIC;
    lut_1_1_we0 : OUT STD_LOGIC;
    lut_1_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lut_0_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lut_0_0_ce0 : OUT STD_LOGIC;
    lut_0_0_we0 : OUT STD_LOGIC;
    lut_0_0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lut_0_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lut_0_1_ce0 : OUT STD_LOGIC;
    lut_0_1_we0 : OUT STD_LOGIC;
    lut_0_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of ISPPipeline_accel_gammacorrection_9_9_2160_3840_2_Pipeline_VITIS_LOOP_39_1_VITIS_LOOP_40_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1057_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal icmp_ln1057_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln26_fu_231_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln26_reg_336 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln26_fu_253_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln26_reg_342 : STD_LOGIC_VECTOR (0 downto 0);
    signal lut_0_0_addr_reg_351 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut_0_1_addr_reg_356 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut_1_0_addr_reg_361 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut_1_1_addr_reg_366 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut_2_0_addr_reg_371 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut_2_1_addr_reg_376 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln573_fu_257_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln573_1_fu_294_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln573_2_fu_306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal lhs_fu_70 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_lhs_load : STD_LOGIC_VECTOR (8 downto 0);
    signal j_V_fu_268_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_V_fu_74 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_i_V_load : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln26_1_fu_245_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_fu_78 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1057_fu_207_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln1057_1_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln870_fu_239_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ret_fu_289_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_16_fu_299_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ISPPipeline_accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component ISPPipeline_accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    i_V_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln1057_fu_213_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_V_fu_74 <= select_ln26_1_fu_245_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_V_fu_74 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln1057_fu_213_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_78 <= add_ln1057_fu_207_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_78 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    lhs_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln1057_fu_213_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    lhs_fu_70 <= j_V_fu_268_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    lhs_fu_70 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1057_reg_332 <= icmp_ln1057_fu_213_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_fu_213_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                lut_0_0_addr_reg_351 <= zext_ln573_fu_257_p1(8 - 1 downto 0);
                lut_0_1_addr_reg_356 <= zext_ln573_fu_257_p1(8 - 1 downto 0);
                lut_1_0_addr_reg_361 <= zext_ln573_fu_257_p1(8 - 1 downto 0);
                lut_1_1_addr_reg_366 <= zext_ln573_fu_257_p1(8 - 1 downto 0);
                lut_2_0_addr_reg_371 <= zext_ln573_fu_257_p1(8 - 1 downto 0);
                lut_2_1_addr_reg_376 <= zext_ln573_fu_257_p1(8 - 1 downto 0);
                select_ln26_reg_336 <= select_ln26_fu_231_p3;
                trunc_ln26_reg_342 <= trunc_ln26_fu_253_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter0_stage0, ap_block_pp0_stage2_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln1057_fu_207_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv10_1));
    add_ln870_fu_239_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_V_load) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln1057_fu_213_p2)
    begin
        if (((icmp_ln1057_fu_213_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_V_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_V_fu_74)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_V_load <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_i_V_load <= i_V_fu_74;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_78)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_78;
        end if; 
    end process;


    ap_sig_allocacmp_lhs_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, lhs_fu_70, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_lhs_load <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_lhs_load <= lhs_fu_70;
        end if; 
    end process;


    gamma_lut_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, zext_ln573_fu_257_p1, ap_block_pp0_stage0, zext_ln573_1_fu_294_p1, ap_block_pp0_stage1, zext_ln573_2_fu_306_p1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                gamma_lut_address0 <= zext_ln573_2_fu_306_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                gamma_lut_address0 <= zext_ln573_1_fu_294_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                gamma_lut_address0 <= zext_ln573_fu_257_p1(10 - 1 downto 0);
            else 
                gamma_lut_address0 <= "XXXXXXXXXX";
            end if;
        else 
            gamma_lut_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    gamma_lut_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            gamma_lut_ce0 <= ap_const_logic_1;
        else 
            gamma_lut_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1057_1_fu_225_p2 <= "1" when (ap_sig_allocacmp_lhs_load = ap_const_lv9_100) else "0";
    icmp_ln1057_fu_213_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv10_200) else "0";
    j_V_fu_268_p2 <= std_logic_vector(unsigned(select_ln26_fu_231_p3) + unsigned(ap_const_lv9_1));
    lut_0_0_address0 <= lut_0_0_addr_reg_351;

    lut_0_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            lut_0_0_ce0 <= ap_const_logic_1;
        else 
            lut_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_0_0_d0 <= gamma_lut_q0;

    lut_0_0_we0_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln1057_reg_332, trunc_ln26_reg_342, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln26_reg_342 = ap_const_lv1_0) and (icmp_ln1057_reg_332 = ap_const_lv1_0))) then 
            lut_0_0_we0 <= ap_const_logic_1;
        else 
            lut_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_0_1_address0 <= lut_0_1_addr_reg_356;

    lut_0_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            lut_0_1_ce0 <= ap_const_logic_1;
        else 
            lut_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_0_1_d0 <= gamma_lut_q0;

    lut_0_1_we0_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln1057_reg_332, trunc_ln26_reg_342, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln26_reg_342 = ap_const_lv1_1) and (icmp_ln1057_reg_332 = ap_const_lv1_0))) then 
            lut_0_1_we0 <= ap_const_logic_1;
        else 
            lut_0_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_1_0_address0 <= lut_1_0_addr_reg_361;

    lut_1_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            lut_1_0_ce0 <= ap_const_logic_1;
        else 
            lut_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_1_0_d0 <= gamma_lut_q0;

    lut_1_0_we0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, icmp_ln1057_reg_332, trunc_ln26_reg_342, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (trunc_ln26_reg_342 = ap_const_lv1_0) and (icmp_ln1057_reg_332 = ap_const_lv1_0))) then 
            lut_1_0_we0 <= ap_const_logic_1;
        else 
            lut_1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_1_1_address0 <= lut_1_1_addr_reg_366;

    lut_1_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            lut_1_1_ce0 <= ap_const_logic_1;
        else 
            lut_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_1_1_d0 <= gamma_lut_q0;

    lut_1_1_we0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, icmp_ln1057_reg_332, trunc_ln26_reg_342, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (trunc_ln26_reg_342 = ap_const_lv1_1) and (icmp_ln1057_reg_332 = ap_const_lv1_0))) then 
            lut_1_1_we0 <= ap_const_logic_1;
        else 
            lut_1_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_2_0_address0 <= lut_2_0_addr_reg_371;

    lut_2_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lut_2_0_ce0 <= ap_const_logic_1;
        else 
            lut_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_2_0_d0 <= gamma_lut_q0;

    lut_2_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln26_reg_342)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln26_reg_342 = ap_const_lv1_0))) then 
            lut_2_0_we0 <= ap_const_logic_1;
        else 
            lut_2_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_2_1_address0 <= lut_2_1_addr_reg_376;

    lut_2_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lut_2_1_ce0 <= ap_const_logic_1;
        else 
            lut_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_2_1_d0 <= gamma_lut_q0;

    lut_2_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln26_reg_342)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln26_reg_342 = ap_const_lv1_1))) then 
            lut_2_1_we0 <= ap_const_logic_1;
        else 
            lut_2_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_16_fu_299_p3 <= (ap_const_lv1_1 & select_ln26_reg_336);
    ret_fu_289_p2 <= (select_ln26_reg_336 xor ap_const_lv9_100);
    select_ln26_1_fu_245_p3 <= 
        add_ln870_fu_239_p2 when (icmp_ln1057_1_fu_225_p2(0) = '1') else 
        ap_sig_allocacmp_i_V_load;
    select_ln26_fu_231_p3 <= 
        ap_const_lv9_0 when (icmp_ln1057_1_fu_225_p2(0) = '1') else 
        ap_sig_allocacmp_lhs_load;
    trunc_ln26_fu_253_p1 <= select_ln26_1_fu_245_p3(1 - 1 downto 0);
    zext_ln573_1_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_fu_289_p2),64));
    zext_ln573_2_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_16_fu_299_p3),64));
    zext_ln573_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln26_fu_231_p3),64));
end behav;
