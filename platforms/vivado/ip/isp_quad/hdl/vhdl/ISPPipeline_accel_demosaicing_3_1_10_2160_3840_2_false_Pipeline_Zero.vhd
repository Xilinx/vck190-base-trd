-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ISPPipeline_accel_demosaicing_3_1_10_2160_3840_2_false_Pipeline_Zero is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    imgblock_V_3_3_0 : IN STD_LOGIC_VECTOR (15 downto 0);
    imgblock_V_3_2_0 : IN STD_LOGIC_VECTOR (15 downto 0);
    imgblock_V_2_3_0 : IN STD_LOGIC_VECTOR (15 downto 0);
    imgblock_V_2_2_0 : IN STD_LOGIC_VECTOR (15 downto 0);
    imgblock_V_1_3_0 : IN STD_LOGIC_VECTOR (15 downto 0);
    imgblock_V_1_2_0 : IN STD_LOGIC_VECTOR (15 downto 0);
    imgblock_V_0_3_0 : IN STD_LOGIC_VECTOR (15 downto 0);
    imgblock_V_0_2_0 : IN STD_LOGIC_VECTOR (15 downto 0);
    imgblock_V_3_3_1_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    imgblock_V_3_3_1_out_ap_vld : OUT STD_LOGIC;
    imgblock_V_3_2_114_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    imgblock_V_3_2_114_out_ap_vld : OUT STD_LOGIC;
    imgblock_V_2_3_1_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    imgblock_V_2_3_1_out_ap_vld : OUT STD_LOGIC;
    imgblock_V_2_2_110_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    imgblock_V_2_2_110_out_ap_vld : OUT STD_LOGIC;
    imgblock_V_1_3_1_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    imgblock_V_1_3_1_out_ap_vld : OUT STD_LOGIC;
    imgblock_V_1_2_16_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    imgblock_V_1_2_16_out_ap_vld : OUT STD_LOGIC;
    imgblock_V_0_3_1_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    imgblock_V_0_3_1_out_ap_vld : OUT STD_LOGIC;
    imgblock_V_0_2_12_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    imgblock_V_0_2_12_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of ISPPipeline_accel_demosaicing_3_1_10_2160_3840_2_false_Pipeline_Zero is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln318_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal p_fu_62 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln318_fu_250_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal imgblock_V_0_2_12_fu_66 : STD_LOGIC_VECTOR (15 downto 0);
    signal imgblock_V_0_2_2_fu_290_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal imgblock_V_0_3_1_fu_70 : STD_LOGIC_VECTOR (15 downto 0);
    signal imgblock_V_0_3_s_fu_304_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal imgblock_V_1_2_16_fu_74 : STD_LOGIC_VECTOR (15 downto 0);
    signal imgblock_V_1_2_2_fu_318_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal imgblock_V_1_3_1_fu_78 : STD_LOGIC_VECTOR (15 downto 0);
    signal imgblock_V_1_3_s_fu_332_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal imgblock_V_2_2_110_fu_82 : STD_LOGIC_VECTOR (15 downto 0);
    signal imgblock_V_2_2_2_fu_346_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal imgblock_V_2_3_1_fu_86 : STD_LOGIC_VECTOR (15 downto 0);
    signal imgblock_V_2_3_s_fu_360_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal imgblock_V_3_2_114_fu_90 : STD_LOGIC_VECTOR (15 downto 0);
    signal imgblock_V_3_2_2_fu_374_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal imgblock_V_3_3_1_fu_94 : STD_LOGIC_VECTOR (15 downto 0);
    signal imgblock_V_3_3_s_fu_388_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln323_fu_286_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ISPPipeline_accel_mux_42_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component ISPPipeline_accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_42_16_1_1_U88 : component ISPPipeline_accel_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_0,
        din1 => imgblock_V_0_2_12_fu_66,
        din2 => imgblock_V_0_2_12_fu_66,
        din3 => imgblock_V_0_2_12_fu_66,
        din4 => trunc_ln323_fu_286_p1,
        dout => imgblock_V_0_2_2_fu_290_p6);

    mux_42_16_1_1_U89 : component ISPPipeline_accel_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_0,
        din1 => imgblock_V_0_3_1_fu_70,
        din2 => imgblock_V_0_3_1_fu_70,
        din3 => imgblock_V_0_3_1_fu_70,
        din4 => trunc_ln323_fu_286_p1,
        dout => imgblock_V_0_3_s_fu_304_p6);

    mux_42_16_1_1_U90 : component ISPPipeline_accel_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => imgblock_V_1_2_16_fu_74,
        din1 => ap_const_lv16_0,
        din2 => imgblock_V_1_2_16_fu_74,
        din3 => imgblock_V_1_2_16_fu_74,
        din4 => trunc_ln323_fu_286_p1,
        dout => imgblock_V_1_2_2_fu_318_p6);

    mux_42_16_1_1_U91 : component ISPPipeline_accel_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => imgblock_V_1_3_1_fu_78,
        din1 => ap_const_lv16_0,
        din2 => imgblock_V_1_3_1_fu_78,
        din3 => imgblock_V_1_3_1_fu_78,
        din4 => trunc_ln323_fu_286_p1,
        dout => imgblock_V_1_3_s_fu_332_p6);

    mux_42_16_1_1_U92 : component ISPPipeline_accel_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => imgblock_V_2_2_110_fu_82,
        din1 => imgblock_V_2_2_110_fu_82,
        din2 => ap_const_lv16_0,
        din3 => imgblock_V_2_2_110_fu_82,
        din4 => trunc_ln323_fu_286_p1,
        dout => imgblock_V_2_2_2_fu_346_p6);

    mux_42_16_1_1_U93 : component ISPPipeline_accel_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => imgblock_V_2_3_1_fu_86,
        din1 => imgblock_V_2_3_1_fu_86,
        din2 => ap_const_lv16_0,
        din3 => imgblock_V_2_3_1_fu_86,
        din4 => trunc_ln323_fu_286_p1,
        dout => imgblock_V_2_3_s_fu_360_p6);

    mux_42_16_1_1_U94 : component ISPPipeline_accel_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => imgblock_V_3_2_114_fu_90,
        din1 => imgblock_V_3_2_114_fu_90,
        din2 => imgblock_V_3_2_114_fu_90,
        din3 => ap_const_lv16_0,
        din4 => trunc_ln323_fu_286_p1,
        dout => imgblock_V_3_2_2_fu_374_p6);

    mux_42_16_1_1_U95 : component ISPPipeline_accel_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => imgblock_V_3_3_1_fu_94,
        din1 => imgblock_V_3_3_1_fu_94,
        din2 => imgblock_V_3_3_1_fu_94,
        din3 => ap_const_lv16_0,
        din4 => trunc_ln323_fu_286_p1,
        dout => imgblock_V_3_3_s_fu_388_p6);

    flow_control_loop_pipe_sequential_init_U : component ISPPipeline_accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    imgblock_V_0_2_12_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    imgblock_V_0_2_12_fu_66 <= imgblock_V_0_2_0;
                elsif (((icmp_ln318_fu_256_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    imgblock_V_0_2_12_fu_66 <= imgblock_V_0_2_2_fu_290_p6;
                end if;
            end if; 
        end if;
    end process;

    imgblock_V_0_3_1_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    imgblock_V_0_3_1_fu_70 <= imgblock_V_0_3_0;
                elsif (((icmp_ln318_fu_256_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    imgblock_V_0_3_1_fu_70 <= imgblock_V_0_3_s_fu_304_p6;
                end if;
            end if; 
        end if;
    end process;

    imgblock_V_1_2_16_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    imgblock_V_1_2_16_fu_74 <= imgblock_V_1_2_0;
                elsif (((icmp_ln318_fu_256_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    imgblock_V_1_2_16_fu_74 <= imgblock_V_1_2_2_fu_318_p6;
                end if;
            end if; 
        end if;
    end process;

    imgblock_V_1_3_1_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    imgblock_V_1_3_1_fu_78 <= imgblock_V_1_3_0;
                elsif (((icmp_ln318_fu_256_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    imgblock_V_1_3_1_fu_78 <= imgblock_V_1_3_s_fu_332_p6;
                end if;
            end if; 
        end if;
    end process;

    imgblock_V_2_2_110_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    imgblock_V_2_2_110_fu_82 <= imgblock_V_2_2_0;
                elsif (((icmp_ln318_fu_256_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    imgblock_V_2_2_110_fu_82 <= imgblock_V_2_2_2_fu_346_p6;
                end if;
            end if; 
        end if;
    end process;

    imgblock_V_2_3_1_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    imgblock_V_2_3_1_fu_86 <= imgblock_V_2_3_0;
                elsif (((icmp_ln318_fu_256_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    imgblock_V_2_3_1_fu_86 <= imgblock_V_2_3_s_fu_360_p6;
                end if;
            end if; 
        end if;
    end process;

    imgblock_V_3_2_114_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    imgblock_V_3_2_114_fu_90 <= imgblock_V_3_2_0;
                elsif (((icmp_ln318_fu_256_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    imgblock_V_3_2_114_fu_90 <= imgblock_V_3_2_2_fu_374_p6;
                end if;
            end if; 
        end if;
    end process;

    imgblock_V_3_3_1_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    imgblock_V_3_3_1_fu_94 <= imgblock_V_3_3_0;
                elsif (((icmp_ln318_fu_256_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    imgblock_V_3_3_1_fu_94 <= imgblock_V_3_3_s_fu_388_p6;
                end if;
            end if; 
        end if;
    end process;

    p_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    p_fu_62 <= ap_const_lv3_0;
                elsif (((icmp_ln318_fu_256_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    p_fu_62 <= add_ln318_fu_250_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln318_fu_250_p2 <= std_logic_vector(unsigned(p_fu_62) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln318_fu_256_p2)
    begin
        if (((icmp_ln318_fu_256_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln318_fu_256_p2 <= "1" when (p_fu_62 = ap_const_lv3_4) else "0";
    imgblock_V_0_2_12_out <= imgblock_V_0_2_12_fu_66;

    imgblock_V_0_2_12_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln318_fu_256_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln318_fu_256_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imgblock_V_0_2_12_out_ap_vld <= ap_const_logic_1;
        else 
            imgblock_V_0_2_12_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    imgblock_V_0_3_1_out <= imgblock_V_0_3_1_fu_70;

    imgblock_V_0_3_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln318_fu_256_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln318_fu_256_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imgblock_V_0_3_1_out_ap_vld <= ap_const_logic_1;
        else 
            imgblock_V_0_3_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    imgblock_V_1_2_16_out <= imgblock_V_1_2_16_fu_74;

    imgblock_V_1_2_16_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln318_fu_256_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln318_fu_256_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imgblock_V_1_2_16_out_ap_vld <= ap_const_logic_1;
        else 
            imgblock_V_1_2_16_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    imgblock_V_1_3_1_out <= imgblock_V_1_3_1_fu_78;

    imgblock_V_1_3_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln318_fu_256_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln318_fu_256_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imgblock_V_1_3_1_out_ap_vld <= ap_const_logic_1;
        else 
            imgblock_V_1_3_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    imgblock_V_2_2_110_out <= imgblock_V_2_2_110_fu_82;

    imgblock_V_2_2_110_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln318_fu_256_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln318_fu_256_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imgblock_V_2_2_110_out_ap_vld <= ap_const_logic_1;
        else 
            imgblock_V_2_2_110_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    imgblock_V_2_3_1_out <= imgblock_V_2_3_1_fu_86;

    imgblock_V_2_3_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln318_fu_256_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln318_fu_256_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imgblock_V_2_3_1_out_ap_vld <= ap_const_logic_1;
        else 
            imgblock_V_2_3_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    imgblock_V_3_2_114_out <= imgblock_V_3_2_114_fu_90;

    imgblock_V_3_2_114_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln318_fu_256_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln318_fu_256_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imgblock_V_3_2_114_out_ap_vld <= ap_const_logic_1;
        else 
            imgblock_V_3_2_114_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    imgblock_V_3_3_1_out <= imgblock_V_3_3_1_fu_94;

    imgblock_V_3_3_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln318_fu_256_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln318_fu_256_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imgblock_V_3_3_1_out_ap_vld <= ap_const_logic_1;
        else 
            imgblock_V_3_3_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln323_fu_286_p1 <= p_fu_62(2 - 1 downto 0);
end behav;
