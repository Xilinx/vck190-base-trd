-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ISPPipeline_accel_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_Pipeline_Col_Loop1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    impop_41_dout : IN STD_LOGIC_VECTOR (95 downto 0);
    impop_41_empty_n : IN STD_LOGIC;
    impop_41_read : OUT STD_LOGIC;
    ltm_in_4199_din : OUT STD_LOGIC_VECTOR (95 downto 0);
    ltm_in_4199_full_n : IN STD_LOGIC;
    ltm_in_4199_write : OUT STD_LOGIC;
    tmp_61 : IN STD_LOGIC_VECTOR (10 downto 0);
    minValue_V_load : IN STD_LOGIC_VECTOR (23 downto 0);
    conv7_i99 : IN STD_LOGIC_VECTOR (31 downto 0);
    minValue_V_load_1 : IN STD_LOGIC_VECTOR (23 downto 0);
    conv7_i99_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    minValue_V_load_2 : IN STD_LOGIC_VECTOR (23 downto 0);
    conv7_i99_2 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of ISPPipeline_accel_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_Pipeline_Col_Loop1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln377_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal impop_41_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ltm_in_4199_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal conv7_i99_2_cast_fu_169_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal conv7_i99_2_cast_reg_1040 : STD_LOGIC_VECTOR (55 downto 0);
    signal conv7_i99_1_cast_fu_173_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal conv7_i99_1_cast_reg_1046 : STD_LOGIC_VECTOR (55 downto 0);
    signal conv7_i99_cast_fu_177_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal conv7_i99_cast_reg_1052 : STD_LOGIC_VECTOR (55 downto 0);
    signal trunc_ln712_fu_206_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln712_reg_1062 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_49_reg_1067 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_52_reg_1072 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_55_reg_1077 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_58_reg_1082 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_62_reg_1087 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_reg_1092 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_48_reg_1097 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_50_reg_1102 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_51_reg_1107 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_53_reg_1112 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_54_reg_1117 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_56_reg_1122 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_57_reg_1127 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_59_reg_1132 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_60_reg_1137 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_63_reg_1142 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_64_reg_1147 : STD_LOGIC_VECTOR (43 downto 0);
    signal col_V_fu_110 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_col_V_3 : STD_LOGIC_VECTOR (10 downto 0);
    signal col_V_4_fu_189_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal shl_ln_fu_260_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln712_fu_267_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal value_V_fu_271_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_27_fu_280_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_27_fu_280_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal shl_ln712_1_fu_305_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln712_1_fu_312_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal value_V_1_fu_316_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_30_fu_325_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_30_fu_325_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal shl_ln712_2_fu_350_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln712_2_fu_357_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal value_V_2_fu_361_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_33_fu_370_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_33_fu_370_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal shl_ln712_3_fu_395_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln712_3_fu_402_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal value_V_3_fu_406_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_36_fu_415_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_36_fu_415_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal shl_ln712_4_fu_440_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln712_4_fu_447_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal value_V_4_fu_451_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_39_fu_460_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_39_fu_460_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal shl_ln712_5_fu_485_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln712_5_fu_492_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal value_V_5_fu_496_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_42_fu_505_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_42_fu_505_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal shl_ln1171_4_fu_537_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal shl_ln4_fu_530_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal sext_ln1171_fu_544_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal r_V_28_fu_548_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_fu_564_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal finalmul_V_fu_554_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal dstval_V_fu_572_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_91_fu_580_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln52_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln315_fu_596_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1171_6_fu_615_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal shl_ln1171_5_fu_608_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal sext_ln1171_1_fu_622_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal r_V_31_fu_626_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_92_fu_642_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal finalmul_V_1_fu_632_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal dstval_V_2_fu_650_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_93_fu_658_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln52_1_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln315_11_fu_674_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1171_8_fu_693_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal shl_ln1171_7_fu_686_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal sext_ln1171_2_fu_700_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal r_V_34_fu_704_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_94_fu_720_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal finalmul_V_2_fu_710_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal dstval_V_3_fu_728_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_95_fu_736_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln52_2_fu_746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln315_12_fu_752_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1171_s_fu_771_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal shl_ln1171_9_fu_764_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal sext_ln1171_3_fu_778_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal r_V_37_fu_782_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_96_fu_798_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal finalmul_V_3_fu_788_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal dstval_V_4_fu_806_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_97_fu_814_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln52_3_fu_824_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln315_13_fu_830_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1171_2_fu_849_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal shl_ln1171_1_fu_842_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal sext_ln1171_4_fu_856_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal r_V_40_fu_860_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_98_fu_876_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal finalmul_V_4_fu_866_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal dstval_V_5_fu_884_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_99_fu_892_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln52_4_fu_902_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln315_14_fu_908_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1171_10_fu_927_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal shl_ln1171_3_fu_920_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal sext_ln1171_5_fu_934_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal r_V_43_fu_938_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_100_fu_954_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal finalmul_V_5_fu_944_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal dstval_V_6_fu_962_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_101_fu_970_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln52_5_fu_980_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln315_15_fu_986_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln315_12_fu_990_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln315_11_fu_912_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln315_10_fu_834_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln315_9_fu_756_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln315_8_fu_678_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln315_fu_600_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ISPPipeline_accel_mul_32s_24s_56_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        dout : OUT STD_LOGIC_VECTOR (55 downto 0) );
    end component;


    component ISPPipeline_accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_24s_56_1_1_U485 : component ISPPipeline_accel_mul_32s_24s_56_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 24,
        dout_WIDTH => 56)
    port map (
        din0 => r_V_27_fu_280_p0,
        din1 => value_V_fu_271_p2,
        dout => r_V_27_fu_280_p2);

    mul_32s_24s_56_1_1_U486 : component ISPPipeline_accel_mul_32s_24s_56_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 24,
        dout_WIDTH => 56)
    port map (
        din0 => r_V_30_fu_325_p0,
        din1 => value_V_1_fu_316_p2,
        dout => r_V_30_fu_325_p2);

    mul_32s_24s_56_1_1_U487 : component ISPPipeline_accel_mul_32s_24s_56_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 24,
        dout_WIDTH => 56)
    port map (
        din0 => r_V_33_fu_370_p0,
        din1 => value_V_2_fu_361_p2,
        dout => r_V_33_fu_370_p2);

    mul_32s_24s_56_1_1_U488 : component ISPPipeline_accel_mul_32s_24s_56_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 24,
        dout_WIDTH => 56)
    port map (
        din0 => r_V_36_fu_415_p0,
        din1 => value_V_3_fu_406_p2,
        dout => r_V_36_fu_415_p2);

    mul_32s_24s_56_1_1_U489 : component ISPPipeline_accel_mul_32s_24s_56_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 24,
        dout_WIDTH => 56)
    port map (
        din0 => r_V_39_fu_460_p0,
        din1 => value_V_4_fu_451_p2,
        dout => r_V_39_fu_460_p2);

    mul_32s_24s_56_1_1_U490 : component ISPPipeline_accel_mul_32s_24s_56_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 24,
        dout_WIDTH => 56)
    port map (
        din0 => r_V_42_fu_505_p0,
        din1 => value_V_5_fu_496_p2,
        dout => r_V_42_fu_505_p2);

    flow_control_loop_pipe_sequential_init_U : component ISPPipeline_accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    col_V_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln377_fu_195_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    col_V_fu_110 <= col_V_4_fu_189_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    col_V_fu_110 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                conv7_i99_1_cast_reg_1046 <= conv7_i99_1_cast_fu_173_p1;
                conv7_i99_2_cast_reg_1040 <= conv7_i99_2_cast_fu_169_p1;
                conv7_i99_cast_reg_1052 <= conv7_i99_cast_fu_177_p1;
                tmp_49_reg_1067 <= impop_41_dout(31 downto 16);
                tmp_52_reg_1072 <= impop_41_dout(47 downto 32);
                tmp_55_reg_1077 <= impop_41_dout(63 downto 48);
                tmp_58_reg_1082 <= impop_41_dout(79 downto 64);
                tmp_62_reg_1087 <= impop_41_dout(95 downto 80);
                trunc_ln712_reg_1062 <= trunc_ln712_fu_206_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                tmp_48_reg_1097 <= r_V_27_fu_280_p2(55 downto 12);
                tmp_50_reg_1102 <= r_V_30_fu_325_p2(51 downto 12);
                tmp_51_reg_1107 <= r_V_30_fu_325_p2(55 downto 12);
                tmp_53_reg_1112 <= r_V_33_fu_370_p2(51 downto 12);
                tmp_54_reg_1117 <= r_V_33_fu_370_p2(55 downto 12);
                tmp_56_reg_1122 <= r_V_36_fu_415_p2(51 downto 12);
                tmp_57_reg_1127 <= r_V_36_fu_415_p2(55 downto 12);
                tmp_59_reg_1132 <= r_V_39_fu_460_p2(51 downto 12);
                tmp_60_reg_1137 <= r_V_39_fu_460_p2(55 downto 12);
                tmp_63_reg_1142 <= r_V_42_fu_505_p2(51 downto 12);
                tmp_64_reg_1147 <= r_V_42_fu_505_p2(55 downto 12);
                tmp_s_reg_1092 <= r_V_27_fu_280_p2(51 downto 12);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, impop_41_empty_n, ltm_in_4199_full_n)
    begin
                ap_block_pp0_stage0_01001 <= (((ltm_in_4199_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((impop_41_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, impop_41_empty_n, ltm_in_4199_full_n)
    begin
                ap_block_pp0_stage0_11001 <= (((ltm_in_4199_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((impop_41_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, impop_41_empty_n, ltm_in_4199_full_n)
    begin
                ap_block_pp0_stage0_subdone <= (((ltm_in_4199_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((impop_41_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(impop_41_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (impop_41_empty_n = ap_const_logic_0);
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter3_assign_proc : process(ltm_in_4199_full_n)
    begin
                ap_block_state4_pp0_stage0_iter3 <= (ltm_in_4199_full_n = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln377_fu_195_p2)
    begin
        if (((icmp_ln377_fu_195_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_col_V_3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, col_V_fu_110, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_col_V_3 <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_col_V_3 <= col_V_fu_110;
        end if; 
    end process;

    col_V_4_fu_189_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_col_V_3) + unsigned(ap_const_lv11_1));
        conv7_i99_1_cast_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv7_i99_1),56));

        conv7_i99_2_cast_fu_169_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv7_i99_2),56));

        conv7_i99_cast_fu_177_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv7_i99),56));

    dstval_V_2_fu_650_p3 <= 
        ap_const_lv32_0 when (tmp_92_fu_642_p3(0) = '1') else 
        finalmul_V_1_fu_632_p4;
    dstval_V_3_fu_728_p3 <= 
        ap_const_lv32_0 when (tmp_94_fu_720_p3(0) = '1') else 
        finalmul_V_2_fu_710_p4;
    dstval_V_4_fu_806_p3 <= 
        ap_const_lv32_0 when (tmp_96_fu_798_p3(0) = '1') else 
        finalmul_V_3_fu_788_p4;
    dstval_V_5_fu_884_p3 <= 
        ap_const_lv32_0 when (tmp_98_fu_876_p3(0) = '1') else 
        finalmul_V_4_fu_866_p4;
    dstval_V_6_fu_962_p3 <= 
        ap_const_lv32_0 when (tmp_100_fu_954_p3(0) = '1') else 
        finalmul_V_5_fu_944_p4;
    dstval_V_fu_572_p3 <= 
        ap_const_lv32_0 when (tmp_fu_564_p3(0) = '1') else 
        finalmul_V_fu_554_p4;
    finalmul_V_1_fu_632_p4 <= r_V_31_fu_626_p2(61 downto 30);
    finalmul_V_2_fu_710_p4 <= r_V_34_fu_704_p2(61 downto 30);
    finalmul_V_3_fu_788_p4 <= r_V_37_fu_782_p2(61 downto 30);
    finalmul_V_4_fu_866_p4 <= r_V_40_fu_860_p2(61 downto 30);
    finalmul_V_5_fu_944_p4 <= r_V_43_fu_938_p2(61 downto 30);
    finalmul_V_fu_554_p4 <= r_V_28_fu_548_p2(61 downto 30);
    icmp_ln377_fu_195_p2 <= "1" when (ap_sig_allocacmp_col_V_3 = tmp_61) else "0";
    icmp_ln52_1_fu_668_p2 <= "1" when (signed(tmp_93_fu_658_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln52_2_fu_746_p2 <= "1" when (signed(tmp_95_fu_736_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln52_3_fu_824_p2 <= "1" when (signed(tmp_97_fu_814_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln52_4_fu_902_p2 <= "1" when (signed(tmp_99_fu_892_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln52_5_fu_980_p2 <= "1" when (signed(tmp_101_fu_970_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln52_fu_590_p2 <= "1" when (signed(tmp_91_fu_580_p4) > signed(ap_const_lv16_0)) else "0";

    impop_41_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, impop_41_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            impop_41_blk_n <= impop_41_empty_n;
        else 
            impop_41_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    impop_41_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            impop_41_read <= ap_const_logic_1;
        else 
            impop_41_read <= ap_const_logic_0;
        end if; 
    end process;


    ltm_in_4199_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, ltm_in_4199_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ltm_in_4199_blk_n <= ltm_in_4199_full_n;
        else 
            ltm_in_4199_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ltm_in_4199_din <= (((((select_ln315_12_fu_990_p3 & select_ln315_11_fu_912_p3) & select_ln315_10_fu_834_p3) & select_ln315_9_fu_756_p3) & select_ln315_8_fu_678_p3) & select_ln315_fu_600_p3);

    ltm_in_4199_write_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ltm_in_4199_write <= ap_const_logic_1;
        else 
            ltm_in_4199_write <= ap_const_logic_0;
        end if; 
    end process;

    r_V_27_fu_280_p0 <= conv7_i99_cast_reg_1052(32 - 1 downto 0);
    r_V_28_fu_548_p2 <= std_logic_vector(unsigned(shl_ln4_fu_530_p3) - unsigned(sext_ln1171_fu_544_p1));
    r_V_30_fu_325_p0 <= conv7_i99_1_cast_reg_1046(32 - 1 downto 0);
    r_V_31_fu_626_p2 <= std_logic_vector(unsigned(shl_ln1171_5_fu_608_p3) - unsigned(sext_ln1171_1_fu_622_p1));
    r_V_33_fu_370_p0 <= conv7_i99_2_cast_reg_1040(32 - 1 downto 0);
    r_V_34_fu_704_p2 <= std_logic_vector(unsigned(shl_ln1171_7_fu_686_p3) - unsigned(sext_ln1171_2_fu_700_p1));
    r_V_36_fu_415_p0 <= conv7_i99_cast_reg_1052(32 - 1 downto 0);
    r_V_37_fu_782_p2 <= std_logic_vector(unsigned(shl_ln1171_9_fu_764_p3) - unsigned(sext_ln1171_3_fu_778_p1));
    r_V_39_fu_460_p0 <= conv7_i99_1_cast_reg_1046(32 - 1 downto 0);
    r_V_40_fu_860_p2 <= std_logic_vector(unsigned(shl_ln1171_1_fu_842_p3) - unsigned(sext_ln1171_4_fu_856_p1));
    r_V_42_fu_505_p0 <= conv7_i99_2_cast_reg_1040(32 - 1 downto 0);
    r_V_43_fu_938_p2 <= std_logic_vector(unsigned(shl_ln1171_3_fu_920_p3) - unsigned(sext_ln1171_5_fu_934_p1));
    select_ln315_10_fu_834_p3 <= 
        ap_const_lv16_FFFF when (icmp_ln52_3_fu_824_p2(0) = '1') else 
        trunc_ln315_13_fu_830_p1;
    select_ln315_11_fu_912_p3 <= 
        ap_const_lv16_FFFF when (icmp_ln52_4_fu_902_p2(0) = '1') else 
        trunc_ln315_14_fu_908_p1;
    select_ln315_12_fu_990_p3 <= 
        ap_const_lv16_FFFF when (icmp_ln52_5_fu_980_p2(0) = '1') else 
        trunc_ln315_15_fu_986_p1;
    select_ln315_8_fu_678_p3 <= 
        ap_const_lv16_FFFF when (icmp_ln52_1_fu_668_p2(0) = '1') else 
        trunc_ln315_11_fu_674_p1;
    select_ln315_9_fu_756_p3 <= 
        ap_const_lv16_FFFF when (icmp_ln52_2_fu_746_p2(0) = '1') else 
        trunc_ln315_12_fu_752_p1;
    select_ln315_fu_600_p3 <= 
        ap_const_lv16_FFFF when (icmp_ln52_fu_590_p2(0) = '1') else 
        trunc_ln315_fu_596_p1;
        sext_ln1171_1_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1171_6_fu_615_p3),62));

        sext_ln1171_2_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1171_8_fu_693_p3),62));

        sext_ln1171_3_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1171_s_fu_771_p3),62));

        sext_ln1171_4_fu_856_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1171_2_fu_849_p3),62));

        sext_ln1171_5_fu_934_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1171_10_fu_927_p3),62));

        sext_ln1171_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1171_4_fu_537_p3),62));

    shl_ln1171_10_fu_927_p3 <= (tmp_64_reg_1147 & ap_const_lv6_0);
    shl_ln1171_1_fu_842_p3 <= (tmp_59_reg_1132 & ap_const_lv22_0);
    shl_ln1171_2_fu_849_p3 <= (tmp_60_reg_1137 & ap_const_lv6_0);
    shl_ln1171_3_fu_920_p3 <= (tmp_63_reg_1142 & ap_const_lv22_0);
    shl_ln1171_4_fu_537_p3 <= (tmp_48_reg_1097 & ap_const_lv6_0);
    shl_ln1171_5_fu_608_p3 <= (tmp_50_reg_1102 & ap_const_lv22_0);
    shl_ln1171_6_fu_615_p3 <= (tmp_51_reg_1107 & ap_const_lv6_0);
    shl_ln1171_7_fu_686_p3 <= (tmp_53_reg_1112 & ap_const_lv22_0);
    shl_ln1171_8_fu_693_p3 <= (tmp_54_reg_1117 & ap_const_lv6_0);
    shl_ln1171_9_fu_764_p3 <= (tmp_56_reg_1122 & ap_const_lv22_0);
    shl_ln1171_s_fu_771_p3 <= (tmp_57_reg_1127 & ap_const_lv6_0);
    shl_ln4_fu_530_p3 <= (tmp_s_reg_1092 & ap_const_lv22_0);
    shl_ln712_1_fu_305_p3 <= (tmp_49_reg_1067 & ap_const_lv6_0);
    shl_ln712_2_fu_350_p3 <= (tmp_52_reg_1072 & ap_const_lv6_0);
    shl_ln712_3_fu_395_p3 <= (tmp_55_reg_1077 & ap_const_lv6_0);
    shl_ln712_4_fu_440_p3 <= (tmp_58_reg_1082 & ap_const_lv6_0);
    shl_ln712_5_fu_485_p3 <= (tmp_62_reg_1087 & ap_const_lv6_0);
    shl_ln_fu_260_p3 <= (trunc_ln712_reg_1062 & ap_const_lv6_0);
    tmp_100_fu_954_p3 <= r_V_43_fu_938_p2(61 downto 61);
    tmp_101_fu_970_p4 <= dstval_V_6_fu_962_p3(31 downto 16);
    tmp_91_fu_580_p4 <= dstval_V_fu_572_p3(31 downto 16);
    tmp_92_fu_642_p3 <= r_V_31_fu_626_p2(61 downto 61);
    tmp_93_fu_658_p4 <= dstval_V_2_fu_650_p3(31 downto 16);
    tmp_94_fu_720_p3 <= r_V_34_fu_704_p2(61 downto 61);
    tmp_95_fu_736_p4 <= dstval_V_3_fu_728_p3(31 downto 16);
    tmp_96_fu_798_p3 <= r_V_37_fu_782_p2(61 downto 61);
    tmp_97_fu_814_p4 <= dstval_V_4_fu_806_p3(31 downto 16);
    tmp_98_fu_876_p3 <= r_V_40_fu_860_p2(61 downto 61);
    tmp_99_fu_892_p4 <= dstval_V_5_fu_884_p3(31 downto 16);
    tmp_fu_564_p3 <= r_V_28_fu_548_p2(61 downto 61);
    trunc_ln315_11_fu_674_p1 <= dstval_V_2_fu_650_p3(16 - 1 downto 0);
    trunc_ln315_12_fu_752_p1 <= dstval_V_3_fu_728_p3(16 - 1 downto 0);
    trunc_ln315_13_fu_830_p1 <= dstval_V_4_fu_806_p3(16 - 1 downto 0);
    trunc_ln315_14_fu_908_p1 <= dstval_V_5_fu_884_p3(16 - 1 downto 0);
    trunc_ln315_15_fu_986_p1 <= dstval_V_6_fu_962_p3(16 - 1 downto 0);
    trunc_ln315_fu_596_p1 <= dstval_V_fu_572_p3(16 - 1 downto 0);
    trunc_ln712_fu_206_p1 <= impop_41_dout(16 - 1 downto 0);
    value_V_1_fu_316_p2 <= std_logic_vector(unsigned(zext_ln712_1_fu_312_p1) - unsigned(minValue_V_load_1));
    value_V_2_fu_361_p2 <= std_logic_vector(unsigned(zext_ln712_2_fu_357_p1) - unsigned(minValue_V_load_2));
    value_V_3_fu_406_p2 <= std_logic_vector(unsigned(zext_ln712_3_fu_402_p1) - unsigned(minValue_V_load));
    value_V_4_fu_451_p2 <= std_logic_vector(unsigned(zext_ln712_4_fu_447_p1) - unsigned(minValue_V_load_1));
    value_V_5_fu_496_p2 <= std_logic_vector(unsigned(zext_ln712_5_fu_492_p1) - unsigned(minValue_V_load_2));
    value_V_fu_271_p2 <= std_logic_vector(unsigned(zext_ln712_fu_267_p1) - unsigned(minValue_V_load));
    zext_ln712_1_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln712_1_fu_305_p3),24));
    zext_ln712_2_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln712_2_fu_350_p3),24));
    zext_ln712_3_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln712_3_fu_395_p3),24));
    zext_ln712_4_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln712_4_fu_440_p3),24));
    zext_ln712_5_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln712_5_fu_485_p3),24));
    zext_ln712_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_260_p3),24));
end behav;
