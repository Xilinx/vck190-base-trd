-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.2
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rgb_bgr_kernel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    imgblock_0_0_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_0_1_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_0_2_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_0_3_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_0_4_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_0_5_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_1_0_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_1_1_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_1_2_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_1_3_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_1_4_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_1_5_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_2_0_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_2_1_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_2_2_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_2_3_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_2_4_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_2_5_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_3_0_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_3_1_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_3_2_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_3_3_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_3_4_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_3_5_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_4_0_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_4_1_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_4_2_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_4_3_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_4_4_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_4_5_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    loop_r : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of rgb_bgr_kernel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv15_7FF9 : STD_LOGIC_VECTOR (14 downto 0) := "111111111111001";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal t1_reg_788 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ret_V_7_fu_568_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ret_V_7_reg_793 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln114_fu_680_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln114_reg_798 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln114_reg_798_pp0_iter1_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln114_fu_692_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln114_reg_803 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_s_fu_300_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_300_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_28_fu_330_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_28_fu_330_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal rhs_V_fu_348_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal lhs_V_fu_318_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_fu_352_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln215_2_fu_368_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln215_fu_376_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_29_fu_380_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln215_fu_402_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_30_fu_410_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal rhs_V_3_fu_428_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal lhs_V_4_fu_398_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_5_fu_432_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln215_2_fu_442_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_31_fu_450_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_32_fu_472_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln215_15_fu_468_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1353_16_fu_490_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1353_fu_494_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1353_17_fu_500_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal lhs_V_5_fu_438_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_6_fu_504_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_514_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_33_fu_536_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln215_16_fu_532_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1353_18_fu_554_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1353_10_fu_558_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1353_19_fu_564_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1353_fu_510_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_34_fu_574_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_35_fu_596_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal rhs_V_4_fu_614_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal lhs_V_6_fu_592_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_8_fu_618_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal t3_fu_624_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_36_fu_636_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln_fu_658_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln113_1_fu_666_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln113_fu_654_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal t4_fu_670_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln112_fu_632_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln113_2_fu_676_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln108_fu_686_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln109_fu_689_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln114_fu_701_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln114_fu_698_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal res_fu_704_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln115_fu_718_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln115_3_fu_724_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln115_fu_734_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln115_fu_738_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln115_4_fu_748_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln115_1_fu_758_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_66_fu_710_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln115_1_fu_742_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln115_1_fu_762_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln116_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln115_fu_766_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal imgblock_0_0_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_0_1_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_0_2_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_0_3_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_0_4_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_0_5_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_1_0_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_1_1_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_1_2_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_1_3_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_1_4_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_1_5_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_2_0_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_2_1_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_2_2_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_2_3_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_2_4_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_2_5_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_3_0_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_3_1_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_3_2_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_3_3_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_3_4_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_3_5_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_4_0_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_4_1_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_4_2_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_4_3_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_4_4_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_4_5_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal loop_r_int_reg : STD_LOGIC_VECTOR (0 downto 0);

    component ISPPipeline_accelkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        din3 : IN STD_LOGIC_VECTOR (9 downto 0);
        din4 : IN STD_LOGIC_VECTOR (9 downto 0);
        din5 : IN STD_LOGIC_VECTOR (9 downto 0);
        din6 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;



begin
    ISPPipeline_accelkbM_U98 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_2_0_V_read_int_reg,
        din1 => imgblock_2_1_V_read_int_reg,
        din2 => imgblock_2_2_V_read_int_reg,
        din3 => imgblock_2_3_V_read_int_reg,
        din4 => imgblock_2_4_V_read_int_reg,
        din5 => imgblock_2_5_V_read_int_reg,
        din6 => tmp_s_fu_300_p7,
        dout => tmp_s_fu_300_p8);

    ISPPipeline_accelkbM_U99 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_2_0_V_read_int_reg,
        din1 => imgblock_2_1_V_read_int_reg,
        din2 => imgblock_2_2_V_read_int_reg,
        din3 => imgblock_2_3_V_read_int_reg,
        din4 => imgblock_2_4_V_read_int_reg,
        din5 => imgblock_2_5_V_read_int_reg,
        din6 => tmp_28_fu_330_p7,
        dout => tmp_28_fu_330_p8);

    ISPPipeline_accelkbM_U100 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_0_0_V_read_int_reg,
        din1 => imgblock_0_1_V_read_int_reg,
        din2 => imgblock_0_2_V_read_int_reg,
        din3 => imgblock_0_3_V_read_int_reg,
        din4 => imgblock_0_4_V_read_int_reg,
        din5 => imgblock_0_5_V_read_int_reg,
        din6 => zext_ln215_fu_376_p1,
        dout => tmp_29_fu_380_p8);

    ISPPipeline_accelkbM_U101 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_1_0_V_read_int_reg,
        din1 => imgblock_1_1_V_read_int_reg,
        din2 => imgblock_1_2_V_read_int_reg,
        din3 => imgblock_1_3_V_read_int_reg,
        din4 => imgblock_1_4_V_read_int_reg,
        din5 => imgblock_1_5_V_read_int_reg,
        din6 => select_ln215_fu_402_p3,
        dout => tmp_30_fu_410_p8);

    ISPPipeline_accelkbM_U102 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_1_0_V_read_int_reg,
        din1 => imgblock_1_1_V_read_int_reg,
        din2 => imgblock_1_2_V_read_int_reg,
        din3 => imgblock_1_3_V_read_int_reg,
        din4 => imgblock_1_4_V_read_int_reg,
        din5 => imgblock_1_5_V_read_int_reg,
        din6 => select_ln215_2_fu_442_p3,
        dout => tmp_31_fu_450_p8);

    ISPPipeline_accelkbM_U103 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_3_0_V_read_int_reg,
        din1 => imgblock_3_1_V_read_int_reg,
        din2 => imgblock_3_2_V_read_int_reg,
        din3 => imgblock_3_3_V_read_int_reg,
        din4 => imgblock_3_4_V_read_int_reg,
        din5 => imgblock_3_5_V_read_int_reg,
        din6 => select_ln215_fu_402_p3,
        dout => tmp_32_fu_472_p8);

    ISPPipeline_accelkbM_U104 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_3_0_V_read_int_reg,
        din1 => imgblock_3_1_V_read_int_reg,
        din2 => imgblock_3_2_V_read_int_reg,
        din3 => imgblock_3_3_V_read_int_reg,
        din4 => imgblock_3_4_V_read_int_reg,
        din5 => imgblock_3_5_V_read_int_reg,
        din6 => select_ln215_2_fu_442_p3,
        dout => tmp_fu_514_p8);

    ISPPipeline_accelkbM_U105 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_4_0_V_read_int_reg,
        din1 => imgblock_4_1_V_read_int_reg,
        din2 => imgblock_4_2_V_read_int_reg,
        din3 => imgblock_4_3_V_read_int_reg,
        din4 => imgblock_4_4_V_read_int_reg,
        din5 => imgblock_4_5_V_read_int_reg,
        din6 => zext_ln215_fu_376_p1,
        dout => tmp_33_fu_536_p8);

    ISPPipeline_accelkbM_U106 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_1_0_V_read_int_reg,
        din1 => imgblock_1_1_V_read_int_reg,
        din2 => imgblock_1_2_V_read_int_reg,
        din3 => imgblock_1_3_V_read_int_reg,
        din4 => imgblock_1_4_V_read_int_reg,
        din5 => imgblock_1_5_V_read_int_reg,
        din6 => zext_ln215_fu_376_p1,
        dout => tmp_34_fu_574_p8);

    ISPPipeline_accelkbM_U107 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_3_0_V_read_int_reg,
        din1 => imgblock_3_1_V_read_int_reg,
        din2 => imgblock_3_2_V_read_int_reg,
        din3 => imgblock_3_3_V_read_int_reg,
        din4 => imgblock_3_4_V_read_int_reg,
        din5 => imgblock_3_5_V_read_int_reg,
        din6 => zext_ln215_fu_376_p1,
        dout => tmp_35_fu_596_p8);

    ISPPipeline_accelkbM_U108 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_2_0_V_read_int_reg,
        din1 => imgblock_2_1_V_read_int_reg,
        din2 => imgblock_2_2_V_read_int_reg,
        din3 => imgblock_2_3_V_read_int_reg,
        din4 => imgblock_2_4_V_read_int_reg,
        din5 => imgblock_2_5_V_read_int_reg,
        din6 => zext_ln215_fu_376_p1,
        dout => tmp_36_fu_636_p8);




    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                add_ln114_reg_798 <= add_ln114_fu_680_p2;
                add_ln114_reg_798_pp0_iter1_reg <= add_ln114_reg_798;
                ret_V_7_reg_793 <= ret_V_7_fu_568_p2;
                sub_ln114_reg_803 <= sub_ln114_fu_692_p2;
                t1_reg_788 <= ret_V_fu_352_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                imgblock_0_0_V_read_int_reg <= imgblock_0_0_V_read;
                imgblock_0_1_V_read_int_reg <= imgblock_0_1_V_read;
                imgblock_0_2_V_read_int_reg <= imgblock_0_2_V_read;
                imgblock_0_3_V_read_int_reg <= imgblock_0_3_V_read;
                imgblock_0_4_V_read_int_reg <= imgblock_0_4_V_read;
                imgblock_0_5_V_read_int_reg <= imgblock_0_5_V_read;
                imgblock_1_0_V_read_int_reg <= imgblock_1_0_V_read;
                imgblock_1_1_V_read_int_reg <= imgblock_1_1_V_read;
                imgblock_1_2_V_read_int_reg <= imgblock_1_2_V_read;
                imgblock_1_3_V_read_int_reg <= imgblock_1_3_V_read;
                imgblock_1_4_V_read_int_reg <= imgblock_1_4_V_read;
                imgblock_1_5_V_read_int_reg <= imgblock_1_5_V_read;
                imgblock_2_0_V_read_int_reg <= imgblock_2_0_V_read;
                imgblock_2_1_V_read_int_reg <= imgblock_2_1_V_read;
                imgblock_2_2_V_read_int_reg <= imgblock_2_2_V_read;
                imgblock_2_3_V_read_int_reg <= imgblock_2_3_V_read;
                imgblock_2_4_V_read_int_reg <= imgblock_2_4_V_read;
                imgblock_2_5_V_read_int_reg <= imgblock_2_5_V_read;
                imgblock_3_0_V_read_int_reg <= imgblock_3_0_V_read;
                imgblock_3_1_V_read_int_reg <= imgblock_3_1_V_read;
                imgblock_3_2_V_read_int_reg <= imgblock_3_2_V_read;
                imgblock_3_3_V_read_int_reg <= imgblock_3_3_V_read;
                imgblock_3_4_V_read_int_reg <= imgblock_3_4_V_read;
                imgblock_3_5_V_read_int_reg <= imgblock_3_5_V_read;
                imgblock_4_0_V_read_int_reg <= imgblock_4_0_V_read;
                imgblock_4_1_V_read_int_reg <= imgblock_4_1_V_read;
                imgblock_4_2_V_read_int_reg <= imgblock_4_2_V_read;
                imgblock_4_3_V_read_int_reg <= imgblock_4_3_V_read;
                imgblock_4_4_V_read_int_reg <= imgblock_4_4_V_read;
                imgblock_4_5_V_read_int_reg <= imgblock_4_5_V_read;
                loop_r_int_reg <= loop_r;
            end if;
        end if;
    end process;
    add_ln114_fu_680_p2 <= std_logic_vector(unsigned(zext_ln112_fu_632_p1) + unsigned(zext_ln113_2_fu_676_p1));
    add_ln1353_10_fu_558_p2 <= std_logic_vector(unsigned(zext_ln215_16_fu_532_p1) + unsigned(zext_ln1353_18_fu_554_p1));
    add_ln1353_fu_494_p2 <= std_logic_vector(unsigned(zext_ln215_15_fu_468_p1) + unsigned(zext_ln1353_16_fu_490_p1));
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
    ap_return <= 
        ap_const_lv14_0 when (icmp_ln116_fu_774_p2(0) = '1') else 
        select_ln115_fu_766_p3;
    icmp_ln116_fu_774_p2 <= "1" when (signed(res_fu_704_p2) < signed(ap_const_lv15_7FF9)) else "0";
    lhs_V_4_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_380_p8),11));
    lhs_V_5_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_5_fu_432_p2),12));
    lhs_V_6_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_fu_574_p8),11));
    lhs_V_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_300_p8),11));
    or_ln215_2_fu_368_p3 <= (ap_const_lv1_1 & loop_r_int_reg);
    res_fu_704_p2 <= std_logic_vector(unsigned(zext_ln114_fu_701_p1) + unsigned(sext_ln114_fu_698_p1));
    ret_V_5_fu_432_p2 <= std_logic_vector(unsigned(rhs_V_3_fu_428_p1) + unsigned(lhs_V_4_fu_398_p1));
    ret_V_6_fu_504_p2 <= std_logic_vector(unsigned(zext_ln1353_17_fu_500_p1) + unsigned(lhs_V_5_fu_438_p1));
    ret_V_7_fu_568_p2 <= std_logic_vector(unsigned(zext_ln1353_19_fu_564_p1) + unsigned(zext_ln1353_fu_510_p1));
    ret_V_8_fu_618_p2 <= std_logic_vector(unsigned(rhs_V_4_fu_614_p1) + unsigned(lhs_V_6_fu_592_p1));
    ret_V_fu_352_p2 <= std_logic_vector(unsigned(rhs_V_fu_348_p1) + unsigned(lhs_V_fu_318_p1));
    rhs_V_3_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_fu_410_p8),11));
    rhs_V_4_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_596_p8),11));
    rhs_V_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_330_p8),11));
    select_ln115_fu_766_p3 <= 
        sub_ln115_1_fu_742_p2 when (tmp_66_fu_710_p3(0) = '1') else 
        zext_ln115_1_fu_762_p1;
    select_ln215_2_fu_442_p3 <= 
        ap_const_lv3_4 when (loop_r_int_reg(0) = '1') else 
        ap_const_lv3_3;
    select_ln215_fu_402_p3 <= 
        ap_const_lv3_2 when (loop_r_int_reg(0) = '1') else 
        ap_const_lv3_1;
        sext_ln114_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln114_reg_803),15));

        sext_ln115_1_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln115_4_fu_748_p4),13));

        sext_ln115_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln115_3_fu_724_p4),13));

    shl_ln_fu_658_p3 <= (tmp_36_fu_636_p8 & ap_const_lv2_0);
    sub_ln114_fu_692_p2 <= std_logic_vector(unsigned(zext_ln108_fu_686_p1) - unsigned(zext_ln109_fu_689_p1));
    sub_ln115_1_fu_742_p2 <= std_logic_vector(unsigned(ap_const_lv14_0) - unsigned(zext_ln115_fu_738_p1));
    sub_ln115_fu_718_p2 <= std_logic_vector(unsigned(ap_const_lv15_0) - unsigned(res_fu_704_p2));
    t3_fu_624_p3 <= (ret_V_8_fu_618_p2 & ap_const_lv2_0);
    t4_fu_670_p2 <= std_logic_vector(unsigned(zext_ln113_1_fu_666_p1) + unsigned(zext_ln113_fu_654_p1));
    tmp_28_fu_330_p7 <= (ap_const_lv2_2 & loop_r_int_reg);
    tmp_66_fu_710_p3 <= res_fu_704_p2(14 downto 14);
    tmp_s_fu_300_p7 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_r_int_reg),3));
    trunc_ln115_3_fu_724_p4 <= sub_ln115_fu_718_p2(14 downto 3);
    trunc_ln115_4_fu_748_p4 <= res_fu_704_p2(14 downto 3);
    zext_ln108_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t1_reg_788),14));
    zext_ln109_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_7_reg_793),14));
    zext_ln112_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t3_fu_624_p3),14));
    zext_ln113_1_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_658_p3),13));
    zext_ln113_2_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t4_fu_670_p2),14));
    zext_ln113_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_36_fu_636_p8),13));
    zext_ln114_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln114_reg_798_pp0_iter1_reg),15));
    zext_ln115_1_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln115_1_fu_758_p1),14));
    zext_ln115_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln115_fu_734_p1),14));
    zext_ln1353_16_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_472_p8),11));
    zext_ln1353_17_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1353_fu_494_p2),12));
    zext_ln1353_18_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_536_p8),11));
    zext_ln1353_19_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1353_10_fu_558_p2),13));
    zext_ln1353_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_6_fu_504_p2),13));
    zext_ln215_15_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_450_p8),11));
    zext_ln215_16_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_514_p8),11));
    zext_ln215_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln215_2_fu_368_p3),3));
end behav;
