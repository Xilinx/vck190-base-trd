-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.2
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity g_kernel_ap_uint_6_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    imgblock_0_0_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_0_1_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_0_2_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_0_3_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_0_4_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_0_5_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_1_0_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_1_1_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_1_2_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_1_3_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_1_4_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_1_5_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_2_0_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_2_1_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_2_2_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_2_3_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_2_4_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_2_5_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_3_0_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_3_1_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_3_2_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_3_3_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_3_4_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_3_5_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_4_0_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_4_1_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_4_2_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_4_3_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_4_4_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_4_5_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    loop_r : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of g_kernel_ap_uint_6_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv15_7FF9 : STD_LOGIC_VECTOR (14 downto 0) := "111111111111001";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ret_V_12_fu_426_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_12_reg_708 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ret_V_15_fu_556_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_15_reg_713 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_54_fu_562_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_54_reg_718 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_54_reg_718_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln63_fu_604_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln63_reg_723 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal or_ln_fu_298_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln215_fu_306_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_310_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_48_fu_332_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_48_fu_332_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal rhs_V_fu_350_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal lhs_V_fu_328_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_fu_354_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_49_fu_372_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_49_fu_372_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_50_fu_394_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln215_30_fu_390_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1353_23_fu_412_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1353_fu_416_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1353_24_fu_422_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal lhs_V_10_fu_360_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_432_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_51_fu_462_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_51_fu_462_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal rhs_V_6_fu_480_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal lhs_V_11_fu_450_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_14_fu_484_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_52_fu_502_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_52_fu_502_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_53_fu_524_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln215_34_fu_520_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1353_25_fu_542_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1353_20_fu_546_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1353_26_fu_552_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal lhs_V_12_fu_490_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1353_fu_580_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ret_V_13_fu_583_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln_fu_593_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln63_fu_600_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1354_fu_589_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln63_1_fu_610_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln63_fu_621_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln63_1_fu_617_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal res_fu_624_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln64_fu_638_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln64_3_fu_644_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln64_fu_654_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln64_fu_658_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln64_4_fu_668_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln64_1_fu_678_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_70_fu_630_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln64_1_fu_662_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln64_1_fu_682_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln65_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln64_fu_686_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal imgblock_0_0_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_0_1_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_0_2_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_0_3_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_0_4_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_0_5_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_1_0_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_1_1_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_1_2_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_1_3_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_1_4_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_1_5_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_2_0_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_2_1_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_2_2_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_2_3_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_2_4_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_2_5_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_3_0_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_3_1_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_3_2_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_3_3_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_3_4_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_3_5_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_4_0_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_4_1_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_4_2_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_4_3_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_4_4_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_4_5_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal loop_r_int_reg : STD_LOGIC_VECTOR (0 downto 0);

    component ISPPipeline_accelkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        din3 : IN STD_LOGIC_VECTOR (9 downto 0);
        din4 : IN STD_LOGIC_VECTOR (9 downto 0);
        din5 : IN STD_LOGIC_VECTOR (9 downto 0);
        din6 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;



begin
    ISPPipeline_accelkbM_U183 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_0_0_V_read_int_reg,
        din1 => imgblock_0_1_V_read_int_reg,
        din2 => imgblock_0_2_V_read_int_reg,
        din3 => imgblock_0_3_V_read_int_reg,
        din4 => imgblock_0_4_V_read_int_reg,
        din5 => imgblock_0_5_V_read_int_reg,
        din6 => zext_ln215_fu_306_p1,
        dout => tmp_s_fu_310_p8);

    ISPPipeline_accelkbM_U184 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_2_0_V_read_int_reg,
        din1 => imgblock_2_1_V_read_int_reg,
        din2 => imgblock_2_2_V_read_int_reg,
        din3 => imgblock_2_3_V_read_int_reg,
        din4 => imgblock_2_4_V_read_int_reg,
        din5 => imgblock_2_5_V_read_int_reg,
        din6 => tmp_48_fu_332_p7,
        dout => tmp_48_fu_332_p8);

    ISPPipeline_accelkbM_U185 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_2_0_V_read_int_reg,
        din1 => imgblock_2_1_V_read_int_reg,
        din2 => imgblock_2_2_V_read_int_reg,
        din3 => imgblock_2_3_V_read_int_reg,
        din4 => imgblock_2_4_V_read_int_reg,
        din5 => imgblock_2_5_V_read_int_reg,
        din6 => tmp_49_fu_372_p7,
        dout => tmp_49_fu_372_p8);

    ISPPipeline_accelkbM_U186 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_4_0_V_read_int_reg,
        din1 => imgblock_4_1_V_read_int_reg,
        din2 => imgblock_4_2_V_read_int_reg,
        din3 => imgblock_4_3_V_read_int_reg,
        din4 => imgblock_4_4_V_read_int_reg,
        din5 => imgblock_4_5_V_read_int_reg,
        din6 => zext_ln215_fu_306_p1,
        dout => tmp_50_fu_394_p8);

    ISPPipeline_accelkbM_U187 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_1_0_V_read_int_reg,
        din1 => imgblock_1_1_V_read_int_reg,
        din2 => imgblock_1_2_V_read_int_reg,
        din3 => imgblock_1_3_V_read_int_reg,
        din4 => imgblock_1_4_V_read_int_reg,
        din5 => imgblock_1_5_V_read_int_reg,
        din6 => zext_ln215_fu_306_p1,
        dout => tmp_fu_432_p8);

    ISPPipeline_accelkbM_U188 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_2_0_V_read_int_reg,
        din1 => imgblock_2_1_V_read_int_reg,
        din2 => imgblock_2_2_V_read_int_reg,
        din3 => imgblock_2_3_V_read_int_reg,
        din4 => imgblock_2_4_V_read_int_reg,
        din5 => imgblock_2_5_V_read_int_reg,
        din6 => tmp_51_fu_462_p7,
        dout => tmp_51_fu_462_p8);

    ISPPipeline_accelkbM_U189 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_2_0_V_read_int_reg,
        din1 => imgblock_2_1_V_read_int_reg,
        din2 => imgblock_2_2_V_read_int_reg,
        din3 => imgblock_2_3_V_read_int_reg,
        din4 => imgblock_2_4_V_read_int_reg,
        din5 => imgblock_2_5_V_read_int_reg,
        din6 => tmp_52_fu_502_p7,
        dout => tmp_52_fu_502_p8);

    ISPPipeline_accelkbM_U190 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_3_0_V_read_int_reg,
        din1 => imgblock_3_1_V_read_int_reg,
        din2 => imgblock_3_2_V_read_int_reg,
        din3 => imgblock_3_3_V_read_int_reg,
        din4 => imgblock_3_4_V_read_int_reg,
        din5 => imgblock_3_5_V_read_int_reg,
        din6 => zext_ln215_fu_306_p1,
        dout => tmp_53_fu_524_p8);

    ISPPipeline_accelkbM_U191 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 3,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_2_0_V_read_int_reg,
        din1 => imgblock_2_1_V_read_int_reg,
        din2 => imgblock_2_2_V_read_int_reg,
        din3 => imgblock_2_3_V_read_int_reg,
        din4 => imgblock_2_4_V_read_int_reg,
        din5 => imgblock_2_5_V_read_int_reg,
        din6 => zext_ln215_fu_306_p1,
        dout => tmp_54_fu_562_p8);




    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                add_ln63_reg_723 <= add_ln63_fu_604_p2;
                ret_V_12_reg_708 <= ret_V_12_fu_426_p2;
                ret_V_15_reg_713 <= ret_V_15_fu_556_p2;
                tmp_54_reg_718 <= tmp_54_fu_562_p8;
                tmp_54_reg_718_pp0_iter1_reg <= tmp_54_reg_718;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                imgblock_0_0_V_read_int_reg <= imgblock_0_0_V_read;
                imgblock_0_1_V_read_int_reg <= imgblock_0_1_V_read;
                imgblock_0_2_V_read_int_reg <= imgblock_0_2_V_read;
                imgblock_0_3_V_read_int_reg <= imgblock_0_3_V_read;
                imgblock_0_4_V_read_int_reg <= imgblock_0_4_V_read;
                imgblock_0_5_V_read_int_reg <= imgblock_0_5_V_read;
                imgblock_1_0_V_read_int_reg <= imgblock_1_0_V_read;
                imgblock_1_1_V_read_int_reg <= imgblock_1_1_V_read;
                imgblock_1_2_V_read_int_reg <= imgblock_1_2_V_read;
                imgblock_1_3_V_read_int_reg <= imgblock_1_3_V_read;
                imgblock_1_4_V_read_int_reg <= imgblock_1_4_V_read;
                imgblock_1_5_V_read_int_reg <= imgblock_1_5_V_read;
                imgblock_2_0_V_read_int_reg <= imgblock_2_0_V_read;
                imgblock_2_1_V_read_int_reg <= imgblock_2_1_V_read;
                imgblock_2_2_V_read_int_reg <= imgblock_2_2_V_read;
                imgblock_2_3_V_read_int_reg <= imgblock_2_3_V_read;
                imgblock_2_4_V_read_int_reg <= imgblock_2_4_V_read;
                imgblock_2_5_V_read_int_reg <= imgblock_2_5_V_read;
                imgblock_3_0_V_read_int_reg <= imgblock_3_0_V_read;
                imgblock_3_1_V_read_int_reg <= imgblock_3_1_V_read;
                imgblock_3_2_V_read_int_reg <= imgblock_3_2_V_read;
                imgblock_3_3_V_read_int_reg <= imgblock_3_3_V_read;
                imgblock_3_4_V_read_int_reg <= imgblock_3_4_V_read;
                imgblock_3_5_V_read_int_reg <= imgblock_3_5_V_read;
                imgblock_4_0_V_read_int_reg <= imgblock_4_0_V_read;
                imgblock_4_1_V_read_int_reg <= imgblock_4_1_V_read;
                imgblock_4_2_V_read_int_reg <= imgblock_4_2_V_read;
                imgblock_4_3_V_read_int_reg <= imgblock_4_3_V_read;
                imgblock_4_4_V_read_int_reg <= imgblock_4_4_V_read;
                imgblock_4_5_V_read_int_reg <= imgblock_4_5_V_read;
                loop_r_int_reg <= loop_r;
            end if;
        end if;
    end process;
    add_ln1353_20_fu_546_p2 <= std_logic_vector(unsigned(zext_ln215_34_fu_520_p1) + unsigned(zext_ln1353_25_fu_542_p1));
    add_ln1353_fu_416_p2 <= std_logic_vector(unsigned(zext_ln215_30_fu_390_p1) + unsigned(zext_ln1353_23_fu_412_p1));
    add_ln63_fu_604_p2 <= std_logic_vector(unsigned(zext_ln63_fu_600_p1) + unsigned(sext_ln1354_fu_589_p1));
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
    ap_return <= 
        ap_const_lv14_0 when (icmp_ln65_fu_694_p2(0) = '1') else 
        select_ln64_fu_686_p3;
    icmp_ln65_fu_694_p2 <= "1" when (signed(res_fu_624_p2) < signed(ap_const_lv15_7FF9)) else "0";
    lhs_V_10_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_354_p2),12));
    lhs_V_11_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_432_p8),11));
    lhs_V_12_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_14_fu_484_p2),12));
    lhs_V_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_310_p8),11));
    or_ln_fu_298_p3 <= (ap_const_lv1_1 & loop_r_int_reg);
    res_fu_624_p2 <= std_logic_vector(signed(sext_ln63_fu_621_p1) + signed(zext_ln63_1_fu_617_p1));
    ret_V_12_fu_426_p2 <= std_logic_vector(unsigned(zext_ln1353_24_fu_422_p1) + unsigned(lhs_V_10_fu_360_p1));
    ret_V_13_fu_583_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(zext_ln1353_fu_580_p1));
    ret_V_14_fu_484_p2 <= std_logic_vector(unsigned(rhs_V_6_fu_480_p1) + unsigned(lhs_V_11_fu_450_p1));
    ret_V_15_fu_556_p2 <= std_logic_vector(unsigned(zext_ln1353_26_fu_552_p1) + unsigned(lhs_V_12_fu_490_p1));
    ret_V_fu_354_p2 <= std_logic_vector(unsigned(rhs_V_fu_350_p1) + unsigned(lhs_V_fu_328_p1));
    rhs_V_6_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_fu_462_p8),11));
    rhs_V_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_fu_332_p8),11));
    select_ln64_fu_686_p3 <= 
        sub_ln64_1_fu_662_p2 when (tmp_70_fu_630_p3(0) = '1') else 
        zext_ln64_1_fu_682_p1;
        sext_ln1354_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_13_fu_583_p2),14));

        sext_ln63_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln63_reg_723),15));

        sext_ln64_1_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln64_4_fu_668_p4),13));

        sext_ln64_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln64_3_fu_644_p4),13));

    shl_ln63_1_fu_610_p3 <= (tmp_54_reg_718_pp0_iter1_reg & ap_const_lv2_0);
    shl_ln_fu_593_p3 <= (ret_V_15_reg_713 & ap_const_lv1_0);
    sub_ln64_1_fu_662_p2 <= std_logic_vector(unsigned(ap_const_lv14_0) - unsigned(zext_ln64_fu_658_p1));
    sub_ln64_fu_638_p2 <= std_logic_vector(unsigned(ap_const_lv15_0) - unsigned(res_fu_624_p2));
    tmp_48_fu_332_p7 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_r_int_reg),3));
    tmp_49_fu_372_p7 <= (ap_const_lv2_2 & loop_r_int_reg);
    tmp_51_fu_462_p7 <= 
        ap_const_lv3_2 when (loop_r_int_reg(0) = '1') else 
        ap_const_lv3_1;
    tmp_52_fu_502_p7 <= 
        ap_const_lv3_4 when (loop_r_int_reg(0) = '1') else 
        ap_const_lv3_3;
    tmp_70_fu_630_p3 <= res_fu_624_p2(14 downto 14);
    trunc_ln64_3_fu_644_p4 <= sub_ln64_fu_638_p2(14 downto 3);
    trunc_ln64_4_fu_668_p4 <= res_fu_624_p2(14 downto 3);
    zext_ln1353_23_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_50_fu_394_p8),11));
    zext_ln1353_24_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1353_fu_416_p2),12));
    zext_ln1353_25_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_53_fu_524_p8),11));
    zext_ln1353_26_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1353_20_fu_546_p2),12));
    zext_ln1353_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_12_reg_708),13));
    zext_ln215_30_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_fu_372_p8),11));
    zext_ln215_34_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_52_fu_502_p8),11));
    zext_ln215_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_298_p3),3));
    zext_ln63_1_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln63_1_fu_610_p3),15));
    zext_ln63_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_593_p3),14));
    zext_ln64_1_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln64_1_fu_678_p1),14));
    zext_ln64_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln64_fu_654_p1),14));
end behav;
