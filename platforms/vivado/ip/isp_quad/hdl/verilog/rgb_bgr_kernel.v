// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.2
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rgb_bgr_kernel (
        ap_clk,
        ap_rst,
        imgblock_0_0_V_read,
        imgblock_0_1_V_read,
        imgblock_0_2_V_read,
        imgblock_0_3_V_read,
        imgblock_0_4_V_read,
        imgblock_0_5_V_read,
        imgblock_1_0_V_read,
        imgblock_1_1_V_read,
        imgblock_1_2_V_read,
        imgblock_1_3_V_read,
        imgblock_1_4_V_read,
        imgblock_1_5_V_read,
        imgblock_2_0_V_read,
        imgblock_2_1_V_read,
        imgblock_2_2_V_read,
        imgblock_2_3_V_read,
        imgblock_2_4_V_read,
        imgblock_2_5_V_read,
        imgblock_3_0_V_read,
        imgblock_3_1_V_read,
        imgblock_3_2_V_read,
        imgblock_3_3_V_read,
        imgblock_3_4_V_read,
        imgblock_3_5_V_read,
        imgblock_4_0_V_read,
        imgblock_4_1_V_read,
        imgblock_4_2_V_read,
        imgblock_4_3_V_read,
        imgblock_4_4_V_read,
        imgblock_4_5_V_read,
        loop_r,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [9:0] imgblock_0_0_V_read;
input  [9:0] imgblock_0_1_V_read;
input  [9:0] imgblock_0_2_V_read;
input  [9:0] imgblock_0_3_V_read;
input  [9:0] imgblock_0_4_V_read;
input  [9:0] imgblock_0_5_V_read;
input  [9:0] imgblock_1_0_V_read;
input  [9:0] imgblock_1_1_V_read;
input  [9:0] imgblock_1_2_V_read;
input  [9:0] imgblock_1_3_V_read;
input  [9:0] imgblock_1_4_V_read;
input  [9:0] imgblock_1_5_V_read;
input  [9:0] imgblock_2_0_V_read;
input  [9:0] imgblock_2_1_V_read;
input  [9:0] imgblock_2_2_V_read;
input  [9:0] imgblock_2_3_V_read;
input  [9:0] imgblock_2_4_V_read;
input  [9:0] imgblock_2_5_V_read;
input  [9:0] imgblock_3_0_V_read;
input  [9:0] imgblock_3_1_V_read;
input  [9:0] imgblock_3_2_V_read;
input  [9:0] imgblock_3_3_V_read;
input  [9:0] imgblock_3_4_V_read;
input  [9:0] imgblock_3_5_V_read;
input  [9:0] imgblock_4_0_V_read;
input  [9:0] imgblock_4_1_V_read;
input  [9:0] imgblock_4_2_V_read;
input  [9:0] imgblock_4_3_V_read;
input  [9:0] imgblock_4_4_V_read;
input  [9:0] imgblock_4_5_V_read;
input  [0:0] loop_r;
output  [13:0] ap_return;
input   ap_ce;

reg   [9:0] t1_reg_788;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [12:0] ret_V_7_fu_568_p2;
reg   [12:0] ret_V_7_reg_793;
wire   [13:0] add_ln114_fu_680_p2;
reg   [13:0] add_ln114_reg_798;
reg   [13:0] add_ln114_reg_798_pp0_iter1_reg;
wire   [13:0] sub_ln114_fu_692_p2;
reg   [13:0] sub_ln114_reg_803;
wire    ap_block_pp0_stage0;
wire   [2:0] tmp_s_fu_300_p7;
wire   [9:0] tmp_s_fu_300_p8;
wire   [2:0] tmp_28_fu_330_p7;
wire   [9:0] tmp_28_fu_330_p8;
wire   [10:0] rhs_V_fu_348_p1;
wire   [10:0] lhs_V_fu_318_p1;
wire   [10:0] ret_V_fu_352_p2;
wire   [1:0] or_ln215_2_fu_368_p3;
wire   [2:0] zext_ln215_fu_376_p1;
wire   [9:0] tmp_29_fu_380_p8;
wire   [2:0] select_ln215_fu_402_p3;
wire   [9:0] tmp_30_fu_410_p8;
wire   [10:0] rhs_V_3_fu_428_p1;
wire   [10:0] lhs_V_4_fu_398_p1;
wire   [10:0] ret_V_5_fu_432_p2;
wire   [2:0] select_ln215_2_fu_442_p3;
wire   [9:0] tmp_31_fu_450_p8;
wire   [9:0] tmp_32_fu_472_p8;
wire   [10:0] zext_ln215_15_fu_468_p1;
wire   [10:0] zext_ln1353_16_fu_490_p1;
wire   [10:0] add_ln1353_fu_494_p2;
wire   [11:0] zext_ln1353_17_fu_500_p1;
wire   [11:0] lhs_V_5_fu_438_p1;
wire   [11:0] ret_V_6_fu_504_p2;
wire   [9:0] tmp_fu_514_p8;
wire   [9:0] tmp_33_fu_536_p8;
wire   [10:0] zext_ln215_16_fu_532_p1;
wire   [10:0] zext_ln1353_18_fu_554_p1;
wire   [10:0] add_ln1353_10_fu_558_p2;
wire   [12:0] zext_ln1353_19_fu_564_p1;
wire   [12:0] zext_ln1353_fu_510_p1;
wire   [9:0] tmp_34_fu_574_p8;
wire   [9:0] tmp_35_fu_596_p8;
wire   [10:0] rhs_V_4_fu_614_p1;
wire   [10:0] lhs_V_6_fu_592_p1;
wire   [10:0] ret_V_8_fu_618_p2;
wire   [12:0] t3_fu_624_p3;
wire   [9:0] tmp_36_fu_636_p8;
wire   [11:0] shl_ln_fu_658_p3;
wire   [12:0] zext_ln113_1_fu_666_p1;
wire   [12:0] zext_ln113_fu_654_p1;
wire   [12:0] t4_fu_670_p2;
wire   [13:0] zext_ln112_fu_632_p1;
wire   [13:0] zext_ln113_2_fu_676_p1;
wire   [13:0] zext_ln108_fu_686_p1;
wire   [13:0] zext_ln109_fu_689_p1;
wire   [14:0] zext_ln114_fu_701_p1;
wire  signed [14:0] sext_ln114_fu_698_p1;
wire   [14:0] res_fu_704_p2;
wire   [14:0] sub_ln115_fu_718_p2;
wire   [11:0] trunc_ln115_3_fu_724_p4;
wire  signed [12:0] sext_ln115_fu_734_p1;
wire   [13:0] zext_ln115_fu_738_p1;
wire   [11:0] trunc_ln115_4_fu_748_p4;
wire  signed [12:0] sext_ln115_1_fu_758_p1;
wire   [0:0] tmp_66_fu_710_p3;
wire   [13:0] sub_ln115_1_fu_742_p2;
wire   [13:0] zext_ln115_1_fu_762_p1;
wire   [0:0] icmp_ln116_fu_774_p2;
wire   [13:0] select_ln115_fu_766_p3;
reg   [9:0] imgblock_0_0_V_read_int_reg;
reg   [9:0] imgblock_0_1_V_read_int_reg;
reg   [9:0] imgblock_0_2_V_read_int_reg;
reg   [9:0] imgblock_0_3_V_read_int_reg;
reg   [9:0] imgblock_0_4_V_read_int_reg;
reg   [9:0] imgblock_0_5_V_read_int_reg;
reg   [9:0] imgblock_1_0_V_read_int_reg;
reg   [9:0] imgblock_1_1_V_read_int_reg;
reg   [9:0] imgblock_1_2_V_read_int_reg;
reg   [9:0] imgblock_1_3_V_read_int_reg;
reg   [9:0] imgblock_1_4_V_read_int_reg;
reg   [9:0] imgblock_1_5_V_read_int_reg;
reg   [9:0] imgblock_2_0_V_read_int_reg;
reg   [9:0] imgblock_2_1_V_read_int_reg;
reg   [9:0] imgblock_2_2_V_read_int_reg;
reg   [9:0] imgblock_2_3_V_read_int_reg;
reg   [9:0] imgblock_2_4_V_read_int_reg;
reg   [9:0] imgblock_2_5_V_read_int_reg;
reg   [9:0] imgblock_3_0_V_read_int_reg;
reg   [9:0] imgblock_3_1_V_read_int_reg;
reg   [9:0] imgblock_3_2_V_read_int_reg;
reg   [9:0] imgblock_3_3_V_read_int_reg;
reg   [9:0] imgblock_3_4_V_read_int_reg;
reg   [9:0] imgblock_3_5_V_read_int_reg;
reg   [9:0] imgblock_4_0_V_read_int_reg;
reg   [9:0] imgblock_4_1_V_read_int_reg;
reg   [9:0] imgblock_4_2_V_read_int_reg;
reg   [9:0] imgblock_4_3_V_read_int_reg;
reg   [9:0] imgblock_4_4_V_read_int_reg;
reg   [9:0] imgblock_4_5_V_read_int_reg;
reg   [0:0] loop_r_int_reg;

ISPPipeline_accelkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 10 ),
    .din5_WIDTH( 10 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 10 ))
ISPPipeline_accelkbM_U98(
    .din0(imgblock_2_0_V_read_int_reg),
    .din1(imgblock_2_1_V_read_int_reg),
    .din2(imgblock_2_2_V_read_int_reg),
    .din3(imgblock_2_3_V_read_int_reg),
    .din4(imgblock_2_4_V_read_int_reg),
    .din5(imgblock_2_5_V_read_int_reg),
    .din6(tmp_s_fu_300_p7),
    .dout(tmp_s_fu_300_p8)
);

ISPPipeline_accelkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 10 ),
    .din5_WIDTH( 10 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 10 ))
ISPPipeline_accelkbM_U99(
    .din0(imgblock_2_0_V_read_int_reg),
    .din1(imgblock_2_1_V_read_int_reg),
    .din2(imgblock_2_2_V_read_int_reg),
    .din3(imgblock_2_3_V_read_int_reg),
    .din4(imgblock_2_4_V_read_int_reg),
    .din5(imgblock_2_5_V_read_int_reg),
    .din6(tmp_28_fu_330_p7),
    .dout(tmp_28_fu_330_p8)
);

ISPPipeline_accelkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 10 ),
    .din5_WIDTH( 10 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 10 ))
ISPPipeline_accelkbM_U100(
    .din0(imgblock_0_0_V_read_int_reg),
    .din1(imgblock_0_1_V_read_int_reg),
    .din2(imgblock_0_2_V_read_int_reg),
    .din3(imgblock_0_3_V_read_int_reg),
    .din4(imgblock_0_4_V_read_int_reg),
    .din5(imgblock_0_5_V_read_int_reg),
    .din6(zext_ln215_fu_376_p1),
    .dout(tmp_29_fu_380_p8)
);

ISPPipeline_accelkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 10 ),
    .din5_WIDTH( 10 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 10 ))
ISPPipeline_accelkbM_U101(
    .din0(imgblock_1_0_V_read_int_reg),
    .din1(imgblock_1_1_V_read_int_reg),
    .din2(imgblock_1_2_V_read_int_reg),
    .din3(imgblock_1_3_V_read_int_reg),
    .din4(imgblock_1_4_V_read_int_reg),
    .din5(imgblock_1_5_V_read_int_reg),
    .din6(select_ln215_fu_402_p3),
    .dout(tmp_30_fu_410_p8)
);

ISPPipeline_accelkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 10 ),
    .din5_WIDTH( 10 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 10 ))
ISPPipeline_accelkbM_U102(
    .din0(imgblock_1_0_V_read_int_reg),
    .din1(imgblock_1_1_V_read_int_reg),
    .din2(imgblock_1_2_V_read_int_reg),
    .din3(imgblock_1_3_V_read_int_reg),
    .din4(imgblock_1_4_V_read_int_reg),
    .din5(imgblock_1_5_V_read_int_reg),
    .din6(select_ln215_2_fu_442_p3),
    .dout(tmp_31_fu_450_p8)
);

ISPPipeline_accelkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 10 ),
    .din5_WIDTH( 10 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 10 ))
ISPPipeline_accelkbM_U103(
    .din0(imgblock_3_0_V_read_int_reg),
    .din1(imgblock_3_1_V_read_int_reg),
    .din2(imgblock_3_2_V_read_int_reg),
    .din3(imgblock_3_3_V_read_int_reg),
    .din4(imgblock_3_4_V_read_int_reg),
    .din5(imgblock_3_5_V_read_int_reg),
    .din6(select_ln215_fu_402_p3),
    .dout(tmp_32_fu_472_p8)
);

ISPPipeline_accelkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 10 ),
    .din5_WIDTH( 10 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 10 ))
ISPPipeline_accelkbM_U104(
    .din0(imgblock_3_0_V_read_int_reg),
    .din1(imgblock_3_1_V_read_int_reg),
    .din2(imgblock_3_2_V_read_int_reg),
    .din3(imgblock_3_3_V_read_int_reg),
    .din4(imgblock_3_4_V_read_int_reg),
    .din5(imgblock_3_5_V_read_int_reg),
    .din6(select_ln215_2_fu_442_p3),
    .dout(tmp_fu_514_p8)
);

ISPPipeline_accelkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 10 ),
    .din5_WIDTH( 10 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 10 ))
ISPPipeline_accelkbM_U105(
    .din0(imgblock_4_0_V_read_int_reg),
    .din1(imgblock_4_1_V_read_int_reg),
    .din2(imgblock_4_2_V_read_int_reg),
    .din3(imgblock_4_3_V_read_int_reg),
    .din4(imgblock_4_4_V_read_int_reg),
    .din5(imgblock_4_5_V_read_int_reg),
    .din6(zext_ln215_fu_376_p1),
    .dout(tmp_33_fu_536_p8)
);

ISPPipeline_accelkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 10 ),
    .din5_WIDTH( 10 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 10 ))
ISPPipeline_accelkbM_U106(
    .din0(imgblock_1_0_V_read_int_reg),
    .din1(imgblock_1_1_V_read_int_reg),
    .din2(imgblock_1_2_V_read_int_reg),
    .din3(imgblock_1_3_V_read_int_reg),
    .din4(imgblock_1_4_V_read_int_reg),
    .din5(imgblock_1_5_V_read_int_reg),
    .din6(zext_ln215_fu_376_p1),
    .dout(tmp_34_fu_574_p8)
);

ISPPipeline_accelkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 10 ),
    .din5_WIDTH( 10 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 10 ))
ISPPipeline_accelkbM_U107(
    .din0(imgblock_3_0_V_read_int_reg),
    .din1(imgblock_3_1_V_read_int_reg),
    .din2(imgblock_3_2_V_read_int_reg),
    .din3(imgblock_3_3_V_read_int_reg),
    .din4(imgblock_3_4_V_read_int_reg),
    .din5(imgblock_3_5_V_read_int_reg),
    .din6(zext_ln215_fu_376_p1),
    .dout(tmp_35_fu_596_p8)
);

ISPPipeline_accelkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 10 ),
    .din5_WIDTH( 10 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 10 ))
ISPPipeline_accelkbM_U108(
    .din0(imgblock_2_0_V_read_int_reg),
    .din1(imgblock_2_1_V_read_int_reg),
    .din2(imgblock_2_2_V_read_int_reg),
    .din3(imgblock_2_3_V_read_int_reg),
    .din4(imgblock_2_4_V_read_int_reg),
    .din5(imgblock_2_5_V_read_int_reg),
    .din6(zext_ln215_fu_376_p1),
    .dout(tmp_36_fu_636_p8)
);

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce))) begin
        add_ln114_reg_798 <= add_ln114_fu_680_p2;
        add_ln114_reg_798_pp0_iter1_reg <= add_ln114_reg_798;
        ret_V_7_reg_793 <= ret_V_7_fu_568_p2;
        sub_ln114_reg_803 <= sub_ln114_fu_692_p2;
        t1_reg_788 <= {{ret_V_fu_352_p2[10:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        imgblock_0_0_V_read_int_reg <= imgblock_0_0_V_read;
        imgblock_0_1_V_read_int_reg <= imgblock_0_1_V_read;
        imgblock_0_2_V_read_int_reg <= imgblock_0_2_V_read;
        imgblock_0_3_V_read_int_reg <= imgblock_0_3_V_read;
        imgblock_0_4_V_read_int_reg <= imgblock_0_4_V_read;
        imgblock_0_5_V_read_int_reg <= imgblock_0_5_V_read;
        imgblock_1_0_V_read_int_reg <= imgblock_1_0_V_read;
        imgblock_1_1_V_read_int_reg <= imgblock_1_1_V_read;
        imgblock_1_2_V_read_int_reg <= imgblock_1_2_V_read;
        imgblock_1_3_V_read_int_reg <= imgblock_1_3_V_read;
        imgblock_1_4_V_read_int_reg <= imgblock_1_4_V_read;
        imgblock_1_5_V_read_int_reg <= imgblock_1_5_V_read;
        imgblock_2_0_V_read_int_reg <= imgblock_2_0_V_read;
        imgblock_2_1_V_read_int_reg <= imgblock_2_1_V_read;
        imgblock_2_2_V_read_int_reg <= imgblock_2_2_V_read;
        imgblock_2_3_V_read_int_reg <= imgblock_2_3_V_read;
        imgblock_2_4_V_read_int_reg <= imgblock_2_4_V_read;
        imgblock_2_5_V_read_int_reg <= imgblock_2_5_V_read;
        imgblock_3_0_V_read_int_reg <= imgblock_3_0_V_read;
        imgblock_3_1_V_read_int_reg <= imgblock_3_1_V_read;
        imgblock_3_2_V_read_int_reg <= imgblock_3_2_V_read;
        imgblock_3_3_V_read_int_reg <= imgblock_3_3_V_read;
        imgblock_3_4_V_read_int_reg <= imgblock_3_4_V_read;
        imgblock_3_5_V_read_int_reg <= imgblock_3_5_V_read;
        imgblock_4_0_V_read_int_reg <= imgblock_4_0_V_read;
        imgblock_4_1_V_read_int_reg <= imgblock_4_1_V_read;
        imgblock_4_2_V_read_int_reg <= imgblock_4_2_V_read;
        imgblock_4_3_V_read_int_reg <= imgblock_4_3_V_read;
        imgblock_4_4_V_read_int_reg <= imgblock_4_4_V_read;
        imgblock_4_5_V_read_int_reg <= imgblock_4_5_V_read;
        loop_r_int_reg <= loop_r;
    end
end

assign add_ln114_fu_680_p2 = (zext_ln112_fu_632_p1 + zext_ln113_2_fu_676_p1);

assign add_ln1353_10_fu_558_p2 = (zext_ln215_16_fu_532_p1 + zext_ln1353_18_fu_554_p1);

assign add_ln1353_fu_494_p2 = (zext_ln215_15_fu_468_p1 + zext_ln1353_16_fu_490_p1);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_return = ((icmp_ln116_fu_774_p2[0:0] === 1'b1) ? 14'd0 : select_ln115_fu_766_p3);

assign icmp_ln116_fu_774_p2 = (($signed(res_fu_704_p2) < $signed(15'd32761)) ? 1'b1 : 1'b0);

assign lhs_V_4_fu_398_p1 = tmp_29_fu_380_p8;

assign lhs_V_5_fu_438_p1 = ret_V_5_fu_432_p2;

assign lhs_V_6_fu_592_p1 = tmp_34_fu_574_p8;

assign lhs_V_fu_318_p1 = tmp_s_fu_300_p8;

assign or_ln215_2_fu_368_p3 = {{1'd1}, {loop_r_int_reg}};

assign res_fu_704_p2 = ($signed(zext_ln114_fu_701_p1) + $signed(sext_ln114_fu_698_p1));

assign ret_V_5_fu_432_p2 = (rhs_V_3_fu_428_p1 + lhs_V_4_fu_398_p1);

assign ret_V_6_fu_504_p2 = (zext_ln1353_17_fu_500_p1 + lhs_V_5_fu_438_p1);

assign ret_V_7_fu_568_p2 = (zext_ln1353_19_fu_564_p1 + zext_ln1353_fu_510_p1);

assign ret_V_8_fu_618_p2 = (rhs_V_4_fu_614_p1 + lhs_V_6_fu_592_p1);

assign ret_V_fu_352_p2 = (rhs_V_fu_348_p1 + lhs_V_fu_318_p1);

assign rhs_V_3_fu_428_p1 = tmp_30_fu_410_p8;

assign rhs_V_4_fu_614_p1 = tmp_35_fu_596_p8;

assign rhs_V_fu_348_p1 = tmp_28_fu_330_p8;

assign select_ln115_fu_766_p3 = ((tmp_66_fu_710_p3[0:0] === 1'b1) ? sub_ln115_1_fu_742_p2 : zext_ln115_1_fu_762_p1);

assign select_ln215_2_fu_442_p3 = ((loop_r_int_reg[0:0] === 1'b1) ? 3'd4 : 3'd3);

assign select_ln215_fu_402_p3 = ((loop_r_int_reg[0:0] === 1'b1) ? 3'd2 : 3'd1);

assign sext_ln114_fu_698_p1 = $signed(sub_ln114_reg_803);

assign sext_ln115_1_fu_758_p1 = $signed(trunc_ln115_4_fu_748_p4);

assign sext_ln115_fu_734_p1 = $signed(trunc_ln115_3_fu_724_p4);

assign shl_ln_fu_658_p3 = {{tmp_36_fu_636_p8}, {2'd0}};

assign sub_ln114_fu_692_p2 = (zext_ln108_fu_686_p1 - zext_ln109_fu_689_p1);

assign sub_ln115_1_fu_742_p2 = (14'd0 - zext_ln115_fu_738_p1);

assign sub_ln115_fu_718_p2 = (15'd0 - res_fu_704_p2);

assign t3_fu_624_p3 = {{ret_V_8_fu_618_p2}, {2'd0}};

assign t4_fu_670_p2 = (zext_ln113_1_fu_666_p1 + zext_ln113_fu_654_p1);

assign tmp_28_fu_330_p7 = {{2'd2}, {loop_r_int_reg}};

assign tmp_66_fu_710_p3 = res_fu_704_p2[32'd14];

assign tmp_s_fu_300_p7 = loop_r_int_reg;

assign trunc_ln115_3_fu_724_p4 = {{sub_ln115_fu_718_p2[14:3]}};

assign trunc_ln115_4_fu_748_p4 = {{res_fu_704_p2[14:3]}};

assign zext_ln108_fu_686_p1 = t1_reg_788;

assign zext_ln109_fu_689_p1 = ret_V_7_reg_793;

assign zext_ln112_fu_632_p1 = t3_fu_624_p3;

assign zext_ln113_1_fu_666_p1 = shl_ln_fu_658_p3;

assign zext_ln113_2_fu_676_p1 = t4_fu_670_p2;

assign zext_ln113_fu_654_p1 = tmp_36_fu_636_p8;

assign zext_ln114_fu_701_p1 = add_ln114_reg_798_pp0_iter1_reg;

assign zext_ln115_1_fu_762_p1 = $unsigned(sext_ln115_1_fu_758_p1);

assign zext_ln115_fu_738_p1 = $unsigned(sext_ln115_fu_734_p1);

assign zext_ln1353_16_fu_490_p1 = tmp_32_fu_472_p8;

assign zext_ln1353_17_fu_500_p1 = add_ln1353_fu_494_p2;

assign zext_ln1353_18_fu_554_p1 = tmp_33_fu_536_p8;

assign zext_ln1353_19_fu_564_p1 = add_ln1353_10_fu_558_p2;

assign zext_ln1353_fu_510_p1 = ret_V_6_fu_504_p2;

assign zext_ln215_15_fu_468_p1 = tmp_31_fu_450_p8;

assign zext_ln215_16_fu_532_p1 = tmp_fu_514_p8;

assign zext_ln215_fu_376_p1 = or_ln215_2_fu_368_p3;

endmodule //rgb_bgr_kernel
