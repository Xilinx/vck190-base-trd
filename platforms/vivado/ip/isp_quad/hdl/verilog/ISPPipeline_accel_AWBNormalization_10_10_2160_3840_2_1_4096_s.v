// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ISPPipeline_accel_AWBNormalization_10_10_2160_3840_2_1_4096_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        impop_41_dout,
        impop_41_empty_n,
        impop_41_read,
        p_read,
        p_read1,
        ltm_in_4199_din,
        ltm_in_4199_full_n,
        ltm_in_4199_write,
        histogram_address0,
        histogram_ce0,
        histogram_q0,
        histogram1_address0,
        histogram1_ce0,
        histogram1_q0,
        histogram2_address0,
        histogram2_ce0,
        histogram2_q0,
        thresh
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [95:0] impop_41_dout;
input   impop_41_empty_n;
output   impop_41_read;
input  [11:0] p_read;
input  [11:0] p_read1;
output  [95:0] ltm_in_4199_din;
input   ltm_in_4199_full_n;
output   ltm_in_4199_write;
output  [11:0] histogram_address0;
output   histogram_ce0;
input  [31:0] histogram_q0;
output  [11:0] histogram1_address0;
output   histogram1_ce0;
input  [31:0] histogram1_q0;
output  [11:0] histogram2_address0;
output   histogram2_ce0;
input  [31:0] histogram2_q0;
input  [31:0] thresh;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg impop_41_read;
reg ltm_in_4199_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_start;
wire    grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_done;
wire    grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_idle;
wire    grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_ready;
wire    grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_impop_41_read;
wire   [95:0] grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ltm_in_4199_din;
wire    grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ltm_in_4199_write;
wire   [11:0] grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_hist_address0;
wire    grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_hist_ce0;
wire   [11:0] grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_hist1_address0;
wire    grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_hist1_ce0;
wire   [11:0] grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_hist2_address0;
wire    grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_hist2_ce0;
reg    grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_start_reg;
reg    ap_block_state1_ignore_call5;
wire    ap_CS_fsm_state2;
reg    ap_block_state1;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_start_reg = 1'b0;
end

ISPPipeline_accel_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_start),
    .ap_done(grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_done),
    .ap_idle(grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_idle),
    .ap_ready(grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_ready),
    .impop_41_dout(impop_41_dout),
    .impop_41_empty_n(impop_41_empty_n),
    .impop_41_read(grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_impop_41_read),
    .p_read(p_read),
    .p_read1(p_read1),
    .ltm_in_4199_din(grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ltm_in_4199_din),
    .ltm_in_4199_full_n(ltm_in_4199_full_n),
    .ltm_in_4199_write(grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ltm_in_4199_write),
    .hist_address0(grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_hist_address0),
    .hist_ce0(grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_hist_ce0),
    .hist_q0(histogram_q0),
    .hist1_address0(grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_hist1_address0),
    .hist1_ce0(grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_hist1_ce0),
    .hist1_q0(histogram1_q0),
    .hist2_address0(grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_hist2_address0),
    .hist2_ce0(grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_hist2_ce0),
    .hist2_q0(histogram2_q0),
    .p(thresh)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_start_reg <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_start_reg <= 1'b1;
        end else if ((grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_ready == 1'b1)) begin
            grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        impop_41_read = grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_impop_41_read;
    end else begin
        impop_41_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ltm_in_4199_write = grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ltm_in_4199_write;
    end else begin
        ltm_in_4199_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call5 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_start = grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_start_reg;

assign histogram1_address0 = grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_hist1_address0;

assign histogram1_ce0 = grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_hist1_ce0;

assign histogram2_address0 = grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_hist2_address0;

assign histogram2_ce0 = grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_hist2_ce0;

assign histogram_address0 = grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_hist_address0;

assign histogram_ce0 = grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_hist_ce0;

assign ltm_in_4199_din = grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ltm_in_4199_din;

endmodule //ISPPipeline_accel_AWBNormalization_10_10_2160_3840_2_1_4096_s
