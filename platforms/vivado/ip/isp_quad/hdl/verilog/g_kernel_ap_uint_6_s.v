// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.2
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module g_kernel_ap_uint_6_s (
        ap_clk,
        ap_rst,
        imgblock_0_0_V_read,
        imgblock_0_1_V_read,
        imgblock_0_2_V_read,
        imgblock_0_3_V_read,
        imgblock_0_4_V_read,
        imgblock_0_5_V_read,
        imgblock_1_0_V_read,
        imgblock_1_1_V_read,
        imgblock_1_2_V_read,
        imgblock_1_3_V_read,
        imgblock_1_4_V_read,
        imgblock_1_5_V_read,
        imgblock_2_0_V_read,
        imgblock_2_1_V_read,
        imgblock_2_2_V_read,
        imgblock_2_3_V_read,
        imgblock_2_4_V_read,
        imgblock_2_5_V_read,
        imgblock_3_0_V_read,
        imgblock_3_1_V_read,
        imgblock_3_2_V_read,
        imgblock_3_3_V_read,
        imgblock_3_4_V_read,
        imgblock_3_5_V_read,
        imgblock_4_0_V_read,
        imgblock_4_1_V_read,
        imgblock_4_2_V_read,
        imgblock_4_3_V_read,
        imgblock_4_4_V_read,
        imgblock_4_5_V_read,
        loop_r,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [9:0] imgblock_0_0_V_read;
input  [9:0] imgblock_0_1_V_read;
input  [9:0] imgblock_0_2_V_read;
input  [9:0] imgblock_0_3_V_read;
input  [9:0] imgblock_0_4_V_read;
input  [9:0] imgblock_0_5_V_read;
input  [9:0] imgblock_1_0_V_read;
input  [9:0] imgblock_1_1_V_read;
input  [9:0] imgblock_1_2_V_read;
input  [9:0] imgblock_1_3_V_read;
input  [9:0] imgblock_1_4_V_read;
input  [9:0] imgblock_1_5_V_read;
input  [9:0] imgblock_2_0_V_read;
input  [9:0] imgblock_2_1_V_read;
input  [9:0] imgblock_2_2_V_read;
input  [9:0] imgblock_2_3_V_read;
input  [9:0] imgblock_2_4_V_read;
input  [9:0] imgblock_2_5_V_read;
input  [9:0] imgblock_3_0_V_read;
input  [9:0] imgblock_3_1_V_read;
input  [9:0] imgblock_3_2_V_read;
input  [9:0] imgblock_3_3_V_read;
input  [9:0] imgblock_3_4_V_read;
input  [9:0] imgblock_3_5_V_read;
input  [9:0] imgblock_4_0_V_read;
input  [9:0] imgblock_4_1_V_read;
input  [9:0] imgblock_4_2_V_read;
input  [9:0] imgblock_4_3_V_read;
input  [9:0] imgblock_4_4_V_read;
input  [9:0] imgblock_4_5_V_read;
input  [0:0] loop_r;
output  [13:0] ap_return;
input   ap_ce;

wire   [11:0] ret_V_12_fu_426_p2;
reg   [11:0] ret_V_12_reg_708;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [11:0] ret_V_15_fu_556_p2;
reg   [11:0] ret_V_15_reg_713;
wire   [9:0] tmp_54_fu_562_p8;
reg   [9:0] tmp_54_reg_718;
reg   [9:0] tmp_54_reg_718_pp0_iter1_reg;
wire   [13:0] add_ln63_fu_604_p2;
reg   [13:0] add_ln63_reg_723;
wire    ap_block_pp0_stage0;
wire   [1:0] or_ln_fu_298_p3;
wire   [2:0] zext_ln215_fu_306_p1;
wire   [9:0] tmp_s_fu_310_p8;
wire   [2:0] tmp_48_fu_332_p7;
wire   [9:0] tmp_48_fu_332_p8;
wire   [10:0] rhs_V_fu_350_p1;
wire   [10:0] lhs_V_fu_328_p1;
wire   [10:0] ret_V_fu_354_p2;
wire   [2:0] tmp_49_fu_372_p7;
wire   [9:0] tmp_49_fu_372_p8;
wire   [9:0] tmp_50_fu_394_p8;
wire   [10:0] zext_ln215_30_fu_390_p1;
wire   [10:0] zext_ln1353_23_fu_412_p1;
wire   [10:0] add_ln1353_fu_416_p2;
wire   [11:0] zext_ln1353_24_fu_422_p1;
wire   [11:0] lhs_V_10_fu_360_p1;
wire   [9:0] tmp_fu_432_p8;
wire   [2:0] tmp_51_fu_462_p7;
wire   [9:0] tmp_51_fu_462_p8;
wire   [10:0] rhs_V_6_fu_480_p1;
wire   [10:0] lhs_V_11_fu_450_p1;
wire   [10:0] ret_V_14_fu_484_p2;
wire   [2:0] tmp_52_fu_502_p7;
wire   [9:0] tmp_52_fu_502_p8;
wire   [9:0] tmp_53_fu_524_p8;
wire   [10:0] zext_ln215_34_fu_520_p1;
wire   [10:0] zext_ln1353_25_fu_542_p1;
wire   [10:0] add_ln1353_20_fu_546_p2;
wire   [11:0] zext_ln1353_26_fu_552_p1;
wire   [11:0] lhs_V_12_fu_490_p1;
wire   [12:0] zext_ln1353_fu_580_p1;
wire   [12:0] ret_V_13_fu_583_p2;
wire   [12:0] shl_ln_fu_593_p3;
wire   [13:0] zext_ln63_fu_600_p1;
wire  signed [13:0] sext_ln1354_fu_589_p1;
wire   [11:0] shl_ln63_1_fu_610_p3;
wire  signed [14:0] sext_ln63_fu_621_p1;
wire   [14:0] zext_ln63_1_fu_617_p1;
wire   [14:0] res_fu_624_p2;
wire   [14:0] sub_ln64_fu_638_p2;
wire   [11:0] trunc_ln64_3_fu_644_p4;
wire  signed [12:0] sext_ln64_fu_654_p1;
wire   [13:0] zext_ln64_fu_658_p1;
wire   [11:0] trunc_ln64_4_fu_668_p4;
wire  signed [12:0] sext_ln64_1_fu_678_p1;
wire   [0:0] tmp_70_fu_630_p3;
wire   [13:0] sub_ln64_1_fu_662_p2;
wire   [13:0] zext_ln64_1_fu_682_p1;
wire   [0:0] icmp_ln65_fu_694_p2;
wire   [13:0] select_ln64_fu_686_p3;
reg   [9:0] imgblock_0_0_V_read_int_reg;
reg   [9:0] imgblock_0_1_V_read_int_reg;
reg   [9:0] imgblock_0_2_V_read_int_reg;
reg   [9:0] imgblock_0_3_V_read_int_reg;
reg   [9:0] imgblock_0_4_V_read_int_reg;
reg   [9:0] imgblock_0_5_V_read_int_reg;
reg   [9:0] imgblock_1_0_V_read_int_reg;
reg   [9:0] imgblock_1_1_V_read_int_reg;
reg   [9:0] imgblock_1_2_V_read_int_reg;
reg   [9:0] imgblock_1_3_V_read_int_reg;
reg   [9:0] imgblock_1_4_V_read_int_reg;
reg   [9:0] imgblock_1_5_V_read_int_reg;
reg   [9:0] imgblock_2_0_V_read_int_reg;
reg   [9:0] imgblock_2_1_V_read_int_reg;
reg   [9:0] imgblock_2_2_V_read_int_reg;
reg   [9:0] imgblock_2_3_V_read_int_reg;
reg   [9:0] imgblock_2_4_V_read_int_reg;
reg   [9:0] imgblock_2_5_V_read_int_reg;
reg   [9:0] imgblock_3_0_V_read_int_reg;
reg   [9:0] imgblock_3_1_V_read_int_reg;
reg   [9:0] imgblock_3_2_V_read_int_reg;
reg   [9:0] imgblock_3_3_V_read_int_reg;
reg   [9:0] imgblock_3_4_V_read_int_reg;
reg   [9:0] imgblock_3_5_V_read_int_reg;
reg   [9:0] imgblock_4_0_V_read_int_reg;
reg   [9:0] imgblock_4_1_V_read_int_reg;
reg   [9:0] imgblock_4_2_V_read_int_reg;
reg   [9:0] imgblock_4_3_V_read_int_reg;
reg   [9:0] imgblock_4_4_V_read_int_reg;
reg   [9:0] imgblock_4_5_V_read_int_reg;
reg   [0:0] loop_r_int_reg;

ISPPipeline_accelkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 10 ),
    .din5_WIDTH( 10 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 10 ))
ISPPipeline_accelkbM_U183(
    .din0(imgblock_0_0_V_read_int_reg),
    .din1(imgblock_0_1_V_read_int_reg),
    .din2(imgblock_0_2_V_read_int_reg),
    .din3(imgblock_0_3_V_read_int_reg),
    .din4(imgblock_0_4_V_read_int_reg),
    .din5(imgblock_0_5_V_read_int_reg),
    .din6(zext_ln215_fu_306_p1),
    .dout(tmp_s_fu_310_p8)
);

ISPPipeline_accelkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 10 ),
    .din5_WIDTH( 10 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 10 ))
ISPPipeline_accelkbM_U184(
    .din0(imgblock_2_0_V_read_int_reg),
    .din1(imgblock_2_1_V_read_int_reg),
    .din2(imgblock_2_2_V_read_int_reg),
    .din3(imgblock_2_3_V_read_int_reg),
    .din4(imgblock_2_4_V_read_int_reg),
    .din5(imgblock_2_5_V_read_int_reg),
    .din6(tmp_48_fu_332_p7),
    .dout(tmp_48_fu_332_p8)
);

ISPPipeline_accelkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 10 ),
    .din5_WIDTH( 10 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 10 ))
ISPPipeline_accelkbM_U185(
    .din0(imgblock_2_0_V_read_int_reg),
    .din1(imgblock_2_1_V_read_int_reg),
    .din2(imgblock_2_2_V_read_int_reg),
    .din3(imgblock_2_3_V_read_int_reg),
    .din4(imgblock_2_4_V_read_int_reg),
    .din5(imgblock_2_5_V_read_int_reg),
    .din6(tmp_49_fu_372_p7),
    .dout(tmp_49_fu_372_p8)
);

ISPPipeline_accelkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 10 ),
    .din5_WIDTH( 10 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 10 ))
ISPPipeline_accelkbM_U186(
    .din0(imgblock_4_0_V_read_int_reg),
    .din1(imgblock_4_1_V_read_int_reg),
    .din2(imgblock_4_2_V_read_int_reg),
    .din3(imgblock_4_3_V_read_int_reg),
    .din4(imgblock_4_4_V_read_int_reg),
    .din5(imgblock_4_5_V_read_int_reg),
    .din6(zext_ln215_fu_306_p1),
    .dout(tmp_50_fu_394_p8)
);

ISPPipeline_accelkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 10 ),
    .din5_WIDTH( 10 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 10 ))
ISPPipeline_accelkbM_U187(
    .din0(imgblock_1_0_V_read_int_reg),
    .din1(imgblock_1_1_V_read_int_reg),
    .din2(imgblock_1_2_V_read_int_reg),
    .din3(imgblock_1_3_V_read_int_reg),
    .din4(imgblock_1_4_V_read_int_reg),
    .din5(imgblock_1_5_V_read_int_reg),
    .din6(zext_ln215_fu_306_p1),
    .dout(tmp_fu_432_p8)
);

ISPPipeline_accelkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 10 ),
    .din5_WIDTH( 10 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 10 ))
ISPPipeline_accelkbM_U188(
    .din0(imgblock_2_0_V_read_int_reg),
    .din1(imgblock_2_1_V_read_int_reg),
    .din2(imgblock_2_2_V_read_int_reg),
    .din3(imgblock_2_3_V_read_int_reg),
    .din4(imgblock_2_4_V_read_int_reg),
    .din5(imgblock_2_5_V_read_int_reg),
    .din6(tmp_51_fu_462_p7),
    .dout(tmp_51_fu_462_p8)
);

ISPPipeline_accelkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 10 ),
    .din5_WIDTH( 10 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 10 ))
ISPPipeline_accelkbM_U189(
    .din0(imgblock_2_0_V_read_int_reg),
    .din1(imgblock_2_1_V_read_int_reg),
    .din2(imgblock_2_2_V_read_int_reg),
    .din3(imgblock_2_3_V_read_int_reg),
    .din4(imgblock_2_4_V_read_int_reg),
    .din5(imgblock_2_5_V_read_int_reg),
    .din6(tmp_52_fu_502_p7),
    .dout(tmp_52_fu_502_p8)
);

ISPPipeline_accelkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 10 ),
    .din5_WIDTH( 10 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 10 ))
ISPPipeline_accelkbM_U190(
    .din0(imgblock_3_0_V_read_int_reg),
    .din1(imgblock_3_1_V_read_int_reg),
    .din2(imgblock_3_2_V_read_int_reg),
    .din3(imgblock_3_3_V_read_int_reg),
    .din4(imgblock_3_4_V_read_int_reg),
    .din5(imgblock_3_5_V_read_int_reg),
    .din6(zext_ln215_fu_306_p1),
    .dout(tmp_53_fu_524_p8)
);

ISPPipeline_accelkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 10 ),
    .din5_WIDTH( 10 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 10 ))
ISPPipeline_accelkbM_U191(
    .din0(imgblock_2_0_V_read_int_reg),
    .din1(imgblock_2_1_V_read_int_reg),
    .din2(imgblock_2_2_V_read_int_reg),
    .din3(imgblock_2_3_V_read_int_reg),
    .din4(imgblock_2_4_V_read_int_reg),
    .din5(imgblock_2_5_V_read_int_reg),
    .din6(zext_ln215_fu_306_p1),
    .dout(tmp_54_fu_562_p8)
);

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce))) begin
        add_ln63_reg_723 <= add_ln63_fu_604_p2;
        ret_V_12_reg_708 <= ret_V_12_fu_426_p2;
        ret_V_15_reg_713 <= ret_V_15_fu_556_p2;
        tmp_54_reg_718 <= tmp_54_fu_562_p8;
        tmp_54_reg_718_pp0_iter1_reg <= tmp_54_reg_718;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        imgblock_0_0_V_read_int_reg <= imgblock_0_0_V_read;
        imgblock_0_1_V_read_int_reg <= imgblock_0_1_V_read;
        imgblock_0_2_V_read_int_reg <= imgblock_0_2_V_read;
        imgblock_0_3_V_read_int_reg <= imgblock_0_3_V_read;
        imgblock_0_4_V_read_int_reg <= imgblock_0_4_V_read;
        imgblock_0_5_V_read_int_reg <= imgblock_0_5_V_read;
        imgblock_1_0_V_read_int_reg <= imgblock_1_0_V_read;
        imgblock_1_1_V_read_int_reg <= imgblock_1_1_V_read;
        imgblock_1_2_V_read_int_reg <= imgblock_1_2_V_read;
        imgblock_1_3_V_read_int_reg <= imgblock_1_3_V_read;
        imgblock_1_4_V_read_int_reg <= imgblock_1_4_V_read;
        imgblock_1_5_V_read_int_reg <= imgblock_1_5_V_read;
        imgblock_2_0_V_read_int_reg <= imgblock_2_0_V_read;
        imgblock_2_1_V_read_int_reg <= imgblock_2_1_V_read;
        imgblock_2_2_V_read_int_reg <= imgblock_2_2_V_read;
        imgblock_2_3_V_read_int_reg <= imgblock_2_3_V_read;
        imgblock_2_4_V_read_int_reg <= imgblock_2_4_V_read;
        imgblock_2_5_V_read_int_reg <= imgblock_2_5_V_read;
        imgblock_3_0_V_read_int_reg <= imgblock_3_0_V_read;
        imgblock_3_1_V_read_int_reg <= imgblock_3_1_V_read;
        imgblock_3_2_V_read_int_reg <= imgblock_3_2_V_read;
        imgblock_3_3_V_read_int_reg <= imgblock_3_3_V_read;
        imgblock_3_4_V_read_int_reg <= imgblock_3_4_V_read;
        imgblock_3_5_V_read_int_reg <= imgblock_3_5_V_read;
        imgblock_4_0_V_read_int_reg <= imgblock_4_0_V_read;
        imgblock_4_1_V_read_int_reg <= imgblock_4_1_V_read;
        imgblock_4_2_V_read_int_reg <= imgblock_4_2_V_read;
        imgblock_4_3_V_read_int_reg <= imgblock_4_3_V_read;
        imgblock_4_4_V_read_int_reg <= imgblock_4_4_V_read;
        imgblock_4_5_V_read_int_reg <= imgblock_4_5_V_read;
        loop_r_int_reg <= loop_r;
    end
end

assign add_ln1353_20_fu_546_p2 = (zext_ln215_34_fu_520_p1 + zext_ln1353_25_fu_542_p1);

assign add_ln1353_fu_416_p2 = (zext_ln215_30_fu_390_p1 + zext_ln1353_23_fu_412_p1);

assign add_ln63_fu_604_p2 = ($signed(zext_ln63_fu_600_p1) + $signed(sext_ln1354_fu_589_p1));

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_return = ((icmp_ln65_fu_694_p2[0:0] === 1'b1) ? 14'd0 : select_ln64_fu_686_p3);

assign icmp_ln65_fu_694_p2 = (($signed(res_fu_624_p2) < $signed(15'd32761)) ? 1'b1 : 1'b0);

assign lhs_V_10_fu_360_p1 = ret_V_fu_354_p2;

assign lhs_V_11_fu_450_p1 = tmp_fu_432_p8;

assign lhs_V_12_fu_490_p1 = ret_V_14_fu_484_p2;

assign lhs_V_fu_328_p1 = tmp_s_fu_310_p8;

assign or_ln_fu_298_p3 = {{1'd1}, {loop_r_int_reg}};

assign res_fu_624_p2 = ($signed(sext_ln63_fu_621_p1) + $signed(zext_ln63_1_fu_617_p1));

assign ret_V_12_fu_426_p2 = (zext_ln1353_24_fu_422_p1 + lhs_V_10_fu_360_p1);

assign ret_V_13_fu_583_p2 = (13'd0 - zext_ln1353_fu_580_p1);

assign ret_V_14_fu_484_p2 = (rhs_V_6_fu_480_p1 + lhs_V_11_fu_450_p1);

assign ret_V_15_fu_556_p2 = (zext_ln1353_26_fu_552_p1 + lhs_V_12_fu_490_p1);

assign ret_V_fu_354_p2 = (rhs_V_fu_350_p1 + lhs_V_fu_328_p1);

assign rhs_V_6_fu_480_p1 = tmp_51_fu_462_p8;

assign rhs_V_fu_350_p1 = tmp_48_fu_332_p8;

assign select_ln64_fu_686_p3 = ((tmp_70_fu_630_p3[0:0] === 1'b1) ? sub_ln64_1_fu_662_p2 : zext_ln64_1_fu_682_p1);

assign sext_ln1354_fu_589_p1 = $signed(ret_V_13_fu_583_p2);

assign sext_ln63_fu_621_p1 = $signed(add_ln63_reg_723);

assign sext_ln64_1_fu_678_p1 = $signed(trunc_ln64_4_fu_668_p4);

assign sext_ln64_fu_654_p1 = $signed(trunc_ln64_3_fu_644_p4);

assign shl_ln63_1_fu_610_p3 = {{tmp_54_reg_718_pp0_iter1_reg}, {2'd0}};

assign shl_ln_fu_593_p3 = {{ret_V_15_reg_713}, {1'd0}};

assign sub_ln64_1_fu_662_p2 = (14'd0 - zext_ln64_fu_658_p1);

assign sub_ln64_fu_638_p2 = (15'd0 - res_fu_624_p2);

assign tmp_48_fu_332_p7 = loop_r_int_reg;

assign tmp_49_fu_372_p7 = {{2'd2}, {loop_r_int_reg}};

assign tmp_51_fu_462_p7 = ((loop_r_int_reg[0:0] === 1'b1) ? 3'd2 : 3'd1);

assign tmp_52_fu_502_p7 = ((loop_r_int_reg[0:0] === 1'b1) ? 3'd4 : 3'd3);

assign tmp_70_fu_630_p3 = res_fu_624_p2[32'd14];

assign trunc_ln64_3_fu_644_p4 = {{sub_ln64_fu_638_p2[14:3]}};

assign trunc_ln64_4_fu_668_p4 = {{res_fu_624_p2[14:3]}};

assign zext_ln1353_23_fu_412_p1 = tmp_50_fu_394_p8;

assign zext_ln1353_24_fu_422_p1 = add_ln1353_fu_416_p2;

assign zext_ln1353_25_fu_542_p1 = tmp_53_fu_524_p8;

assign zext_ln1353_26_fu_552_p1 = add_ln1353_20_fu_546_p2;

assign zext_ln1353_fu_580_p1 = ret_V_12_reg_708;

assign zext_ln215_30_fu_390_p1 = tmp_49_fu_372_p8;

assign zext_ln215_34_fu_520_p1 = tmp_52_fu_502_p8;

assign zext_ln215_fu_306_p1 = or_ln_fu_298_p3;

assign zext_ln63_1_fu_617_p1 = shl_ln63_1_fu_610_p3;

assign zext_ln63_fu_600_p1 = shl_ln_fu_593_p3;

assign zext_ln64_1_fu_682_p1 = $unsigned(sext_ln64_1_fu_678_p1);

assign zext_ln64_fu_658_p1 = $unsigned(sext_ln64_fu_654_p1);

endmodule //g_kernel_ap_uint_6_s
