// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.2
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rb_kernel (
        ap_clk,
        ap_rst,
        imgblock_0_0_V_read,
        imgblock_0_1_V_read,
        imgblock_0_2_V_read,
        imgblock_0_3_V_read,
        imgblock_0_4_V_read,
        imgblock_0_5_V_read,
        imgblock_1_0_V_read,
        imgblock_1_1_V_read,
        imgblock_1_2_V_read,
        imgblock_1_3_V_read,
        imgblock_1_4_V_read,
        imgblock_1_5_V_read,
        imgblock_2_0_V_read,
        imgblock_2_1_V_read,
        imgblock_2_2_V_read,
        imgblock_2_3_V_read,
        imgblock_2_4_V_read,
        imgblock_2_5_V_read,
        imgblock_3_0_V_read,
        imgblock_3_1_V_read,
        imgblock_3_2_V_read,
        imgblock_3_3_V_read,
        imgblock_3_4_V_read,
        imgblock_3_5_V_read,
        imgblock_4_0_V_read,
        imgblock_4_1_V_read,
        imgblock_4_2_V_read,
        imgblock_4_3_V_read,
        imgblock_4_4_V_read,
        imgblock_4_5_V_read,
        loop_r,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [9:0] imgblock_0_0_V_read;
input  [9:0] imgblock_0_1_V_read;
input  [9:0] imgblock_0_2_V_read;
input  [9:0] imgblock_0_3_V_read;
input  [9:0] imgblock_0_4_V_read;
input  [9:0] imgblock_0_5_V_read;
input  [9:0] imgblock_1_0_V_read;
input  [9:0] imgblock_1_1_V_read;
input  [9:0] imgblock_1_2_V_read;
input  [9:0] imgblock_1_3_V_read;
input  [9:0] imgblock_1_4_V_read;
input  [9:0] imgblock_1_5_V_read;
input  [9:0] imgblock_2_0_V_read;
input  [9:0] imgblock_2_1_V_read;
input  [9:0] imgblock_2_2_V_read;
input  [9:0] imgblock_2_3_V_read;
input  [9:0] imgblock_2_4_V_read;
input  [9:0] imgblock_2_5_V_read;
input  [9:0] imgblock_3_0_V_read;
input  [9:0] imgblock_3_1_V_read;
input  [9:0] imgblock_3_2_V_read;
input  [9:0] imgblock_3_3_V_read;
input  [9:0] imgblock_3_4_V_read;
input  [9:0] imgblock_3_5_V_read;
input  [9:0] imgblock_4_0_V_read;
input  [9:0] imgblock_4_1_V_read;
input  [9:0] imgblock_4_2_V_read;
input  [9:0] imgblock_4_3_V_read;
input  [9:0] imgblock_4_4_V_read;
input  [9:0] imgblock_4_5_V_read;
input  [0:0] loop_r;
output  [13:0] ap_return;
input   ap_ce;

wire   [11:0] ret_V_9_fu_436_p2;
reg   [11:0] ret_V_9_reg_764;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [11:0] ret_V_11_fu_566_p2;
reg   [11:0] ret_V_11_reg_770;
wire   [9:0] tmp_43_fu_572_p8;
reg   [9:0] tmp_43_reg_775;
wire  signed [13:0] t3_fu_661_p2;
reg  signed [13:0] t3_reg_781;
wire   [15:0] trunc_ln79_fu_677_p1;
reg   [15:0] trunc_ln79_reg_786;
wire   [0:0] icmp_ln81_fu_687_p2;
reg   [0:0] icmp_ln81_reg_791;
wire    ap_block_pp0_stage0;
wire   [1:0] or_ln_fu_308_p3;
wire   [2:0] zext_ln215_fu_316_p1;
wire   [9:0] tmp_s_fu_320_p8;
wire   [2:0] tmp_37_fu_342_p7;
wire   [9:0] tmp_37_fu_342_p8;
wire   [10:0] rhs_V_fu_360_p1;
wire   [10:0] lhs_V_fu_338_p1;
wire   [10:0] ret_V_fu_364_p2;
wire   [2:0] tmp_38_fu_382_p7;
wire   [9:0] tmp_38_fu_382_p8;
wire   [9:0] tmp_39_fu_404_p8;
wire   [10:0] zext_ln215_22_fu_400_p1;
wire   [10:0] zext_ln1353_fu_422_p1;
wire   [10:0] add_ln1353_fu_426_p2;
wire   [11:0] zext_ln1353_20_fu_432_p1;
wire   [11:0] lhs_V_7_fu_370_p1;
wire   [2:0] select_ln215_fu_442_p3;
wire   [9:0] tmp_fu_450_p8;
wire   [2:0] select_ln215_3_fu_472_p3;
wire   [9:0] tmp_40_fu_480_p8;
wire   [10:0] rhs_V_5_fu_498_p1;
wire   [10:0] lhs_V_8_fu_468_p1;
wire   [10:0] ret_V_10_fu_502_p2;
wire   [9:0] tmp_41_fu_512_p8;
wire   [9:0] tmp_42_fu_534_p8;
wire   [10:0] zext_ln215_26_fu_530_p1;
wire   [10:0] zext_ln1353_21_fu_552_p1;
wire   [10:0] add_ln1353_16_fu_556_p2;
wire   [11:0] zext_ln1353_22_fu_562_p1;
wire   [11:0] lhs_V_9_fu_508_p1;
wire   [13:0] shl_ln_fu_593_p3;
wire   [14:0] zext_ln75_fu_600_p1;
wire   [14:0] zext_ln74_1_fu_590_p1;
wire   [14:0] sub_ln75_fu_604_p2;
wire   [13:0] trunc_ln_fu_610_p4;
wire  signed [30:0] sext_ln75_fu_620_p1;
wire   [12:0] t2_fu_628_p3;
wire   [12:0] shl_ln1_fu_639_p3;
wire   [10:0] shl_ln78_1_fu_650_p3;
wire   [13:0] zext_ln78_fu_646_p1;
wire   [13:0] zext_ln78_1_fu_657_p1;
wire   [31:0] zext_ln77_fu_635_p1;
wire   [31:0] t1_fu_624_p1;
wire   [31:0] sub_ln79_fu_671_p2;
wire  signed [31:0] sext_ln78_fu_667_p1;
wire   [31:0] res_fu_681_p2;
wire  signed [15:0] sext_ln79_fu_693_p1;
wire   [15:0] add_ln80_fu_696_p2;
wire   [15:0] sub_ln80_fu_709_p2;
wire   [12:0] tmp_18_fu_715_p4;
wire   [13:0] zext_ln80_fu_725_p1;
wire   [12:0] tmp_19_fu_735_p4;
wire   [0:0] tmp_67_fu_701_p3;
wire   [13:0] sub_ln80_1_fu_729_p2;
wire   [13:0] zext_ln80_1_fu_745_p1;
wire   [13:0] select_ln80_fu_749_p3;
reg   [9:0] imgblock_0_0_V_read_int_reg;
reg   [9:0] imgblock_0_1_V_read_int_reg;
reg   [9:0] imgblock_0_2_V_read_int_reg;
reg   [9:0] imgblock_0_3_V_read_int_reg;
reg   [9:0] imgblock_0_4_V_read_int_reg;
reg   [9:0] imgblock_0_5_V_read_int_reg;
reg   [9:0] imgblock_1_0_V_read_int_reg;
reg   [9:0] imgblock_1_1_V_read_int_reg;
reg   [9:0] imgblock_1_2_V_read_int_reg;
reg   [9:0] imgblock_1_3_V_read_int_reg;
reg   [9:0] imgblock_1_4_V_read_int_reg;
reg   [9:0] imgblock_1_5_V_read_int_reg;
reg   [9:0] imgblock_2_0_V_read_int_reg;
reg   [9:0] imgblock_2_1_V_read_int_reg;
reg   [9:0] imgblock_2_2_V_read_int_reg;
reg   [9:0] imgblock_2_3_V_read_int_reg;
reg   [9:0] imgblock_2_4_V_read_int_reg;
reg   [9:0] imgblock_2_5_V_read_int_reg;
reg   [9:0] imgblock_3_0_V_read_int_reg;
reg   [9:0] imgblock_3_1_V_read_int_reg;
reg   [9:0] imgblock_3_2_V_read_int_reg;
reg   [9:0] imgblock_3_3_V_read_int_reg;
reg   [9:0] imgblock_3_4_V_read_int_reg;
reg   [9:0] imgblock_3_5_V_read_int_reg;
reg   [9:0] imgblock_4_0_V_read_int_reg;
reg   [9:0] imgblock_4_1_V_read_int_reg;
reg   [9:0] imgblock_4_2_V_read_int_reg;
reg   [9:0] imgblock_4_3_V_read_int_reg;
reg   [9:0] imgblock_4_4_V_read_int_reg;
reg   [9:0] imgblock_4_5_V_read_int_reg;
reg   [0:0] loop_r_int_reg;

ISPPipeline_accelkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 10 ),
    .din5_WIDTH( 10 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 10 ))
ISPPipeline_accelkbM_U223(
    .din0(imgblock_0_0_V_read_int_reg),
    .din1(imgblock_0_1_V_read_int_reg),
    .din2(imgblock_0_2_V_read_int_reg),
    .din3(imgblock_0_3_V_read_int_reg),
    .din4(imgblock_0_4_V_read_int_reg),
    .din5(imgblock_0_5_V_read_int_reg),
    .din6(zext_ln215_fu_316_p1),
    .dout(tmp_s_fu_320_p8)
);

ISPPipeline_accelkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 10 ),
    .din5_WIDTH( 10 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 10 ))
ISPPipeline_accelkbM_U224(
    .din0(imgblock_2_0_V_read_int_reg),
    .din1(imgblock_2_1_V_read_int_reg),
    .din2(imgblock_2_2_V_read_int_reg),
    .din3(imgblock_2_3_V_read_int_reg),
    .din4(imgblock_2_4_V_read_int_reg),
    .din5(imgblock_2_5_V_read_int_reg),
    .din6(tmp_37_fu_342_p7),
    .dout(tmp_37_fu_342_p8)
);

ISPPipeline_accelkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 10 ),
    .din5_WIDTH( 10 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 10 ))
ISPPipeline_accelkbM_U225(
    .din0(imgblock_2_0_V_read_int_reg),
    .din1(imgblock_2_1_V_read_int_reg),
    .din2(imgblock_2_2_V_read_int_reg),
    .din3(imgblock_2_3_V_read_int_reg),
    .din4(imgblock_2_4_V_read_int_reg),
    .din5(imgblock_2_5_V_read_int_reg),
    .din6(tmp_38_fu_382_p7),
    .dout(tmp_38_fu_382_p8)
);

ISPPipeline_accelkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 10 ),
    .din5_WIDTH( 10 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 10 ))
ISPPipeline_accelkbM_U226(
    .din0(imgblock_4_0_V_read_int_reg),
    .din1(imgblock_4_1_V_read_int_reg),
    .din2(imgblock_4_2_V_read_int_reg),
    .din3(imgblock_4_3_V_read_int_reg),
    .din4(imgblock_4_4_V_read_int_reg),
    .din5(imgblock_4_5_V_read_int_reg),
    .din6(zext_ln215_fu_316_p1),
    .dout(tmp_39_fu_404_p8)
);

ISPPipeline_accelkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 10 ),
    .din5_WIDTH( 10 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 10 ))
ISPPipeline_accelkbM_U227(
    .din0(imgblock_1_0_V_read_int_reg),
    .din1(imgblock_1_1_V_read_int_reg),
    .din2(imgblock_1_2_V_read_int_reg),
    .din3(imgblock_1_3_V_read_int_reg),
    .din4(imgblock_1_4_V_read_int_reg),
    .din5(imgblock_1_5_V_read_int_reg),
    .din6(select_ln215_fu_442_p3),
    .dout(tmp_fu_450_p8)
);

ISPPipeline_accelkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 10 ),
    .din5_WIDTH( 10 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 10 ))
ISPPipeline_accelkbM_U228(
    .din0(imgblock_1_0_V_read_int_reg),
    .din1(imgblock_1_1_V_read_int_reg),
    .din2(imgblock_1_2_V_read_int_reg),
    .din3(imgblock_1_3_V_read_int_reg),
    .din4(imgblock_1_4_V_read_int_reg),
    .din5(imgblock_1_5_V_read_int_reg),
    .din6(select_ln215_3_fu_472_p3),
    .dout(tmp_40_fu_480_p8)
);

ISPPipeline_accelkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 10 ),
    .din5_WIDTH( 10 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 10 ))
ISPPipeline_accelkbM_U229(
    .din0(imgblock_3_0_V_read_int_reg),
    .din1(imgblock_3_1_V_read_int_reg),
    .din2(imgblock_3_2_V_read_int_reg),
    .din3(imgblock_3_3_V_read_int_reg),
    .din4(imgblock_3_4_V_read_int_reg),
    .din5(imgblock_3_5_V_read_int_reg),
    .din6(select_ln215_fu_442_p3),
    .dout(tmp_41_fu_512_p8)
);

ISPPipeline_accelkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 10 ),
    .din5_WIDTH( 10 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 10 ))
ISPPipeline_accelkbM_U230(
    .din0(imgblock_3_0_V_read_int_reg),
    .din1(imgblock_3_1_V_read_int_reg),
    .din2(imgblock_3_2_V_read_int_reg),
    .din3(imgblock_3_3_V_read_int_reg),
    .din4(imgblock_3_4_V_read_int_reg),
    .din5(imgblock_3_5_V_read_int_reg),
    .din6(select_ln215_3_fu_472_p3),
    .dout(tmp_42_fu_534_p8)
);

ISPPipeline_accelkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 10 ),
    .din5_WIDTH( 10 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 10 ))
ISPPipeline_accelkbM_U231(
    .din0(imgblock_2_0_V_read_int_reg),
    .din1(imgblock_2_1_V_read_int_reg),
    .din2(imgblock_2_2_V_read_int_reg),
    .din3(imgblock_2_3_V_read_int_reg),
    .din4(imgblock_2_4_V_read_int_reg),
    .din5(imgblock_2_5_V_read_int_reg),
    .din6(zext_ln215_fu_316_p1),
    .dout(tmp_43_fu_572_p8)
);

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce))) begin
        icmp_ln81_reg_791 <= icmp_ln81_fu_687_p2;
        ret_V_11_reg_770 <= ret_V_11_fu_566_p2;
        ret_V_9_reg_764 <= ret_V_9_fu_436_p2;
        t3_reg_781[13 : 1] <= t3_fu_661_p2[13 : 1];
        tmp_43_reg_775 <= tmp_43_fu_572_p8;
        trunc_ln79_reg_786 <= trunc_ln79_fu_677_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        imgblock_0_0_V_read_int_reg <= imgblock_0_0_V_read;
        imgblock_0_1_V_read_int_reg <= imgblock_0_1_V_read;
        imgblock_0_2_V_read_int_reg <= imgblock_0_2_V_read;
        imgblock_0_3_V_read_int_reg <= imgblock_0_3_V_read;
        imgblock_0_4_V_read_int_reg <= imgblock_0_4_V_read;
        imgblock_0_5_V_read_int_reg <= imgblock_0_5_V_read;
        imgblock_1_0_V_read_int_reg <= imgblock_1_0_V_read;
        imgblock_1_1_V_read_int_reg <= imgblock_1_1_V_read;
        imgblock_1_2_V_read_int_reg <= imgblock_1_2_V_read;
        imgblock_1_3_V_read_int_reg <= imgblock_1_3_V_read;
        imgblock_1_4_V_read_int_reg <= imgblock_1_4_V_read;
        imgblock_1_5_V_read_int_reg <= imgblock_1_5_V_read;
        imgblock_2_0_V_read_int_reg <= imgblock_2_0_V_read;
        imgblock_2_1_V_read_int_reg <= imgblock_2_1_V_read;
        imgblock_2_2_V_read_int_reg <= imgblock_2_2_V_read;
        imgblock_2_3_V_read_int_reg <= imgblock_2_3_V_read;
        imgblock_2_4_V_read_int_reg <= imgblock_2_4_V_read;
        imgblock_2_5_V_read_int_reg <= imgblock_2_5_V_read;
        imgblock_3_0_V_read_int_reg <= imgblock_3_0_V_read;
        imgblock_3_1_V_read_int_reg <= imgblock_3_1_V_read;
        imgblock_3_2_V_read_int_reg <= imgblock_3_2_V_read;
        imgblock_3_3_V_read_int_reg <= imgblock_3_3_V_read;
        imgblock_3_4_V_read_int_reg <= imgblock_3_4_V_read;
        imgblock_3_5_V_read_int_reg <= imgblock_3_5_V_read;
        imgblock_4_0_V_read_int_reg <= imgblock_4_0_V_read;
        imgblock_4_1_V_read_int_reg <= imgblock_4_1_V_read;
        imgblock_4_2_V_read_int_reg <= imgblock_4_2_V_read;
        imgblock_4_3_V_read_int_reg <= imgblock_4_3_V_read;
        imgblock_4_4_V_read_int_reg <= imgblock_4_4_V_read;
        imgblock_4_5_V_read_int_reg <= imgblock_4_5_V_read;
        loop_r_int_reg <= loop_r;
    end
end

assign add_ln1353_16_fu_556_p2 = (zext_ln215_26_fu_530_p1 + zext_ln1353_21_fu_552_p1);

assign add_ln1353_fu_426_p2 = (zext_ln215_22_fu_400_p1 + zext_ln1353_fu_422_p1);

assign add_ln80_fu_696_p2 = ($signed(trunc_ln79_reg_786) + $signed(sext_ln79_fu_693_p1));

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_return = ((icmp_ln81_reg_791[0:0] === 1'b1) ? 14'd0 : select_ln80_fu_749_p3);

assign icmp_ln81_fu_687_p2 = (($signed(res_fu_681_p2) < $signed(32'd4294967289)) ? 1'b1 : 1'b0);

assign lhs_V_7_fu_370_p1 = ret_V_fu_364_p2;

assign lhs_V_8_fu_468_p1 = tmp_fu_450_p8;

assign lhs_V_9_fu_508_p1 = ret_V_10_fu_502_p2;

assign lhs_V_fu_338_p1 = tmp_s_fu_320_p8;

assign or_ln_fu_308_p3 = {{1'd1}, {loop_r_int_reg}};

assign res_fu_681_p2 = ($signed(sub_ln79_fu_671_p2) + $signed(sext_ln78_fu_667_p1));

assign ret_V_10_fu_502_p2 = (rhs_V_5_fu_498_p1 + lhs_V_8_fu_468_p1);

assign ret_V_11_fu_566_p2 = (zext_ln1353_22_fu_562_p1 + lhs_V_9_fu_508_p1);

assign ret_V_9_fu_436_p2 = (zext_ln1353_20_fu_432_p1 + lhs_V_7_fu_370_p1);

assign ret_V_fu_364_p2 = (rhs_V_fu_360_p1 + lhs_V_fu_338_p1);

assign rhs_V_5_fu_498_p1 = tmp_40_fu_480_p8;

assign rhs_V_fu_360_p1 = tmp_37_fu_342_p8;

assign select_ln215_3_fu_472_p3 = ((loop_r_int_reg[0:0] === 1'b1) ? 3'd4 : 3'd3);

assign select_ln215_fu_442_p3 = ((loop_r_int_reg[0:0] === 1'b1) ? 3'd2 : 3'd1);

assign select_ln80_fu_749_p3 = ((tmp_67_fu_701_p3[0:0] === 1'b1) ? sub_ln80_1_fu_729_p2 : zext_ln80_1_fu_745_p1);

assign sext_ln75_fu_620_p1 = $signed(trunc_ln_fu_610_p4);

assign sext_ln78_fu_667_p1 = t3_fu_661_p2;

assign sext_ln79_fu_693_p1 = t3_reg_781;

assign shl_ln1_fu_639_p3 = {{tmp_43_reg_775}, {3'd0}};

assign shl_ln78_1_fu_650_p3 = {{tmp_43_reg_775}, {1'd0}};

assign shl_ln_fu_593_p3 = {{ret_V_9_reg_764}, {2'd0}};

assign sub_ln75_fu_604_p2 = (zext_ln75_fu_600_p1 - zext_ln74_1_fu_590_p1);

assign sub_ln79_fu_671_p2 = (zext_ln77_fu_635_p1 - t1_fu_624_p1);

assign sub_ln80_1_fu_729_p2 = (14'd0 - zext_ln80_fu_725_p1);

assign sub_ln80_fu_709_p2 = (16'd0 - add_ln80_fu_696_p2);

assign t1_fu_624_p1 = $unsigned(sext_ln75_fu_620_p1);

assign t2_fu_628_p3 = {{ret_V_11_reg_770}, {1'd0}};

assign t3_fu_661_p2 = (zext_ln78_fu_646_p1 - zext_ln78_1_fu_657_p1);

assign tmp_18_fu_715_p4 = {{sub_ln80_fu_709_p2[15:3]}};

assign tmp_19_fu_735_p4 = {{add_ln80_fu_696_p2[15:3]}};

assign tmp_37_fu_342_p7 = loop_r_int_reg;

assign tmp_38_fu_382_p7 = {{2'd2}, {loop_r_int_reg}};

assign tmp_67_fu_701_p3 = add_ln80_fu_696_p2[32'd15];

assign trunc_ln79_fu_677_p1 = sub_ln79_fu_671_p2[15:0];

assign trunc_ln_fu_610_p4 = {{sub_ln75_fu_604_p2[14:1]}};

assign zext_ln1353_20_fu_432_p1 = add_ln1353_fu_426_p2;

assign zext_ln1353_21_fu_552_p1 = tmp_42_fu_534_p8;

assign zext_ln1353_22_fu_562_p1 = add_ln1353_16_fu_556_p2;

assign zext_ln1353_fu_422_p1 = tmp_39_fu_404_p8;

assign zext_ln215_22_fu_400_p1 = tmp_38_fu_382_p8;

assign zext_ln215_26_fu_530_p1 = tmp_41_fu_512_p8;

assign zext_ln215_fu_316_p1 = or_ln_fu_308_p3;

assign zext_ln74_1_fu_590_p1 = ret_V_9_reg_764;

assign zext_ln75_fu_600_p1 = shl_ln_fu_593_p3;

assign zext_ln77_fu_635_p1 = t2_fu_628_p3;

assign zext_ln78_1_fu_657_p1 = shl_ln78_1_fu_650_p3;

assign zext_ln78_fu_646_p1 = shl_ln1_fu_639_p3;

assign zext_ln80_1_fu_745_p1 = tmp_19_fu_735_p4;

assign zext_ln80_fu_725_p1 = tmp_18_fu_715_p4;

always @ (posedge ap_clk) begin
    t3_reg_781[0] <= 1'b0;
end

endmodule //rb_kernel
