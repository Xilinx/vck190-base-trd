// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ISPPipeline_accel_demosaicing_3_1_10_2160_3840_2_false_Pipeline_Zero (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        imgblock_V_3_3_0,
        imgblock_V_3_2_0,
        imgblock_V_2_3_0,
        imgblock_V_2_2_0,
        imgblock_V_1_3_0,
        imgblock_V_1_2_0,
        imgblock_V_0_3_0,
        imgblock_V_0_2_0,
        imgblock_V_3_3_1_out,
        imgblock_V_3_3_1_out_ap_vld,
        imgblock_V_3_2_114_out,
        imgblock_V_3_2_114_out_ap_vld,
        imgblock_V_2_3_1_out,
        imgblock_V_2_3_1_out_ap_vld,
        imgblock_V_2_2_110_out,
        imgblock_V_2_2_110_out_ap_vld,
        imgblock_V_1_3_1_out,
        imgblock_V_1_3_1_out_ap_vld,
        imgblock_V_1_2_16_out,
        imgblock_V_1_2_16_out_ap_vld,
        imgblock_V_0_3_1_out,
        imgblock_V_0_3_1_out_ap_vld,
        imgblock_V_0_2_12_out,
        imgblock_V_0_2_12_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] imgblock_V_3_3_0;
input  [15:0] imgblock_V_3_2_0;
input  [15:0] imgblock_V_2_3_0;
input  [15:0] imgblock_V_2_2_0;
input  [15:0] imgblock_V_1_3_0;
input  [15:0] imgblock_V_1_2_0;
input  [15:0] imgblock_V_0_3_0;
input  [15:0] imgblock_V_0_2_0;
output  [15:0] imgblock_V_3_3_1_out;
output   imgblock_V_3_3_1_out_ap_vld;
output  [15:0] imgblock_V_3_2_114_out;
output   imgblock_V_3_2_114_out_ap_vld;
output  [15:0] imgblock_V_2_3_1_out;
output   imgblock_V_2_3_1_out_ap_vld;
output  [15:0] imgblock_V_2_2_110_out;
output   imgblock_V_2_2_110_out_ap_vld;
output  [15:0] imgblock_V_1_3_1_out;
output   imgblock_V_1_3_1_out_ap_vld;
output  [15:0] imgblock_V_1_2_16_out;
output   imgblock_V_1_2_16_out_ap_vld;
output  [15:0] imgblock_V_0_3_1_out;
output   imgblock_V_0_3_1_out_ap_vld;
output  [15:0] imgblock_V_0_2_12_out;
output   imgblock_V_0_2_12_out_ap_vld;

reg ap_idle;
reg imgblock_V_3_3_1_out_ap_vld;
reg imgblock_V_3_2_114_out_ap_vld;
reg imgblock_V_2_3_1_out_ap_vld;
reg imgblock_V_2_2_110_out_ap_vld;
reg imgblock_V_1_3_1_out_ap_vld;
reg imgblock_V_1_2_16_out_ap_vld;
reg imgblock_V_0_3_1_out_ap_vld;
reg imgblock_V_0_2_12_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln318_fu_256_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [2:0] p_fu_62;
wire   [2:0] add_ln318_fu_250_p2;
wire    ap_block_pp0_stage0_11001;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [15:0] imgblock_V_0_2_12_fu_66;
wire   [15:0] imgblock_V_0_2_2_fu_290_p6;
reg   [15:0] imgblock_V_0_3_1_fu_70;
wire   [15:0] imgblock_V_0_3_s_fu_304_p6;
reg   [15:0] imgblock_V_1_2_16_fu_74;
wire   [15:0] imgblock_V_1_2_2_fu_318_p6;
reg   [15:0] imgblock_V_1_3_1_fu_78;
wire   [15:0] imgblock_V_1_3_s_fu_332_p6;
reg   [15:0] imgblock_V_2_2_110_fu_82;
wire   [15:0] imgblock_V_2_2_2_fu_346_p6;
reg   [15:0] imgblock_V_2_3_1_fu_86;
wire   [15:0] imgblock_V_2_3_s_fu_360_p6;
reg   [15:0] imgblock_V_3_2_114_fu_90;
wire   [15:0] imgblock_V_3_2_2_fu_374_p6;
reg   [15:0] imgblock_V_3_3_1_fu_94;
wire   [15:0] imgblock_V_3_3_s_fu_388_p6;
wire    ap_block_pp0_stage0_01001;
wire   [1:0] trunc_ln323_fu_286_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

ISPPipeline_accel_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mux_42_16_1_1_U88(
    .din0(16'd0),
    .din1(imgblock_V_0_2_12_fu_66),
    .din2(imgblock_V_0_2_12_fu_66),
    .din3(imgblock_V_0_2_12_fu_66),
    .din4(trunc_ln323_fu_286_p1),
    .dout(imgblock_V_0_2_2_fu_290_p6)
);

ISPPipeline_accel_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mux_42_16_1_1_U89(
    .din0(16'd0),
    .din1(imgblock_V_0_3_1_fu_70),
    .din2(imgblock_V_0_3_1_fu_70),
    .din3(imgblock_V_0_3_1_fu_70),
    .din4(trunc_ln323_fu_286_p1),
    .dout(imgblock_V_0_3_s_fu_304_p6)
);

ISPPipeline_accel_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mux_42_16_1_1_U90(
    .din0(imgblock_V_1_2_16_fu_74),
    .din1(16'd0),
    .din2(imgblock_V_1_2_16_fu_74),
    .din3(imgblock_V_1_2_16_fu_74),
    .din4(trunc_ln323_fu_286_p1),
    .dout(imgblock_V_1_2_2_fu_318_p6)
);

ISPPipeline_accel_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mux_42_16_1_1_U91(
    .din0(imgblock_V_1_3_1_fu_78),
    .din1(16'd0),
    .din2(imgblock_V_1_3_1_fu_78),
    .din3(imgblock_V_1_3_1_fu_78),
    .din4(trunc_ln323_fu_286_p1),
    .dout(imgblock_V_1_3_s_fu_332_p6)
);

ISPPipeline_accel_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mux_42_16_1_1_U92(
    .din0(imgblock_V_2_2_110_fu_82),
    .din1(imgblock_V_2_2_110_fu_82),
    .din2(16'd0),
    .din3(imgblock_V_2_2_110_fu_82),
    .din4(trunc_ln323_fu_286_p1),
    .dout(imgblock_V_2_2_2_fu_346_p6)
);

ISPPipeline_accel_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mux_42_16_1_1_U93(
    .din0(imgblock_V_2_3_1_fu_86),
    .din1(imgblock_V_2_3_1_fu_86),
    .din2(16'd0),
    .din3(imgblock_V_2_3_1_fu_86),
    .din4(trunc_ln323_fu_286_p1),
    .dout(imgblock_V_2_3_s_fu_360_p6)
);

ISPPipeline_accel_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mux_42_16_1_1_U94(
    .din0(imgblock_V_3_2_114_fu_90),
    .din1(imgblock_V_3_2_114_fu_90),
    .din2(imgblock_V_3_2_114_fu_90),
    .din3(16'd0),
    .din4(trunc_ln323_fu_286_p1),
    .dout(imgblock_V_3_2_2_fu_374_p6)
);

ISPPipeline_accel_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mux_42_16_1_1_U95(
    .din0(imgblock_V_3_3_1_fu_94),
    .din1(imgblock_V_3_3_1_fu_94),
    .din2(imgblock_V_3_3_1_fu_94),
    .din3(16'd0),
    .din4(trunc_ln323_fu_286_p1),
    .dout(imgblock_V_3_3_s_fu_388_p6)
);

ISPPipeline_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            imgblock_V_0_2_12_fu_66 <= imgblock_V_0_2_0;
        end else if (((icmp_ln318_fu_256_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            imgblock_V_0_2_12_fu_66 <= imgblock_V_0_2_2_fu_290_p6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            imgblock_V_0_3_1_fu_70 <= imgblock_V_0_3_0;
        end else if (((icmp_ln318_fu_256_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            imgblock_V_0_3_1_fu_70 <= imgblock_V_0_3_s_fu_304_p6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            imgblock_V_1_2_16_fu_74 <= imgblock_V_1_2_0;
        end else if (((icmp_ln318_fu_256_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            imgblock_V_1_2_16_fu_74 <= imgblock_V_1_2_2_fu_318_p6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            imgblock_V_1_3_1_fu_78 <= imgblock_V_1_3_0;
        end else if (((icmp_ln318_fu_256_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            imgblock_V_1_3_1_fu_78 <= imgblock_V_1_3_s_fu_332_p6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            imgblock_V_2_2_110_fu_82 <= imgblock_V_2_2_0;
        end else if (((icmp_ln318_fu_256_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            imgblock_V_2_2_110_fu_82 <= imgblock_V_2_2_2_fu_346_p6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            imgblock_V_2_3_1_fu_86 <= imgblock_V_2_3_0;
        end else if (((icmp_ln318_fu_256_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            imgblock_V_2_3_1_fu_86 <= imgblock_V_2_3_s_fu_360_p6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            imgblock_V_3_2_114_fu_90 <= imgblock_V_3_2_0;
        end else if (((icmp_ln318_fu_256_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            imgblock_V_3_2_114_fu_90 <= imgblock_V_3_2_2_fu_374_p6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            imgblock_V_3_3_1_fu_94 <= imgblock_V_3_3_0;
        end else if (((icmp_ln318_fu_256_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            imgblock_V_3_3_1_fu_94 <= imgblock_V_3_3_s_fu_388_p6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            p_fu_62 <= 3'd0;
        end else if (((icmp_ln318_fu_256_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            p_fu_62 <= add_ln318_fu_250_p2;
        end
    end
end

always @ (*) begin
    if (((icmp_ln318_fu_256_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln318_fu_256_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgblock_V_0_2_12_out_ap_vld = 1'b1;
    end else begin
        imgblock_V_0_2_12_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln318_fu_256_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgblock_V_0_3_1_out_ap_vld = 1'b1;
    end else begin
        imgblock_V_0_3_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln318_fu_256_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgblock_V_1_2_16_out_ap_vld = 1'b1;
    end else begin
        imgblock_V_1_2_16_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln318_fu_256_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgblock_V_1_3_1_out_ap_vld = 1'b1;
    end else begin
        imgblock_V_1_3_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln318_fu_256_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgblock_V_2_2_110_out_ap_vld = 1'b1;
    end else begin
        imgblock_V_2_2_110_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln318_fu_256_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgblock_V_2_3_1_out_ap_vld = 1'b1;
    end else begin
        imgblock_V_2_3_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln318_fu_256_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgblock_V_3_2_114_out_ap_vld = 1'b1;
    end else begin
        imgblock_V_3_2_114_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln318_fu_256_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgblock_V_3_3_1_out_ap_vld = 1'b1;
    end else begin
        imgblock_V_3_3_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln318_fu_250_p2 = (p_fu_62 + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign icmp_ln318_fu_256_p2 = ((p_fu_62 == 3'd4) ? 1'b1 : 1'b0);

assign imgblock_V_0_2_12_out = imgblock_V_0_2_12_fu_66;

assign imgblock_V_0_3_1_out = imgblock_V_0_3_1_fu_70;

assign imgblock_V_1_2_16_out = imgblock_V_1_2_16_fu_74;

assign imgblock_V_1_3_1_out = imgblock_V_1_3_1_fu_78;

assign imgblock_V_2_2_110_out = imgblock_V_2_2_110_fu_82;

assign imgblock_V_2_3_1_out = imgblock_V_2_3_1_fu_86;

assign imgblock_V_3_2_114_out = imgblock_V_3_2_114_fu_90;

assign imgblock_V_3_3_1_out = imgblock_V_3_3_1_fu_94;

assign trunc_ln323_fu_286_p1 = p_fu_62[1:0];

endmodule //ISPPipeline_accel_demosaicing_3_1_10_2160_3840_2_false_Pipeline_Zero
