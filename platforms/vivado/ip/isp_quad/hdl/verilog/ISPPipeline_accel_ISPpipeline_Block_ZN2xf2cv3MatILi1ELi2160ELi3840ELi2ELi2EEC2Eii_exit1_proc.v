// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ISPPipeline_accel_ISPpipeline_Block_ZN2xf2cv3MatILi1ELi2160ELi3840ELi2ELi2EEC2Eii_exit1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        height,
        width,
        pawb,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15,
        ap_return_16,
        ap_return_17,
        ap_return_18
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [11:0] height;
input  [11:0] width;
input  [15:0] pawb;
output  [11:0] ap_return_0;
output  [11:0] ap_return_1;
output  [11:0] ap_return_2;
output  [11:0] ap_return_3;
output  [11:0] ap_return_4;
output  [11:0] ap_return_5;
output  [11:0] ap_return_6;
output  [11:0] ap_return_7;
output  [11:0] ap_return_8;
output  [11:0] ap_return_9;
output  [11:0] ap_return_10;
output  [11:0] ap_return_11;
output  [31:0] ap_return_12;
output  [11:0] ap_return_13;
output  [11:0] ap_return_14;
output  [11:0] ap_return_15;
output  [11:0] ap_return_16;
output  [11:0] ap_return_17;
output  [11:0] ap_return_18;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[11:0] ap_return_0;
reg[11:0] ap_return_1;
reg[11:0] ap_return_2;
reg[11:0] ap_return_3;
reg[11:0] ap_return_4;
reg[11:0] ap_return_5;
reg[11:0] ap_return_6;
reg[11:0] ap_return_7;
reg[11:0] ap_return_8;
reg[11:0] ap_return_9;
reg[11:0] ap_return_10;
reg[11:0] ap_return_11;
reg[31:0] ap_return_12;
reg[11:0] ap_return_13;
reg[11:0] ap_return_14;
reg[11:0] ap_return_15;
reg[11:0] ap_return_16;
reg[11:0] ap_return_17;
reg[11:0] ap_return_18;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
wire    ap_CS_fsm_state4;
wire   [31:0] grp_fu_37_p1;
wire   [31:0] grp_fu_37_p0;
wire   [31:0] thresh_fu_32_p2;
reg    grp_fu_37_ce;
reg   [11:0] ap_return_0_preg;
reg   [11:0] ap_return_1_preg;
reg   [11:0] ap_return_2_preg;
reg   [11:0] ap_return_3_preg;
reg   [11:0] ap_return_4_preg;
reg   [11:0] ap_return_5_preg;
reg   [11:0] ap_return_6_preg;
reg   [11:0] ap_return_7_preg;
reg   [11:0] ap_return_8_preg;
reg   [11:0] ap_return_9_preg;
reg   [11:0] ap_return_10_preg;
reg   [11:0] ap_return_11_preg;
reg   [31:0] ap_return_12_preg;
reg   [11:0] ap_return_13_preg;
reg   [11:0] ap_return_14_preg;
reg   [11:0] ap_return_15_preg;
reg   [11:0] ap_return_16_preg;
reg   [11:0] ap_return_17_preg;
reg   [11:0] ap_return_18_preg;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_return_0_preg = 12'd0;
#0 ap_return_1_preg = 12'd0;
#0 ap_return_2_preg = 12'd0;
#0 ap_return_3_preg = 12'd0;
#0 ap_return_4_preg = 12'd0;
#0 ap_return_5_preg = 12'd0;
#0 ap_return_6_preg = 12'd0;
#0 ap_return_7_preg = 12'd0;
#0 ap_return_8_preg = 12'd0;
#0 ap_return_9_preg = 12'd0;
#0 ap_return_10_preg = 12'd0;
#0 ap_return_11_preg = 12'd0;
#0 ap_return_12_preg = 32'd0;
#0 ap_return_13_preg = 12'd0;
#0 ap_return_14_preg = 12'd0;
#0 ap_return_15_preg = 12'd0;
#0 ap_return_16_preg = 12'd0;
#0 ap_return_17_preg = 12'd0;
#0 ap_return_18_preg = 12'd0;
end

ISPPipeline_accel_fmul_32ns_32ns_32_1_primitive_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_1_primitive_dsp_1_U3(
    .din0(grp_fu_37_p1),
    .din1(32'd998244352),
    .dout(thresh_fu_32_p2)
);

ISPPipeline_accel_uitofp_32ns_32_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
uitofp_32ns_32_4_no_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_37_p0),
    .ce(grp_fu_37_ce),
    .dout(grp_fu_37_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 12'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_return_0_preg <= height;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_10_preg <= 12'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_return_10_preg <= height;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_11_preg <= 12'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_return_11_preg <= width;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_12_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_return_12_preg <= thresh_fu_32_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_13_preg <= 12'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_return_13_preg <= height;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_14_preg <= 12'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_return_14_preg <= width;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_15_preg <= 12'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_return_15_preg <= height;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_16_preg <= 12'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_return_16_preg <= width;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_17_preg <= 12'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_return_17_preg <= height;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_18_preg <= 12'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_return_18_preg <= width;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 12'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_return_1_preg <= width;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 12'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_return_2_preg <= height;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 12'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_return_3_preg <= width;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 12'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_return_4_preg <= height;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_5_preg <= 12'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_return_5_preg <= width;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_6_preg <= 12'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_return_6_preg <= height;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_7_preg <= 12'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_return_7_preg <= width;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_8_preg <= 12'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_return_8_preg <= height;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_9_preg <= 12'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_return_9_preg <= width;
        end
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_return_0 = height;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_return_1 = width;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_return_10 = height;
    end else begin
        ap_return_10 = ap_return_10_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_return_11 = width;
    end else begin
        ap_return_11 = ap_return_11_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_return_12 = thresh_fu_32_p2;
    end else begin
        ap_return_12 = ap_return_12_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_return_13 = height;
    end else begin
        ap_return_13 = ap_return_13_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_return_14 = width;
    end else begin
        ap_return_14 = ap_return_14_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_return_15 = height;
    end else begin
        ap_return_15 = ap_return_15_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_return_16 = width;
    end else begin
        ap_return_16 = ap_return_16_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_return_17 = height;
    end else begin
        ap_return_17 = ap_return_17_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_return_18 = width;
    end else begin
        ap_return_18 = ap_return_18_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_return_2 = height;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_return_3 = width;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_return_4 = height;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_return_5 = width;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_return_6 = height;
    end else begin
        ap_return_6 = ap_return_6_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_return_7 = width;
    end else begin
        ap_return_7 = ap_return_7_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_return_8 = height;
    end else begin
        ap_return_8 = ap_return_8_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_return_9 = width;
    end else begin
        ap_return_9 = ap_return_9_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        grp_fu_37_ce = 1'b0;
    end else begin
        grp_fu_37_ce = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign grp_fu_37_p0 = pawb;

endmodule //ISPPipeline_accel_ISPpipeline_Block_ZN2xf2cv3MatILi1ELi2160ELi3840ELi2ELi2EEC2Eii_exit1_proc
