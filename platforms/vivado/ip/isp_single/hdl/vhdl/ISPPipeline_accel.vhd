-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ISPPipeline_accel is
generic (
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 12;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axis_video_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    s_axis_video_TVALID : IN STD_LOGIC;
    s_axis_video_TREADY : OUT STD_LOGIC;
    s_axis_video_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    s_axis_video_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    s_axis_video_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axis_video_TVALID : OUT STD_LOGIC;
    m_axis_video_TREADY : IN STD_LOGIC;
    m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of ISPPipeline_accel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ISPPipeline_accel_ISPPipeline_accel,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvc1902-vsva2197-1LP-e-S-es1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.207000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=126,HLS_SYN_DSP=0,HLS_SYN_FF=16986,HLS_SYN_LUT=21368,HLS_VERSION=2021_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal width : STD_LOGIC_VECTOR (15 downto 0);
    signal height : STD_LOGIC_VECTOR (15 downto 0);
    signal rgain : STD_LOGIC_VECTOR (15 downto 0);
    signal bgain : STD_LOGIC_VECTOR (15 downto 0);
    signal gamma_lut_ce0 : STD_LOGIC;
    signal gamma_lut_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mode_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal pawb : STD_LOGIC_VECTOR (15 downto 0);
    signal flag : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal hist0_awb_0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal hist0_awb_0_ce0 : STD_LOGIC;
    signal hist0_awb_0_we0 : STD_LOGIC;
    signal hist0_awb_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal hist0_awb_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal hist0_awb_1_ce0 : STD_LOGIC;
    signal hist0_awb_1_we0 : STD_LOGIC;
    signal hist0_awb_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal hist0_awb_2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal hist0_awb_2_ce0 : STD_LOGIC;
    signal hist0_awb_2_we0 : STD_LOGIC;
    signal hist0_awb_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal hist1_awb_0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal hist1_awb_0_ce0 : STD_LOGIC;
    signal hist1_awb_0_we0 : STD_LOGIC;
    signal hist1_awb_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal hist1_awb_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal hist1_awb_1_ce0 : STD_LOGIC;
    signal hist1_awb_1_we0 : STD_LOGIC;
    signal hist1_awb_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal hist1_awb_2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal hist1_awb_2_ce0 : STD_LOGIC;
    signal hist1_awb_2_we0 : STD_LOGIC;
    signal hist1_awb_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pawb_read_reg_339 : STD_LOGIC_VECTOR (15 downto 0);
    signal bgain_read_reg_344 : STD_LOGIC_VECTOR (15 downto 0);
    signal rgain_read_reg_349 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_fu_317_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_354 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_325_fu_321_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_325_reg_359 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_326_fu_325_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_326_reg_364 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_ISPpipeline_fu_211_m_axis_video_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ISPpipeline_fu_211_m_axis_video_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ISPpipeline_fu_211_m_axis_video_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ISPpipeline_fu_211_m_axis_video_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ISPpipeline_fu_211_m_axis_video_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ISPpipeline_fu_211_m_axis_video_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ISPpipeline_fu_211_m_axis_video_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ISPpipeline_fu_211_hist0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_ISPpipeline_fu_211_hist0_ce0 : STD_LOGIC;
    signal grp_ISPpipeline_fu_211_hist0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ISPpipeline_fu_211_hist0_we0 : STD_LOGIC;
    signal grp_ISPpipeline_fu_211_hist0_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_ISPpipeline_fu_211_hist0_ce1 : STD_LOGIC;
    signal grp_ISPpipeline_fu_211_hist0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ISPpipeline_fu_211_hist0_we1 : STD_LOGIC;
    signal grp_ISPpipeline_fu_211_hist01_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_ISPpipeline_fu_211_hist01_ce0 : STD_LOGIC;
    signal grp_ISPpipeline_fu_211_hist01_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ISPpipeline_fu_211_hist01_we0 : STD_LOGIC;
    signal grp_ISPpipeline_fu_211_hist01_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_ISPpipeline_fu_211_hist01_ce1 : STD_LOGIC;
    signal grp_ISPpipeline_fu_211_hist01_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ISPpipeline_fu_211_hist01_we1 : STD_LOGIC;
    signal grp_ISPpipeline_fu_211_hist02_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_ISPpipeline_fu_211_hist02_ce0 : STD_LOGIC;
    signal grp_ISPpipeline_fu_211_hist02_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ISPpipeline_fu_211_hist02_we0 : STD_LOGIC;
    signal grp_ISPpipeline_fu_211_hist02_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_ISPpipeline_fu_211_hist02_ce1 : STD_LOGIC;
    signal grp_ISPpipeline_fu_211_hist02_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ISPpipeline_fu_211_hist02_we1 : STD_LOGIC;
    signal grp_ISPpipeline_fu_211_hist1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_ISPpipeline_fu_211_hist1_ce0 : STD_LOGIC;
    signal grp_ISPpipeline_fu_211_hist1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ISPpipeline_fu_211_hist1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ISPpipeline_fu_211_hist1_we0 : STD_LOGIC;
    signal grp_ISPpipeline_fu_211_hist1_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_ISPpipeline_fu_211_hist1_ce1 : STD_LOGIC;
    signal grp_ISPpipeline_fu_211_hist1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ISPpipeline_fu_211_hist1_we1 : STD_LOGIC;
    signal grp_ISPpipeline_fu_211_hist13_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_ISPpipeline_fu_211_hist13_ce0 : STD_LOGIC;
    signal grp_ISPpipeline_fu_211_hist13_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ISPpipeline_fu_211_hist13_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ISPpipeline_fu_211_hist13_we0 : STD_LOGIC;
    signal grp_ISPpipeline_fu_211_hist13_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_ISPpipeline_fu_211_hist13_ce1 : STD_LOGIC;
    signal grp_ISPpipeline_fu_211_hist13_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ISPpipeline_fu_211_hist13_we1 : STD_LOGIC;
    signal grp_ISPpipeline_fu_211_hist14_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_ISPpipeline_fu_211_hist14_ce0 : STD_LOGIC;
    signal grp_ISPpipeline_fu_211_hist14_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ISPpipeline_fu_211_hist14_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ISPpipeline_fu_211_hist14_we0 : STD_LOGIC;
    signal grp_ISPpipeline_fu_211_hist14_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_ISPpipeline_fu_211_hist14_ce1 : STD_LOGIC;
    signal grp_ISPpipeline_fu_211_hist14_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ISPpipeline_fu_211_hist14_we1 : STD_LOGIC;
    signal grp_ISPpipeline_fu_211_gamma_lut_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_ISPpipeline_fu_211_gamma_lut_ce0 : STD_LOGIC;
    signal grp_ISPpipeline_fu_211_gamma_lut_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ISPpipeline_fu_211_gamma_lut_we0 : STD_LOGIC;
    signal grp_ISPpipeline_fu_211_ap_start : STD_LOGIC;
    signal grp_ISPpipeline_fu_211_s_axis_video_TREADY : STD_LOGIC;
    signal grp_ISPpipeline_fu_211_ap_done : STD_LOGIC;
    signal grp_ISPpipeline_fu_211_m_axis_video_TVALID : STD_LOGIC;
    signal grp_ISPpipeline_fu_211_m_axis_video_TREADY : STD_LOGIC;
    signal grp_ISPpipeline_fu_211_ap_ready : STD_LOGIC;
    signal grp_ISPpipeline_fu_211_ap_idle : STD_LOGIC;
    signal grp_ISPpipeline_fu_211_ap_continue : STD_LOGIC;
    signal storemerge_reg_198 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_sync_grp_ISPpipeline_fu_211_ap_ready : STD_LOGIC;
    signal ap_sync_grp_ISPpipeline_fu_211_ap_done : STD_LOGIC;
    signal ap_block_state3_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state5_on_subcall_done : BOOLEAN;
    signal grp_ISPpipeline_fu_211_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_sync_reg_grp_ISPpipeline_fu_211_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_ISPpipeline_fu_211_ap_done : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal regslice_both_m_axis_video_V_data_V_U_apdone_blk : STD_LOGIC;
    signal flag_load_load_fu_329_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal regslice_both_s_axis_video_V_data_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal s_axis_video_TVALID_int_regslice : STD_LOGIC;
    signal s_axis_video_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_s_axis_video_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_s_axis_video_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_s_axis_video_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_user_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_last_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_id_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_video_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_video_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_video_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_video_V_dest_V_U_ack_in : STD_LOGIC;
    signal m_axis_video_TVALID_int_regslice : STD_LOGIC;
    signal m_axis_video_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_m_axis_video_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_dest_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ISPPipeline_accel_ISPpipeline IS
    port (
        s_axis_video_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        s_axis_video_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        s_axis_video_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        s_axis_video_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_video_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_video_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_video_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
        height : IN STD_LOGIC_VECTOR (11 downto 0);
        width : IN STD_LOGIC_VECTOR (11 downto 0);
        hist0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        hist0_ce0 : OUT STD_LOGIC;
        hist0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        hist0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        hist0_we0 : OUT STD_LOGIC;
        hist0_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        hist0_ce1 : OUT STD_LOGIC;
        hist0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        hist0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        hist0_we1 : OUT STD_LOGIC;
        hist01_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        hist01_ce0 : OUT STD_LOGIC;
        hist01_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        hist01_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        hist01_we0 : OUT STD_LOGIC;
        hist01_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        hist01_ce1 : OUT STD_LOGIC;
        hist01_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        hist01_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        hist01_we1 : OUT STD_LOGIC;
        hist02_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        hist02_ce0 : OUT STD_LOGIC;
        hist02_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        hist02_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        hist02_we0 : OUT STD_LOGIC;
        hist02_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        hist02_ce1 : OUT STD_LOGIC;
        hist02_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        hist02_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        hist02_we1 : OUT STD_LOGIC;
        hist1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        hist1_ce0 : OUT STD_LOGIC;
        hist1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        hist1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        hist1_we0 : OUT STD_LOGIC;
        hist1_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        hist1_ce1 : OUT STD_LOGIC;
        hist1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        hist1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        hist1_we1 : OUT STD_LOGIC;
        hist13_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        hist13_ce0 : OUT STD_LOGIC;
        hist13_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        hist13_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        hist13_we0 : OUT STD_LOGIC;
        hist13_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        hist13_ce1 : OUT STD_LOGIC;
        hist13_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        hist13_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        hist13_we1 : OUT STD_LOGIC;
        hist14_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        hist14_ce0 : OUT STD_LOGIC;
        hist14_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        hist14_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        hist14_we0 : OUT STD_LOGIC;
        hist14_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        hist14_ce1 : OUT STD_LOGIC;
        hist14_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        hist14_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        hist14_we1 : OUT STD_LOGIC;
        rgain : IN STD_LOGIC_VECTOR (15 downto 0);
        bgain : IN STD_LOGIC_VECTOR (15 downto 0);
        gamma_lut_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        gamma_lut_ce0 : OUT STD_LOGIC;
        gamma_lut_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        gamma_lut_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        gamma_lut_we0 : OUT STD_LOGIC;
        mode_reg : IN STD_LOGIC_VECTOR (0 downto 0);
        pawb : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        rgain_ap_vld : IN STD_LOGIC;
        bgain_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        height_ap_vld : IN STD_LOGIC;
        width_ap_vld : IN STD_LOGIC;
        pawb_ap_vld : IN STD_LOGIC;
        s_axis_video_TVALID : IN STD_LOGIC;
        s_axis_video_TREADY : OUT STD_LOGIC;
        mode_reg_ap_vld : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        m_axis_video_TVALID : OUT STD_LOGIC;
        m_axis_video_TREADY : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component ISPPipeline_accel_hist0_awb_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ISPPipeline_accel_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        width : OUT STD_LOGIC_VECTOR (15 downto 0);
        height : OUT STD_LOGIC_VECTOR (15 downto 0);
        mode_reg : OUT STD_LOGIC_VECTOR (7 downto 0);
        rgain : OUT STD_LOGIC_VECTOR (15 downto 0);
        bgain : OUT STD_LOGIC_VECTOR (15 downto 0);
        pawb : OUT STD_LOGIC_VECTOR (15 downto 0);
        gamma_lut_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        gamma_lut_ce0 : IN STD_LOGIC;
        gamma_lut_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component ISPPipeline_accel_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    hist0_awb_0_U : component ISPPipeline_accel_hist0_awb_0
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => hist0_awb_0_address0,
        ce0 => hist0_awb_0_ce0,
        we0 => hist0_awb_0_we0,
        d0 => grp_ISPpipeline_fu_211_hist0_d0,
        q0 => hist0_awb_0_q0);

    hist0_awb_1_U : component ISPPipeline_accel_hist0_awb_0
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => hist0_awb_1_address0,
        ce0 => hist0_awb_1_ce0,
        we0 => hist0_awb_1_we0,
        d0 => grp_ISPpipeline_fu_211_hist01_d0,
        q0 => hist0_awb_1_q0);

    hist0_awb_2_U : component ISPPipeline_accel_hist0_awb_0
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => hist0_awb_2_address0,
        ce0 => hist0_awb_2_ce0,
        we0 => hist0_awb_2_we0,
        d0 => grp_ISPpipeline_fu_211_hist02_d0,
        q0 => hist0_awb_2_q0);

    hist1_awb_0_U : component ISPPipeline_accel_hist0_awb_0
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => hist1_awb_0_address0,
        ce0 => hist1_awb_0_ce0,
        we0 => hist1_awb_0_we0,
        d0 => grp_ISPpipeline_fu_211_hist0_d0,
        q0 => hist1_awb_0_q0);

    hist1_awb_1_U : component ISPPipeline_accel_hist0_awb_0
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => hist1_awb_1_address0,
        ce0 => hist1_awb_1_ce0,
        we0 => hist1_awb_1_we0,
        d0 => grp_ISPpipeline_fu_211_hist01_d0,
        q0 => hist1_awb_1_q0);

    hist1_awb_2_U : component ISPPipeline_accel_hist0_awb_0
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => hist1_awb_2_address0,
        ce0 => hist1_awb_2_ce0,
        we0 => hist1_awb_2_we0,
        d0 => grp_ISPpipeline_fu_211_hist02_d0,
        q0 => hist1_awb_2_q0);

    grp_ISPpipeline_fu_211 : component ISPPipeline_accel_ISPpipeline
    port map (
        s_axis_video_TDATA => s_axis_video_TDATA_int_regslice,
        s_axis_video_TKEEP => s_axis_video_TKEEP_int_regslice,
        s_axis_video_TSTRB => s_axis_video_TSTRB_int_regslice,
        s_axis_video_TUSER => s_axis_video_TUSER_int_regslice,
        s_axis_video_TLAST => s_axis_video_TLAST_int_regslice,
        s_axis_video_TID => s_axis_video_TID_int_regslice,
        s_axis_video_TDEST => s_axis_video_TDEST_int_regslice,
        m_axis_video_TDATA => grp_ISPpipeline_fu_211_m_axis_video_TDATA,
        m_axis_video_TKEEP => grp_ISPpipeline_fu_211_m_axis_video_TKEEP,
        m_axis_video_TSTRB => grp_ISPpipeline_fu_211_m_axis_video_TSTRB,
        m_axis_video_TUSER => grp_ISPpipeline_fu_211_m_axis_video_TUSER,
        m_axis_video_TLAST => grp_ISPpipeline_fu_211_m_axis_video_TLAST,
        m_axis_video_TID => grp_ISPpipeline_fu_211_m_axis_video_TID,
        m_axis_video_TDEST => grp_ISPpipeline_fu_211_m_axis_video_TDEST,
        height => empty_326_reg_364,
        width => empty_325_reg_359,
        hist0_address0 => grp_ISPpipeline_fu_211_hist0_address0,
        hist0_ce0 => grp_ISPpipeline_fu_211_hist0_ce0,
        hist0_d0 => grp_ISPpipeline_fu_211_hist0_d0,
        hist0_q0 => ap_const_lv32_0,
        hist0_we0 => grp_ISPpipeline_fu_211_hist0_we0,
        hist0_address1 => grp_ISPpipeline_fu_211_hist0_address1,
        hist0_ce1 => grp_ISPpipeline_fu_211_hist0_ce1,
        hist0_d1 => grp_ISPpipeline_fu_211_hist0_d1,
        hist0_q1 => ap_const_lv32_0,
        hist0_we1 => grp_ISPpipeline_fu_211_hist0_we1,
        hist01_address0 => grp_ISPpipeline_fu_211_hist01_address0,
        hist01_ce0 => grp_ISPpipeline_fu_211_hist01_ce0,
        hist01_d0 => grp_ISPpipeline_fu_211_hist01_d0,
        hist01_q0 => ap_const_lv32_0,
        hist01_we0 => grp_ISPpipeline_fu_211_hist01_we0,
        hist01_address1 => grp_ISPpipeline_fu_211_hist01_address1,
        hist01_ce1 => grp_ISPpipeline_fu_211_hist01_ce1,
        hist01_d1 => grp_ISPpipeline_fu_211_hist01_d1,
        hist01_q1 => ap_const_lv32_0,
        hist01_we1 => grp_ISPpipeline_fu_211_hist01_we1,
        hist02_address0 => grp_ISPpipeline_fu_211_hist02_address0,
        hist02_ce0 => grp_ISPpipeline_fu_211_hist02_ce0,
        hist02_d0 => grp_ISPpipeline_fu_211_hist02_d0,
        hist02_q0 => ap_const_lv32_0,
        hist02_we0 => grp_ISPpipeline_fu_211_hist02_we0,
        hist02_address1 => grp_ISPpipeline_fu_211_hist02_address1,
        hist02_ce1 => grp_ISPpipeline_fu_211_hist02_ce1,
        hist02_d1 => grp_ISPpipeline_fu_211_hist02_d1,
        hist02_q1 => ap_const_lv32_0,
        hist02_we1 => grp_ISPpipeline_fu_211_hist02_we1,
        hist1_address0 => grp_ISPpipeline_fu_211_hist1_address0,
        hist1_ce0 => grp_ISPpipeline_fu_211_hist1_ce0,
        hist1_d0 => grp_ISPpipeline_fu_211_hist1_d0,
        hist1_q0 => grp_ISPpipeline_fu_211_hist1_q0,
        hist1_we0 => grp_ISPpipeline_fu_211_hist1_we0,
        hist1_address1 => grp_ISPpipeline_fu_211_hist1_address1,
        hist1_ce1 => grp_ISPpipeline_fu_211_hist1_ce1,
        hist1_d1 => grp_ISPpipeline_fu_211_hist1_d1,
        hist1_q1 => ap_const_lv32_0,
        hist1_we1 => grp_ISPpipeline_fu_211_hist1_we1,
        hist13_address0 => grp_ISPpipeline_fu_211_hist13_address0,
        hist13_ce0 => grp_ISPpipeline_fu_211_hist13_ce0,
        hist13_d0 => grp_ISPpipeline_fu_211_hist13_d0,
        hist13_q0 => grp_ISPpipeline_fu_211_hist13_q0,
        hist13_we0 => grp_ISPpipeline_fu_211_hist13_we0,
        hist13_address1 => grp_ISPpipeline_fu_211_hist13_address1,
        hist13_ce1 => grp_ISPpipeline_fu_211_hist13_ce1,
        hist13_d1 => grp_ISPpipeline_fu_211_hist13_d1,
        hist13_q1 => ap_const_lv32_0,
        hist13_we1 => grp_ISPpipeline_fu_211_hist13_we1,
        hist14_address0 => grp_ISPpipeline_fu_211_hist14_address0,
        hist14_ce0 => grp_ISPpipeline_fu_211_hist14_ce0,
        hist14_d0 => grp_ISPpipeline_fu_211_hist14_d0,
        hist14_q0 => grp_ISPpipeline_fu_211_hist14_q0,
        hist14_we0 => grp_ISPpipeline_fu_211_hist14_we0,
        hist14_address1 => grp_ISPpipeline_fu_211_hist14_address1,
        hist14_ce1 => grp_ISPpipeline_fu_211_hist14_ce1,
        hist14_d1 => grp_ISPpipeline_fu_211_hist14_d1,
        hist14_q1 => ap_const_lv32_0,
        hist14_we1 => grp_ISPpipeline_fu_211_hist14_we1,
        rgain => rgain_read_reg_349,
        bgain => bgain_read_reg_344,
        gamma_lut_address0 => grp_ISPpipeline_fu_211_gamma_lut_address0,
        gamma_lut_ce0 => grp_ISPpipeline_fu_211_gamma_lut_ce0,
        gamma_lut_d0 => grp_ISPpipeline_fu_211_gamma_lut_d0,
        gamma_lut_q0 => gamma_lut_q0,
        gamma_lut_we0 => grp_ISPpipeline_fu_211_gamma_lut_we0,
        mode_reg => empty_reg_354,
        pawb => pawb_read_reg_339,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        rgain_ap_vld => ap_const_logic_1,
        bgain_ap_vld => ap_const_logic_1,
        ap_start => grp_ISPpipeline_fu_211_ap_start,
        height_ap_vld => ap_const_logic_1,
        width_ap_vld => ap_const_logic_1,
        pawb_ap_vld => ap_const_logic_1,
        s_axis_video_TVALID => s_axis_video_TVALID_int_regslice,
        s_axis_video_TREADY => grp_ISPpipeline_fu_211_s_axis_video_TREADY,
        mode_reg_ap_vld => ap_const_logic_1,
        ap_done => grp_ISPpipeline_fu_211_ap_done,
        m_axis_video_TVALID => grp_ISPpipeline_fu_211_m_axis_video_TVALID,
        m_axis_video_TREADY => grp_ISPpipeline_fu_211_m_axis_video_TREADY,
        ap_ready => grp_ISPpipeline_fu_211_ap_ready,
        ap_idle => grp_ISPpipeline_fu_211_ap_idle,
        ap_continue => grp_ISPpipeline_fu_211_ap_continue);

    CTRL_s_axi_U : component ISPPipeline_accel_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        width => width,
        height => height,
        mode_reg => mode_reg,
        rgain => rgain,
        bgain => bgain,
        pawb => pawb,
        gamma_lut_address0 => grp_ISPpipeline_fu_211_gamma_lut_address0,
        gamma_lut_ce0 => gamma_lut_ce0,
        gamma_lut_q0 => gamma_lut_q0,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    regslice_both_s_axis_video_V_data_V_U : component ISPPipeline_accel_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TDATA,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_data_V_U_ack_in,
        data_out => s_axis_video_TDATA_int_regslice,
        vld_out => s_axis_video_TVALID_int_regslice,
        ack_out => s_axis_video_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_video_V_data_V_U_apdone_blk);

    regslice_both_s_axis_video_V_keep_V_U : component ISPPipeline_accel_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TKEEP,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_keep_V_U_ack_in,
        data_out => s_axis_video_TKEEP_int_regslice,
        vld_out => regslice_both_s_axis_video_V_keep_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_video_V_keep_V_U_apdone_blk);

    regslice_both_s_axis_video_V_strb_V_U : component ISPPipeline_accel_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TSTRB,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_strb_V_U_ack_in,
        data_out => s_axis_video_TSTRB_int_regslice,
        vld_out => regslice_both_s_axis_video_V_strb_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_video_V_strb_V_U_apdone_blk);

    regslice_both_s_axis_video_V_user_V_U : component ISPPipeline_accel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TUSER,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_user_V_U_ack_in,
        data_out => s_axis_video_TUSER_int_regslice,
        vld_out => regslice_both_s_axis_video_V_user_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_video_V_user_V_U_apdone_blk);

    regslice_both_s_axis_video_V_last_V_U : component ISPPipeline_accel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TLAST,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_last_V_U_ack_in,
        data_out => s_axis_video_TLAST_int_regslice,
        vld_out => regslice_both_s_axis_video_V_last_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_video_V_last_V_U_apdone_blk);

    regslice_both_s_axis_video_V_id_V_U : component ISPPipeline_accel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TID,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_id_V_U_ack_in,
        data_out => s_axis_video_TID_int_regslice,
        vld_out => regslice_both_s_axis_video_V_id_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_video_V_id_V_U_apdone_blk);

    regslice_both_s_axis_video_V_dest_V_U : component ISPPipeline_accel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_video_TDEST,
        vld_in => s_axis_video_TVALID,
        ack_in => regslice_both_s_axis_video_V_dest_V_U_ack_in,
        data_out => s_axis_video_TDEST_int_regslice,
        vld_out => regslice_both_s_axis_video_V_dest_V_U_vld_out,
        ack_out => s_axis_video_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_video_V_dest_V_U_apdone_blk);

    regslice_both_m_axis_video_V_data_V_U : component ISPPipeline_accel_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_ISPpipeline_fu_211_m_axis_video_TDATA,
        vld_in => m_axis_video_TVALID_int_regslice,
        ack_in => m_axis_video_TREADY_int_regslice,
        data_out => m_axis_video_TDATA,
        vld_out => regslice_both_m_axis_video_V_data_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_data_V_U_apdone_blk);

    regslice_both_m_axis_video_V_keep_V_U : component ISPPipeline_accel_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_ISPpipeline_fu_211_m_axis_video_TKEEP,
        vld_in => m_axis_video_TVALID_int_regslice,
        ack_in => regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy,
        data_out => m_axis_video_TKEEP,
        vld_out => regslice_both_m_axis_video_V_keep_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_keep_V_U_apdone_blk);

    regslice_both_m_axis_video_V_strb_V_U : component ISPPipeline_accel_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_ISPpipeline_fu_211_m_axis_video_TSTRB,
        vld_in => m_axis_video_TVALID_int_regslice,
        ack_in => regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy,
        data_out => m_axis_video_TSTRB,
        vld_out => regslice_both_m_axis_video_V_strb_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_strb_V_U_apdone_blk);

    regslice_both_m_axis_video_V_user_V_U : component ISPPipeline_accel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_ISPpipeline_fu_211_m_axis_video_TUSER,
        vld_in => m_axis_video_TVALID_int_regslice,
        ack_in => regslice_both_m_axis_video_V_user_V_U_ack_in_dummy,
        data_out => m_axis_video_TUSER,
        vld_out => regslice_both_m_axis_video_V_user_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_user_V_U_apdone_blk);

    regslice_both_m_axis_video_V_last_V_U : component ISPPipeline_accel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_ISPpipeline_fu_211_m_axis_video_TLAST,
        vld_in => m_axis_video_TVALID_int_regslice,
        ack_in => regslice_both_m_axis_video_V_last_V_U_ack_in_dummy,
        data_out => m_axis_video_TLAST,
        vld_out => regslice_both_m_axis_video_V_last_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_last_V_U_apdone_blk);

    regslice_both_m_axis_video_V_id_V_U : component ISPPipeline_accel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_ISPpipeline_fu_211_m_axis_video_TID,
        vld_in => m_axis_video_TVALID_int_regslice,
        ack_in => regslice_both_m_axis_video_V_id_V_U_ack_in_dummy,
        data_out => m_axis_video_TID,
        vld_out => regslice_both_m_axis_video_V_id_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_id_V_U_apdone_blk);

    regslice_both_m_axis_video_V_dest_V_U : component ISPPipeline_accel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_ISPpipeline_fu_211_m_axis_video_TDEST,
        vld_in => m_axis_video_TVALID_int_regslice,
        ack_in => regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy,
        data_out => m_axis_video_TDEST,
        vld_out => regslice_both_m_axis_video_V_dest_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_ISPpipeline_fu_211_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_ISPpipeline_fu_211_ap_done <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    ap_sync_reg_grp_ISPpipeline_fu_211_ap_done <= ap_const_logic_0;
                elsif ((grp_ISPpipeline_fu_211_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_ISPpipeline_fu_211_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_ISPpipeline_fu_211_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_ISPpipeline_fu_211_ap_ready <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    ap_sync_reg_grp_ISPpipeline_fu_211_ap_ready <= ap_const_logic_0;
                elsif ((grp_ISPpipeline_fu_211_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_ISPpipeline_fu_211_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_ISPpipeline_fu_211_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_ISPpipeline_fu_211_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_sync_grp_ISPpipeline_fu_211_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_sync_grp_ISPpipeline_fu_211_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    grp_ISPpipeline_fu_211_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ISPpipeline_fu_211_ap_ready = ap_const_logic_1)) then 
                    grp_ISPpipeline_fu_211_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    storemerge_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                storemerge_reg_198 <= ap_const_lv1_0;
            elsif (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                storemerge_reg_198 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                bgain_read_reg_344 <= bgain;
                empty_325_reg_359 <= empty_325_fu_321_p1;
                empty_326_reg_364 <= empty_326_fu_325_p1;
                empty_reg_354 <= empty_fu_317_p1;
                pawb_read_reg_339 <= pawb;
                rgain_read_reg_349 <= rgain;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                flag <= storemerge_reg_198;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_block_state3_on_subcall_done, ap_CS_fsm_state5, ap_block_state5_on_subcall_done, ap_CS_fsm_state6, regslice_both_m_axis_video_V_data_V_U_apdone_blk, flag_load_load_fu_329_p1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((flag_load_load_fu_329_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((flag_load_load_fu_329_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(ap_block_state3_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state3_on_subcall_done)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(ap_block_state5_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state5_on_subcall_done)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(regslice_both_m_axis_video_V_data_V_U_apdone_blk)
    begin
        if ((regslice_both_m_axis_video_V_data_V_U_apdone_blk = ap_const_logic_1)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state3_on_subcall_done_assign_proc : process(ap_sync_grp_ISPpipeline_fu_211_ap_ready, ap_sync_grp_ISPpipeline_fu_211_ap_done)
    begin
                ap_block_state3_on_subcall_done <= ((ap_sync_grp_ISPpipeline_fu_211_ap_ready and ap_sync_grp_ISPpipeline_fu_211_ap_done) = ap_const_logic_0);
    end process;


    ap_block_state5_on_subcall_done_assign_proc : process(ap_sync_grp_ISPpipeline_fu_211_ap_ready, ap_sync_grp_ISPpipeline_fu_211_ap_done)
    begin
                ap_block_state5_on_subcall_done <= ((ap_sync_grp_ISPpipeline_fu_211_ap_ready and ap_sync_grp_ISPpipeline_fu_211_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state6, regslice_both_m_axis_video_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, regslice_both_m_axis_video_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_ISPpipeline_fu_211_ap_done <= (grp_ISPpipeline_fu_211_ap_done or ap_sync_reg_grp_ISPpipeline_fu_211_ap_done);
    ap_sync_grp_ISPpipeline_fu_211_ap_ready <= (grp_ISPpipeline_fu_211_ap_ready or ap_sync_reg_grp_ISPpipeline_fu_211_ap_ready);
    empty_325_fu_321_p1 <= width(12 - 1 downto 0);
    empty_326_fu_325_p1 <= height(12 - 1 downto 0);
    empty_fu_317_p1 <= mode_reg(1 - 1 downto 0);
    flag_load_load_fu_329_p1 <= flag;

    gamma_lut_ce0_assign_proc : process(grp_ISPpipeline_fu_211_gamma_lut_ce0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gamma_lut_ce0 <= grp_ISPpipeline_fu_211_gamma_lut_ce0;
        else 
            gamma_lut_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_ISPpipeline_fu_211_ap_continue_assign_proc : process(ap_CS_fsm_state3, ap_block_state3_on_subcall_done, ap_CS_fsm_state5, ap_block_state5_on_subcall_done)
    begin
        if ((((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            grp_ISPpipeline_fu_211_ap_continue <= ap_const_logic_1;
        else 
            grp_ISPpipeline_fu_211_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_ISPpipeline_fu_211_ap_start <= grp_ISPpipeline_fu_211_ap_start_reg;

    grp_ISPpipeline_fu_211_hist13_q0_assign_proc : process(hist0_awb_1_q0, hist1_awb_1_q0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_ISPpipeline_fu_211_hist13_q0 <= hist0_awb_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_ISPpipeline_fu_211_hist13_q0 <= hist1_awb_1_q0;
        else 
            grp_ISPpipeline_fu_211_hist13_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_ISPpipeline_fu_211_hist14_q0_assign_proc : process(hist0_awb_2_q0, hist1_awb_2_q0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_ISPpipeline_fu_211_hist14_q0 <= hist0_awb_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_ISPpipeline_fu_211_hist14_q0 <= hist1_awb_2_q0;
        else 
            grp_ISPpipeline_fu_211_hist14_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_ISPpipeline_fu_211_hist1_q0_assign_proc : process(hist0_awb_0_q0, hist1_awb_0_q0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_ISPpipeline_fu_211_hist1_q0 <= hist0_awb_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_ISPpipeline_fu_211_hist1_q0 <= hist1_awb_0_q0;
        else 
            grp_ISPpipeline_fu_211_hist1_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_ISPpipeline_fu_211_m_axis_video_TREADY <= ((m_axis_video_TREADY_int_regslice and ap_CS_fsm_state5) or (m_axis_video_TREADY_int_regslice and ap_CS_fsm_state3));

    hist0_awb_0_address0_assign_proc : process(grp_ISPpipeline_fu_211_hist0_address0, grp_ISPpipeline_fu_211_hist1_address0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            hist0_awb_0_address0 <= grp_ISPpipeline_fu_211_hist1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            hist0_awb_0_address0 <= grp_ISPpipeline_fu_211_hist0_address0;
        else 
            hist0_awb_0_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    hist0_awb_0_ce0_assign_proc : process(grp_ISPpipeline_fu_211_hist0_ce0, grp_ISPpipeline_fu_211_hist1_ce0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            hist0_awb_0_ce0 <= grp_ISPpipeline_fu_211_hist1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            hist0_awb_0_ce0 <= grp_ISPpipeline_fu_211_hist0_ce0;
        else 
            hist0_awb_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hist0_awb_0_we0_assign_proc : process(grp_ISPpipeline_fu_211_hist0_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            hist0_awb_0_we0 <= grp_ISPpipeline_fu_211_hist0_we0;
        else 
            hist0_awb_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    hist0_awb_1_address0_assign_proc : process(grp_ISPpipeline_fu_211_hist01_address0, grp_ISPpipeline_fu_211_hist13_address0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            hist0_awb_1_address0 <= grp_ISPpipeline_fu_211_hist13_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            hist0_awb_1_address0 <= grp_ISPpipeline_fu_211_hist01_address0;
        else 
            hist0_awb_1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    hist0_awb_1_ce0_assign_proc : process(grp_ISPpipeline_fu_211_hist01_ce0, grp_ISPpipeline_fu_211_hist13_ce0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            hist0_awb_1_ce0 <= grp_ISPpipeline_fu_211_hist13_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            hist0_awb_1_ce0 <= grp_ISPpipeline_fu_211_hist01_ce0;
        else 
            hist0_awb_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hist0_awb_1_we0_assign_proc : process(grp_ISPpipeline_fu_211_hist01_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            hist0_awb_1_we0 <= grp_ISPpipeline_fu_211_hist01_we0;
        else 
            hist0_awb_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    hist0_awb_2_address0_assign_proc : process(grp_ISPpipeline_fu_211_hist02_address0, grp_ISPpipeline_fu_211_hist14_address0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            hist0_awb_2_address0 <= grp_ISPpipeline_fu_211_hist14_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            hist0_awb_2_address0 <= grp_ISPpipeline_fu_211_hist02_address0;
        else 
            hist0_awb_2_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    hist0_awb_2_ce0_assign_proc : process(grp_ISPpipeline_fu_211_hist02_ce0, grp_ISPpipeline_fu_211_hist14_ce0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            hist0_awb_2_ce0 <= grp_ISPpipeline_fu_211_hist14_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            hist0_awb_2_ce0 <= grp_ISPpipeline_fu_211_hist02_ce0;
        else 
            hist0_awb_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hist0_awb_2_we0_assign_proc : process(grp_ISPpipeline_fu_211_hist02_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            hist0_awb_2_we0 <= grp_ISPpipeline_fu_211_hist02_we0;
        else 
            hist0_awb_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    hist1_awb_0_address0_assign_proc : process(grp_ISPpipeline_fu_211_hist0_address0, grp_ISPpipeline_fu_211_hist1_address0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            hist1_awb_0_address0 <= grp_ISPpipeline_fu_211_hist1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            hist1_awb_0_address0 <= grp_ISPpipeline_fu_211_hist0_address0;
        else 
            hist1_awb_0_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    hist1_awb_0_ce0_assign_proc : process(grp_ISPpipeline_fu_211_hist0_ce0, grp_ISPpipeline_fu_211_hist1_ce0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            hist1_awb_0_ce0 <= grp_ISPpipeline_fu_211_hist1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            hist1_awb_0_ce0 <= grp_ISPpipeline_fu_211_hist0_ce0;
        else 
            hist1_awb_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hist1_awb_0_we0_assign_proc : process(grp_ISPpipeline_fu_211_hist0_we0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            hist1_awb_0_we0 <= grp_ISPpipeline_fu_211_hist0_we0;
        else 
            hist1_awb_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    hist1_awb_1_address0_assign_proc : process(grp_ISPpipeline_fu_211_hist01_address0, grp_ISPpipeline_fu_211_hist13_address0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            hist1_awb_1_address0 <= grp_ISPpipeline_fu_211_hist13_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            hist1_awb_1_address0 <= grp_ISPpipeline_fu_211_hist01_address0;
        else 
            hist1_awb_1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    hist1_awb_1_ce0_assign_proc : process(grp_ISPpipeline_fu_211_hist01_ce0, grp_ISPpipeline_fu_211_hist13_ce0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            hist1_awb_1_ce0 <= grp_ISPpipeline_fu_211_hist13_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            hist1_awb_1_ce0 <= grp_ISPpipeline_fu_211_hist01_ce0;
        else 
            hist1_awb_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hist1_awb_1_we0_assign_proc : process(grp_ISPpipeline_fu_211_hist01_we0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            hist1_awb_1_we0 <= grp_ISPpipeline_fu_211_hist01_we0;
        else 
            hist1_awb_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    hist1_awb_2_address0_assign_proc : process(grp_ISPpipeline_fu_211_hist02_address0, grp_ISPpipeline_fu_211_hist14_address0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            hist1_awb_2_address0 <= grp_ISPpipeline_fu_211_hist14_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            hist1_awb_2_address0 <= grp_ISPpipeline_fu_211_hist02_address0;
        else 
            hist1_awb_2_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    hist1_awb_2_ce0_assign_proc : process(grp_ISPpipeline_fu_211_hist02_ce0, grp_ISPpipeline_fu_211_hist14_ce0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            hist1_awb_2_ce0 <= grp_ISPpipeline_fu_211_hist14_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            hist1_awb_2_ce0 <= grp_ISPpipeline_fu_211_hist02_ce0;
        else 
            hist1_awb_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hist1_awb_2_we0_assign_proc : process(grp_ISPpipeline_fu_211_hist02_we0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            hist1_awb_2_we0 <= grp_ISPpipeline_fu_211_hist02_we0;
        else 
            hist1_awb_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    m_axis_video_TVALID <= regslice_both_m_axis_video_V_data_V_U_vld_out;

    m_axis_video_TVALID_int_regslice_assign_proc : process(grp_ISPpipeline_fu_211_m_axis_video_TVALID, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axis_video_TVALID_int_regslice <= grp_ISPpipeline_fu_211_m_axis_video_TVALID;
        else 
            m_axis_video_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    s_axis_video_TREADY <= regslice_both_s_axis_video_V_data_V_U_ack_in;

    s_axis_video_TREADY_int_regslice_assign_proc : process(grp_ISPpipeline_fu_211_s_axis_video_TREADY, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            s_axis_video_TREADY_int_regslice <= grp_ISPpipeline_fu_211_s_axis_video_TREADY;
        else 
            s_axis_video_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

end behav;
