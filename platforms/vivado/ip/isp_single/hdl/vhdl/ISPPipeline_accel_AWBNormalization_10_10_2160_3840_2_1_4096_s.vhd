-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ISPPipeline_accel_AWBNormalization_10_10_2160_3840_2_1_4096_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    impop_41_dout : IN STD_LOGIC_VECTOR (95 downto 0);
    impop_41_empty_n : IN STD_LOGIC;
    impop_41_read : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (11 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (11 downto 0);
    ltm_in_4199_din : OUT STD_LOGIC_VECTOR (95 downto 0);
    ltm_in_4199_full_n : IN STD_LOGIC;
    ltm_in_4199_write : OUT STD_LOGIC;
    histogram_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    histogram_ce0 : OUT STD_LOGIC;
    histogram_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    histogram1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    histogram1_ce0 : OUT STD_LOGIC;
    histogram1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    histogram2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    histogram2_ce0 : OUT STD_LOGIC;
    histogram2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    thresh : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of ISPPipeline_accel_AWBNormalization_10_10_2160_3840_2_1_4096_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_start : STD_LOGIC;
    signal grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_done : STD_LOGIC;
    signal grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_idle : STD_LOGIC;
    signal grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_ready : STD_LOGIC;
    signal grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_impop_41_read : STD_LOGIC;
    signal grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ltm_in_4199_din : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ltm_in_4199_write : STD_LOGIC;
    signal grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_hist_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_hist_ce0 : STD_LOGIC;
    signal grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_hist1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_hist1_ce0 : STD_LOGIC;
    signal grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_hist2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_hist2_ce0 : STD_LOGIC;
    signal grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call5 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ISPPipeline_accel_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        impop_41_dout : IN STD_LOGIC_VECTOR (95 downto 0);
        impop_41_empty_n : IN STD_LOGIC;
        impop_41_read : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (11 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ltm_in_4199_din : OUT STD_LOGIC_VECTOR (95 downto 0);
        ltm_in_4199_full_n : IN STD_LOGIC;
        ltm_in_4199_write : OUT STD_LOGIC;
        hist_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        hist_ce0 : OUT STD_LOGIC;
        hist_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        hist1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        hist1_ce0 : OUT STD_LOGIC;
        hist1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        hist2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        hist2_ce0 : OUT STD_LOGIC;
        hist2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48 : component ISPPipeline_accel_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_start,
        ap_done => grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_done,
        ap_idle => grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_idle,
        ap_ready => grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_ready,
        impop_41_dout => impop_41_dout,
        impop_41_empty_n => impop_41_empty_n,
        impop_41_read => grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_impop_41_read,
        p_read => p_read,
        p_read1 => p_read1,
        ltm_in_4199_din => grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ltm_in_4199_din,
        ltm_in_4199_full_n => ltm_in_4199_full_n,
        ltm_in_4199_write => grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ltm_in_4199_write,
        hist_address0 => grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_hist_address0,
        hist_ce0 => grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_hist_ce0,
        hist_q0 => histogram_q0,
        hist1_address0 => grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_hist1_address0,
        hist1_ce0 => grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_hist1_ce0,
        hist1_q0 => histogram1_q0,
        hist2_address0 => grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_hist2_address0,
        hist2_ce0 => grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_hist2_ce0,
        hist2_q0 => histogram2_q0,
        p => thresh);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_ready = ap_const_logic_1)) then 
                    grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_done)
    begin
        if ((grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call5_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_ignore_call5 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_start <= grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ap_start_reg;
    histogram1_address0 <= grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_hist1_address0;
    histogram1_ce0 <= grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_hist1_ce0;
    histogram2_address0 <= grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_hist2_address0;
    histogram2_ce0 <= grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_hist2_ce0;
    histogram_address0 <= grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_hist_address0;
    histogram_ce0 <= grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_hist_ce0;

    impop_41_read_assign_proc : process(grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_impop_41_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            impop_41_read <= grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_impop_41_read;
        else 
            impop_41_read <= ap_const_logic_0;
        end if; 
    end process;

    ltm_in_4199_din <= grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ltm_in_4199_din;

    ltm_in_4199_write_assign_proc : process(grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ltm_in_4199_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ltm_in_4199_write <= grp_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_s_fu_48_ltm_in_4199_write;
        else 
            ltm_in_4199_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
