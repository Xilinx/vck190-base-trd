// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ISPPipeline_accel_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_Pipeline_VITIS_LOOP_329_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        maxValue_V_load_2,
        maxValue_V_load_1,
        maxValue_V_load,
        zext_ln285,
        hist_address0,
        hist_ce0,
        hist_q0,
        hist1_address0,
        hist1_ce0,
        hist1_q0,
        hist2_address0,
        hist2_ce0,
        hist2_q0,
        j,
        conv_i_i988,
        maxValue_V_0_i,
        maxValue_V_0_o,
        maxValue_V_0_o_ap_vld,
        maxValue_V_1_i,
        maxValue_V_1_o,
        maxValue_V_1_o_ap_vld,
        maxValue_V_2_i,
        maxValue_V_2_o,
        maxValue_V_2_o_ap_vld,
        maxValue_V_load_250_out,
        maxValue_V_load_250_out_ap_vld,
        maxValue_V_load_144_out,
        maxValue_V_load_144_out_ap_vld,
        maxValue_V_load38_out,
        maxValue_V_load38_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] maxValue_V_load_2;
input  [23:0] maxValue_V_load_1;
input  [23:0] maxValue_V_load;
input  [23:0] zext_ln285;
output  [11:0] hist_address0;
output   hist_ce0;
input  [31:0] hist_q0;
output  [11:0] hist1_address0;
output   hist1_ce0;
input  [31:0] hist1_q0;
output  [11:0] hist2_address0;
output   hist2_ce0;
input  [31:0] hist2_q0;
input  [1:0] j;
input  [30:0] conv_i_i988;
input  [23:0] maxValue_V_0_i;
output  [23:0] maxValue_V_0_o;
output   maxValue_V_0_o_ap_vld;
input  [23:0] maxValue_V_1_i;
output  [23:0] maxValue_V_1_o;
output   maxValue_V_1_o_ap_vld;
input  [23:0] maxValue_V_2_i;
output  [23:0] maxValue_V_2_o;
output   maxValue_V_2_o_ap_vld;
output  [23:0] maxValue_V_load_250_out;
output   maxValue_V_load_250_out_ap_vld;
output  [23:0] maxValue_V_load_144_out;
output   maxValue_V_load_144_out_ap_vld;
output  [23:0] maxValue_V_load38_out;
output   maxValue_V_load38_out_ap_vld;

reg ap_idle;
reg hist_ce0;
reg hist1_ce0;
reg hist2_ce0;
reg[23:0] maxValue_V_0_o;
reg maxValue_V_0_o_ap_vld;
reg[23:0] maxValue_V_1_o;
reg maxValue_V_1_o_ap_vld;
reg[23:0] maxValue_V_2_o;
reg maxValue_V_2_o_ap_vld;
reg[23:0] maxValue_V_load_250_out;
reg maxValue_V_load_250_out_ap_vld;
reg[23:0] maxValue_V_load_144_out;
reg maxValue_V_load_144_out_ap_vld;
reg[23:0] maxValue_V_load38_out;
reg maxValue_V_load38_out_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
wire   [0:0] icmp_ln1053_fu_306_p2;
wire   [0:0] icmp_ln1065_fu_302_p2;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [1:0] j_read_reg_427;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [32:0] conv_i_i988_cast_fu_231_p1;
reg   [32:0] conv_i_i988_cast_reg_433;
reg   [17:0] t_V_1_reg_438;
reg   [31:0] n2_V_1_reg_459;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
wire   [31:0] rhs_fu_277_p5;
reg   [31:0] rhs_reg_464;
wire   [32:0] ret_fu_296_p2;
reg   [32:0] ret_reg_469;
wire   [63:0] zext_ln573_fu_267_p1;
reg   [31:0] lhs_V_fu_76;
wire   [31:0] n2_V_fu_316_p2;
wire   [31:0] zext_ln285_cast_fu_235_p1;
wire    ap_loop_init;
reg   [17:0] t_V_fu_80;
wire   [17:0] p2_V_fu_311_p2;
reg   [17:0] ap_sig_allocacmp_t_V_1;
reg   [23:0] maxValue_V_2_1_fu_84;
wire   [23:0] maxValue_V_0_2_fu_331_p2;
wire   [23:0] maxValue_V_2_1_load_load_fu_377_p1;
reg   [23:0] maxValue_V_2_2_fu_88;
wire   [23:0] maxValue_V_2_2_load_load_fu_381_p1;
reg   [23:0] maxValue_V_2_3_fu_92;
wire   [23:0] maxValue_V_2_3_load_load_fu_385_p1;
wire   [32:0] zext_ln225_fu_288_p1;
wire   [32:0] zext_ln225_36_fu_292_p1;
wire   [23:0] tmp_s_fu_320_p5;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_done_reg = 1'b0;
end

ISPPipeline_accel_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U468(
    .din0(hist_q0),
    .din1(hist1_q0),
    .din2(hist2_q0),
    .din3(j),
    .dout(rhs_fu_277_p5)
);

ISPPipeline_accel_mux_32_24_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 24 ),
    .din2_WIDTH( 24 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 24 ))
mux_32_24_1_1_U469(
    .din0(maxValue_V_0_i),
    .din1(maxValue_V_1_i),
    .din2(maxValue_V_2_i),
    .din3(j),
    .dout(tmp_s_fu_320_p5)
);

ISPPipeline_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        lhs_V_fu_76 <= zext_ln285_cast_fu_235_p1;
    end else if (((icmp_ln1065_fu_302_p2 == 1'd1) & (icmp_ln1053_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        lhs_V_fu_76 <= n2_V_fu_316_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        maxValue_V_2_1_fu_84 <= maxValue_V_load;
    end else if (((j_read_reg_427 == 2'd0) & (icmp_ln1065_fu_302_p2 == 1'd1) & (icmp_ln1053_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        maxValue_V_2_1_fu_84 <= maxValue_V_0_2_fu_331_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        maxValue_V_2_2_fu_88 <= maxValue_V_load_1;
    end else if (((j_read_reg_427 == 2'd1) & (icmp_ln1065_fu_302_p2 == 1'd1) & (icmp_ln1053_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        maxValue_V_2_2_fu_88 <= maxValue_V_0_2_fu_331_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        maxValue_V_2_3_fu_92 <= maxValue_V_load_2;
    end else if ((~(j_read_reg_427 == 2'd1) & ~(j_read_reg_427 == 2'd0) & (icmp_ln1065_fu_302_p2 == 1'd1) & (icmp_ln1053_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        maxValue_V_2_3_fu_92 <= maxValue_V_0_2_fu_331_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        t_V_fu_80 <= 18'd4095;
    end else if (((icmp_ln1065_fu_302_p2 == 1'd1) & (icmp_ln1053_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        t_V_fu_80 <= p2_V_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_i_i988_cast_reg_433[30 : 0] <= conv_i_i988_cast_fu_231_p1[30 : 0];
        t_V_1_reg_438 <= ap_sig_allocacmp_t_V_1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        n2_V_1_reg_459 <= lhs_V_fu_76;
        ret_reg_469 <= ret_fu_296_p2;
        rhs_reg_464 <= rhs_fu_277_p5;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ((icmp_ln1065_fu_302_p2 == 1'd0) | (icmp_ln1053_fu_306_p2 == 1'd1)))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_t_V_1 = 18'd4095;
    end else begin
        ap_sig_allocacmp_t_V_1 = t_V_fu_80;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        hist1_ce0 = 1'b1;
    end else begin
        hist1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        hist2_ce0 = 1'b1;
    end else begin
        hist2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        hist_ce0 = 1'b1;
    end else begin
        hist_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((j_read_reg_427 == 2'd0) & (icmp_ln1065_fu_302_p2 == 1'd1) & (icmp_ln1053_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        maxValue_V_0_o = maxValue_V_0_2_fu_331_p2;
    end else begin
        maxValue_V_0_o = maxValue_V_0_i;
    end
end

always @ (*) begin
    if (((j_read_reg_427 == 2'd0) & (icmp_ln1065_fu_302_p2 == 1'd1) & (icmp_ln1053_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        maxValue_V_0_o_ap_vld = 1'b1;
    end else begin
        maxValue_V_0_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((j_read_reg_427 == 2'd1) & (icmp_ln1065_fu_302_p2 == 1'd1) & (icmp_ln1053_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        maxValue_V_1_o = maxValue_V_0_2_fu_331_p2;
    end else begin
        maxValue_V_1_o = maxValue_V_1_i;
    end
end

always @ (*) begin
    if (((j_read_reg_427 == 2'd1) & (icmp_ln1065_fu_302_p2 == 1'd1) & (icmp_ln1053_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        maxValue_V_1_o_ap_vld = 1'b1;
    end else begin
        maxValue_V_1_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~(j_read_reg_427 == 2'd1) & ~(j_read_reg_427 == 2'd0) & (icmp_ln1065_fu_302_p2 == 1'd1) & (icmp_ln1053_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        maxValue_V_2_o = maxValue_V_0_2_fu_331_p2;
    end else begin
        maxValue_V_2_o = maxValue_V_2_i;
    end
end

always @ (*) begin
    if ((~(j_read_reg_427 == 2'd1) & ~(j_read_reg_427 == 2'd0) & (icmp_ln1065_fu_302_p2 == 1'd1) & (icmp_ln1053_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        maxValue_V_2_o_ap_vld = 1'b1;
    end else begin
        maxValue_V_2_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if ((icmp_ln1065_fu_302_p2 == 1'd0)) begin
            maxValue_V_load38_out = maxValue_V_2_1_load_load_fu_377_p1;
        end else if (((icmp_ln1065_fu_302_p2 == 1'd1) & (icmp_ln1053_fu_306_p2 == 1'd1))) begin
            maxValue_V_load38_out = maxValue_V_2_1_fu_84;
        end else begin
            maxValue_V_load38_out = 'bx;
        end
    end else begin
        maxValue_V_load38_out = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln1065_fu_302_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((icmp_ln1065_fu_302_p2 == 1'd1) & (icmp_ln1053_fu_306_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        maxValue_V_load38_out_ap_vld = 1'b1;
    end else begin
        maxValue_V_load38_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if ((icmp_ln1065_fu_302_p2 == 1'd0)) begin
            maxValue_V_load_144_out = maxValue_V_2_2_load_load_fu_381_p1;
        end else if (((icmp_ln1065_fu_302_p2 == 1'd1) & (icmp_ln1053_fu_306_p2 == 1'd1))) begin
            maxValue_V_load_144_out = maxValue_V_2_2_fu_88;
        end else begin
            maxValue_V_load_144_out = 'bx;
        end
    end else begin
        maxValue_V_load_144_out = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln1065_fu_302_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((icmp_ln1065_fu_302_p2 == 1'd1) & (icmp_ln1053_fu_306_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        maxValue_V_load_144_out_ap_vld = 1'b1;
    end else begin
        maxValue_V_load_144_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if ((icmp_ln1065_fu_302_p2 == 1'd0)) begin
            maxValue_V_load_250_out = maxValue_V_2_3_load_load_fu_385_p1;
        end else if (((icmp_ln1065_fu_302_p2 == 1'd1) & (icmp_ln1053_fu_306_p2 == 1'd1))) begin
            maxValue_V_load_250_out = maxValue_V_2_3_fu_92;
        end else begin
            maxValue_V_load_250_out = 'bx;
        end
    end else begin
        maxValue_V_load_250_out = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln1065_fu_302_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((icmp_ln1065_fu_302_p2 == 1'd1) & (icmp_ln1053_fu_306_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        maxValue_V_load_250_out_ap_vld = 1'b1;
    end else begin
        maxValue_V_load_250_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign conv_i_i988_cast_fu_231_p1 = conv_i_i988;

assign hist1_address0 = zext_ln573_fu_267_p1;

assign hist2_address0 = zext_ln573_fu_267_p1;

assign hist_address0 = zext_ln573_fu_267_p1;

assign icmp_ln1053_fu_306_p2 = ((t_V_1_reg_438 == 18'd0) ? 1'b1 : 1'b0);

assign icmp_ln1065_fu_302_p2 = (($signed(ret_reg_469) > $signed(conv_i_i988_cast_reg_433)) ? 1'b1 : 1'b0);

assign j_read_reg_427 = j;

assign maxValue_V_0_2_fu_331_p2 = ($signed(tmp_s_fu_320_p5) + $signed(24'd16776192));

assign maxValue_V_2_1_load_load_fu_377_p1 = maxValue_V_2_1_fu_84;

assign maxValue_V_2_2_load_load_fu_381_p1 = maxValue_V_2_2_fu_88;

assign maxValue_V_2_3_load_load_fu_385_p1 = maxValue_V_2_3_fu_92;

assign n2_V_fu_316_p2 = (n2_V_1_reg_459 - rhs_reg_464);

assign p2_V_fu_311_p2 = ($signed(t_V_1_reg_438) + $signed(18'd262143));

assign ret_fu_296_p2 = (zext_ln225_fu_288_p1 - zext_ln225_36_fu_292_p1);

assign zext_ln225_36_fu_292_p1 = rhs_fu_277_p5;

assign zext_ln225_fu_288_p1 = lhs_V_fu_76;

assign zext_ln285_cast_fu_235_p1 = zext_ln285;

assign zext_ln573_fu_267_p1 = ap_sig_allocacmp_t_V_1;

always @ (posedge ap_clk) begin
    conv_i_i988_cast_reg_433[32:31] <= 2'b00;
end

endmodule //ISPPipeline_accel_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_Pipeline_VITIS_LOOP_329_4
