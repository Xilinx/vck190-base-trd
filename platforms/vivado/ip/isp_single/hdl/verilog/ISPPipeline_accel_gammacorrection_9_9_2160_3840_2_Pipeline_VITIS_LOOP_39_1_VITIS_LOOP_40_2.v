// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ISPPipeline_accel_gammacorrection_9_9_2160_3840_2_Pipeline_VITIS_LOOP_39_1_VITIS_LOOP_40_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        gamma_lut_address0,
        gamma_lut_ce0,
        gamma_lut_q0,
        lut_2_0_address0,
        lut_2_0_ce0,
        lut_2_0_we0,
        lut_2_0_d0,
        lut_2_1_address0,
        lut_2_1_ce0,
        lut_2_1_we0,
        lut_2_1_d0,
        lut_1_0_address0,
        lut_1_0_ce0,
        lut_1_0_we0,
        lut_1_0_d0,
        lut_1_1_address0,
        lut_1_1_ce0,
        lut_1_1_we0,
        lut_1_1_d0,
        lut_0_0_address0,
        lut_0_0_ce0,
        lut_0_0_we0,
        lut_0_0_d0,
        lut_0_1_address0,
        lut_0_1_ce0,
        lut_0_1_we0,
        lut_0_1_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] gamma_lut_address0;
output   gamma_lut_ce0;
input  [7:0] gamma_lut_q0;
output  [7:0] lut_2_0_address0;
output   lut_2_0_ce0;
output   lut_2_0_we0;
output  [7:0] lut_2_0_d0;
output  [7:0] lut_2_1_address0;
output   lut_2_1_ce0;
output   lut_2_1_we0;
output  [7:0] lut_2_1_d0;
output  [7:0] lut_1_0_address0;
output   lut_1_0_ce0;
output   lut_1_0_we0;
output  [7:0] lut_1_0_d0;
output  [7:0] lut_1_1_address0;
output   lut_1_1_ce0;
output   lut_1_1_we0;
output  [7:0] lut_1_1_d0;
output  [7:0] lut_0_0_address0;
output   lut_0_0_ce0;
output   lut_0_0_we0;
output  [7:0] lut_0_0_d0;
output  [7:0] lut_0_1_address0;
output   lut_0_1_ce0;
output   lut_0_1_we0;
output  [7:0] lut_0_1_d0;

reg ap_idle;
reg[9:0] gamma_lut_address0;
reg gamma_lut_ce0;
reg lut_2_0_ce0;
reg lut_2_0_we0;
reg lut_2_1_ce0;
reg lut_2_1_we0;
reg lut_1_0_ce0;
reg lut_1_0_we0;
reg lut_1_1_ce0;
reg lut_1_1_we0;
reg lut_0_0_ce0;
reg lut_0_0_we0;
reg lut_0_1_ce0;
reg lut_0_1_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1057_fu_213_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_subdone;
reg   [0:0] icmp_ln1057_reg_332;
wire    ap_block_pp0_stage0_11001;
wire   [8:0] select_ln26_fu_231_p3;
reg   [8:0] select_ln26_reg_336;
wire   [0:0] trunc_ln26_fu_253_p1;
reg   [0:0] trunc_ln26_reg_342;
reg   [7:0] lut_0_0_addr_reg_351;
reg   [7:0] lut_0_1_addr_reg_356;
reg   [7:0] lut_1_0_addr_reg_361;
reg   [7:0] lut_1_1_addr_reg_366;
reg   [7:0] lut_2_0_addr_reg_371;
reg   [7:0] lut_2_1_addr_reg_376;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire    ap_block_pp0_stage2_11001;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln573_fu_257_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln573_1_fu_294_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln573_2_fu_306_p1;
wire    ap_block_pp0_stage2;
reg   [8:0] lhs_fu_70;
wire    ap_loop_init;
reg   [8:0] ap_sig_allocacmp_lhs_load;
wire   [8:0] j_V_fu_268_p2;
reg   [1:0] i_V_fu_74;
reg   [1:0] ap_sig_allocacmp_i_V_load;
wire   [1:0] select_ln26_1_fu_245_p3;
reg   [9:0] indvar_flatten_fu_78;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [9:0] add_ln1057_fu_207_p2;
wire   [0:0] icmp_ln1057_1_fu_225_p2;
wire   [1:0] add_ln870_fu_239_p2;
wire   [8:0] ret_fu_289_p2;
wire   [9:0] ret_16_fu_299_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

ISPPipeline_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1057_fu_213_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_V_fu_74 <= select_ln26_1_fu_245_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_V_fu_74 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1057_fu_213_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_78 <= add_ln1057_fu_207_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_78 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1057_fu_213_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            lhs_fu_70 <= j_V_fu_268_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            lhs_fu_70 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1057_reg_332 <= icmp_ln1057_fu_213_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_fu_213_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lut_0_0_addr_reg_351 <= zext_ln573_fu_257_p1;
        lut_0_1_addr_reg_356 <= zext_ln573_fu_257_p1;
        lut_1_0_addr_reg_361 <= zext_ln573_fu_257_p1;
        lut_1_1_addr_reg_366 <= zext_ln573_fu_257_p1;
        lut_2_0_addr_reg_371 <= zext_ln573_fu_257_p1;
        lut_2_1_addr_reg_376 <= zext_ln573_fu_257_p1;
        select_ln26_reg_336 <= select_ln26_fu_231_p3;
        trunc_ln26_reg_342 <= trunc_ln26_fu_253_p1;
    end
end

always @ (*) begin
    if (((icmp_ln1057_fu_213_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_V_load = 2'd0;
    end else begin
        ap_sig_allocacmp_i_V_load = i_V_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_lhs_load = 9'd0;
    end else begin
        ap_sig_allocacmp_lhs_load = lhs_fu_70;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            gamma_lut_address0 = zext_ln573_2_fu_306_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            gamma_lut_address0 = zext_ln573_1_fu_294_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            gamma_lut_address0 = zext_ln573_fu_257_p1;
        end else begin
            gamma_lut_address0 = 'bx;
        end
    end else begin
        gamma_lut_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        gamma_lut_ce0 = 1'b1;
    end else begin
        gamma_lut_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        lut_0_0_ce0 = 1'b1;
    end else begin
        lut_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (trunc_ln26_reg_342 == 1'd0) & (icmp_ln1057_reg_332 == 1'd0))) begin
        lut_0_0_we0 = 1'b1;
    end else begin
        lut_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        lut_0_1_ce0 = 1'b1;
    end else begin
        lut_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (trunc_ln26_reg_342 == 1'd1) & (icmp_ln1057_reg_332 == 1'd0))) begin
        lut_0_1_we0 = 1'b1;
    end else begin
        lut_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        lut_1_0_ce0 = 1'b1;
    end else begin
        lut_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (trunc_ln26_reg_342 == 1'd0) & (icmp_ln1057_reg_332 == 1'd0))) begin
        lut_1_0_we0 = 1'b1;
    end else begin
        lut_1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        lut_1_1_ce0 = 1'b1;
    end else begin
        lut_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (trunc_ln26_reg_342 == 1'd1) & (icmp_ln1057_reg_332 == 1'd0))) begin
        lut_1_1_we0 = 1'b1;
    end else begin
        lut_1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lut_2_0_ce0 = 1'b1;
    end else begin
        lut_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln26_reg_342 == 1'd0))) begin
        lut_2_0_we0 = 1'b1;
    end else begin
        lut_2_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lut_2_1_ce0 = 1'b1;
    end else begin
        lut_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln26_reg_342 == 1'd1))) begin
        lut_2_1_we0 = 1'b1;
    end else begin
        lut_2_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1057_fu_207_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln870_fu_239_p2 = (ap_sig_allocacmp_i_V_load + 2'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln1057_1_fu_225_p2 = ((ap_sig_allocacmp_lhs_load == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln1057_fu_213_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd512) ? 1'b1 : 1'b0);

assign j_V_fu_268_p2 = (select_ln26_fu_231_p3 + 9'd1);

assign lut_0_0_address0 = lut_0_0_addr_reg_351;

assign lut_0_0_d0 = gamma_lut_q0;

assign lut_0_1_address0 = lut_0_1_addr_reg_356;

assign lut_0_1_d0 = gamma_lut_q0;

assign lut_1_0_address0 = lut_1_0_addr_reg_361;

assign lut_1_0_d0 = gamma_lut_q0;

assign lut_1_1_address0 = lut_1_1_addr_reg_366;

assign lut_1_1_d0 = gamma_lut_q0;

assign lut_2_0_address0 = lut_2_0_addr_reg_371;

assign lut_2_0_d0 = gamma_lut_q0;

assign lut_2_1_address0 = lut_2_1_addr_reg_376;

assign lut_2_1_d0 = gamma_lut_q0;

assign ret_16_fu_299_p3 = {{1'd1}, {select_ln26_reg_336}};

assign ret_fu_289_p2 = (select_ln26_reg_336 ^ 9'd256);

assign select_ln26_1_fu_245_p3 = ((icmp_ln1057_1_fu_225_p2[0:0] == 1'b1) ? add_ln870_fu_239_p2 : ap_sig_allocacmp_i_V_load);

assign select_ln26_fu_231_p3 = ((icmp_ln1057_1_fu_225_p2[0:0] == 1'b1) ? 9'd0 : ap_sig_allocacmp_lhs_load);

assign trunc_ln26_fu_253_p1 = select_ln26_1_fu_245_p3[0:0];

assign zext_ln573_1_fu_294_p1 = ret_fu_289_p2;

assign zext_ln573_2_fu_306_p1 = ret_16_fu_299_p3;

assign zext_ln573_fu_257_p1 = select_ln26_fu_231_p3;

endmodule //ISPPipeline_accel_gammacorrection_9_9_2160_3840_2_Pipeline_VITIS_LOOP_39_1_VITIS_LOOP_40_2
