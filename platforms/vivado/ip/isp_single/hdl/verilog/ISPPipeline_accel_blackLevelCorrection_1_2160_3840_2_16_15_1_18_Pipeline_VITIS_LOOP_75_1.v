// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ISPPipeline_accel_blackLevelCorrection_1_2160_3840_2_16_15_1_18_Pipeline_VITIS_LOOP_75_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        imgInput1_4195_dout,
        imgInput1_4195_empty_n,
        imgInput1_4195_read,
        imgInput2_4196_din,
        imgInput2_4196_full_n,
        imgInput2_4196_write,
        LoopCount
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] imgInput1_4195_dout;
input   imgInput1_4195_empty_n;
output   imgInput1_4195_read;
output  [31:0] imgInput2_4196_din;
input   imgInput2_4196_full_n;
output   imgInput2_4196_write;
input  [22:0] LoopCount;

reg ap_idle;
reg imgInput1_4195_read;
reg imgInput2_4196_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln75_fu_107_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    imgInput1_4195_blk_n;
wire    ap_block_pp0_stage0;
reg    imgInput2_4196_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [15:0] ret_fu_122_p2;
reg   [15:0] ret_reg_278;
wire   [0:0] icmp_ln1057_fu_138_p2;
reg   [0:0] icmp_ln1057_reg_284;
wire   [15:0] ret_24_fu_154_p2;
reg   [15:0] ret_24_reg_289;
wire   [0:0] icmp_ln1057_2_fu_170_p2;
reg   [0:0] icmp_ln1057_2_reg_295;
reg   [22:0] i_5_fu_70;
wire    ap_loop_init;
reg   [22:0] ap_sig_allocacmp_i;
wire   [22:0] i_6_fu_101_p2;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] in_val_fu_118_p1;
wire   [10:0] tmp_74_fu_128_p4;
wire   [15:0] in_val_1_fu_144_p4;
wire   [10:0] tmp_75_fu_160_p4;
wire   [19:0] shl_ln1171_1_fu_183_p3;
wire   [30:0] shl_ln_fu_176_p3;
wire   [30:0] zext_ln1171_fu_190_p1;
wire   [30:0] r_V_26_fu_194_p2;
wire   [15:0] tmp_fu_200_p4;
wire   [19:0] shl_ln1171_3_fu_224_p3;
wire   [30:0] shl_ln1171_2_fu_217_p3;
wire   [30:0] zext_ln1171_1_fu_231_p1;
wire   [30:0] r_V_fu_235_p2;
wire   [15:0] tmp_s_fu_241_p4;
wire   [15:0] select_ln1057_2_fu_251_p3;
wire   [15:0] select_ln1057_fu_210_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

ISPPipeline_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln75_fu_107_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_5_fu_70 <= i_6_fu_101_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_5_fu_70 <= 23'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln1057_2_reg_295 <= icmp_ln1057_2_fu_170_p2;
        icmp_ln1057_reg_284 <= icmp_ln1057_fu_138_p2;
        ret_24_reg_289 <= ret_24_fu_154_p2;
        ret_reg_278 <= ret_fu_122_p2;
    end
end

always @ (*) begin
    if (((icmp_ln75_fu_107_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 23'd0;
    end else begin
        ap_sig_allocacmp_i = i_5_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgInput1_4195_blk_n = imgInput1_4195_empty_n;
    end else begin
        imgInput1_4195_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgInput1_4195_read = 1'b1;
    end else begin
        imgInput1_4195_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        imgInput2_4196_blk_n = imgInput2_4196_full_n;
    end else begin
        imgInput2_4196_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        imgInput2_4196_write = 1'b1;
    end else begin
        imgInput2_4196_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((imgInput2_4196_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((imgInput1_4195_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((imgInput2_4196_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((imgInput1_4195_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((imgInput2_4196_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((imgInput1_4195_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (imgInput1_4195_empty_n == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (imgInput2_4196_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_6_fu_101_p2 = (ap_sig_allocacmp_i + 23'd1);

assign icmp_ln1057_2_fu_170_p2 = ((tmp_75_fu_160_p4 == 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln1057_fu_138_p2 = ((tmp_74_fu_128_p4 == 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_107_p2 = ((ap_sig_allocacmp_i == LoopCount) ? 1'b1 : 1'b0);

assign imgInput2_4196_din = {{select_ln1057_2_fu_251_p3}, {select_ln1057_fu_210_p3}};

assign in_val_1_fu_144_p4 = {{imgInput1_4195_dout[31:16]}};

assign in_val_fu_118_p1 = imgInput1_4195_dout[15:0];

assign r_V_26_fu_194_p2 = (shl_ln_fu_176_p3 + zext_ln1171_fu_190_p1);

assign r_V_fu_235_p2 = (shl_ln1171_2_fu_217_p3 + zext_ln1171_1_fu_231_p1);

assign ret_24_fu_154_p2 = ($signed(in_val_1_fu_144_p4) + $signed(16'd65504));

assign ret_fu_122_p2 = ($signed(in_val_fu_118_p1) + $signed(16'd65504));

assign select_ln1057_2_fu_251_p3 = ((icmp_ln1057_2_reg_295[0:0] == 1'b1) ? 16'd0 : tmp_s_fu_241_p4);

assign select_ln1057_fu_210_p3 = ((icmp_ln1057_reg_284[0:0] == 1'b1) ? 16'd0 : tmp_fu_200_p4);

assign shl_ln1171_1_fu_183_p3 = {{ret_reg_278}, {4'd0}};

assign shl_ln1171_2_fu_217_p3 = {{ret_24_reg_289}, {15'd0}};

assign shl_ln1171_3_fu_224_p3 = {{ret_24_reg_289}, {4'd0}};

assign shl_ln_fu_176_p3 = {{ret_reg_278}, {15'd0}};

assign tmp_74_fu_128_p4 = {{imgInput1_4195_dout[15:5]}};

assign tmp_75_fu_160_p4 = {{imgInput1_4195_dout[31:21]}};

assign tmp_fu_200_p4 = {{r_V_26_fu_194_p2[30:15]}};

assign tmp_s_fu_241_p4 = {{r_V_fu_235_p2[30:15]}};

assign zext_ln1171_1_fu_231_p1 = shl_ln1171_3_fu_224_p3;

assign zext_ln1171_fu_190_p1 = shl_ln1171_1_fu_183_p3;

endmodule //ISPPipeline_accel_blackLevelCorrection_1_2160_3840_2_16_15_1_18_Pipeline_VITIS_LOOP_75_1
