// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ISPPipeline_accel_gaincontrol_3_1_2160_3840_2_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        imgInput2_4196_dout,
        imgInput2_4196_empty_n,
        imgInput2_4196_read,
        gain_out_4197_din,
        gain_out_4197_full_n,
        gain_out_4197_write,
        p_read2,
        p_read3
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [11:0] p_read;
input  [11:0] p_read1;
input  [31:0] imgInput2_4196_dout;
input   imgInput2_4196_empty_n;
output   imgInput2_4196_read;
output  [31:0] gain_out_4197_din;
input   gain_out_4197_full_n;
output   gain_out_4197_write;
input  [15:0] p_read2;
input  [15:0] p_read3;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg imgInput2_4196_read;
reg gain_out_4197_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [10:0] width_cast_reg_147;
wire   [0:0] ret_fu_110_p1;
reg   [0:0] ret_reg_152;
wire    ap_CS_fsm_state2;
wire    grp_gaincontrol_3_1_2160_3840_2_Pipeline_ColLoop_fu_74_ap_start;
wire    grp_gaincontrol_3_1_2160_3840_2_Pipeline_ColLoop_fu_74_ap_done;
wire    grp_gaincontrol_3_1_2160_3840_2_Pipeline_ColLoop_fu_74_ap_idle;
wire    grp_gaincontrol_3_1_2160_3840_2_Pipeline_ColLoop_fu_74_ap_ready;
wire    grp_gaincontrol_3_1_2160_3840_2_Pipeline_ColLoop_fu_74_imgInput2_4196_read;
wire   [31:0] grp_gaincontrol_3_1_2160_3840_2_Pipeline_ColLoop_fu_74_gain_out_4197_din;
wire    grp_gaincontrol_3_1_2160_3840_2_Pipeline_ColLoop_fu_74_gain_out_4197_write;
reg    grp_gaincontrol_3_1_2160_3840_2_Pipeline_ColLoop_fu_74_ap_start_reg;
wire   [0:0] icmp_ln86_fu_115_p2;
wire    ap_CS_fsm_state3;
reg   [11:0] i_V_fu_46;
wire   [11:0] i_V_5_fu_104_p2;
reg    ap_block_state1;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_gaincontrol_3_1_2160_3840_2_Pipeline_ColLoop_fu_74_ap_start_reg = 1'b0;
end

ISPPipeline_accel_gaincontrol_3_1_2160_3840_2_Pipeline_ColLoop grp_gaincontrol_3_1_2160_3840_2_Pipeline_ColLoop_fu_74(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_gaincontrol_3_1_2160_3840_2_Pipeline_ColLoop_fu_74_ap_start),
    .ap_done(grp_gaincontrol_3_1_2160_3840_2_Pipeline_ColLoop_fu_74_ap_done),
    .ap_idle(grp_gaincontrol_3_1_2160_3840_2_Pipeline_ColLoop_fu_74_ap_idle),
    .ap_ready(grp_gaincontrol_3_1_2160_3840_2_Pipeline_ColLoop_fu_74_ap_ready),
    .imgInput2_4196_dout(imgInput2_4196_dout),
    .imgInput2_4196_empty_n(imgInput2_4196_empty_n),
    .imgInput2_4196_read(grp_gaincontrol_3_1_2160_3840_2_Pipeline_ColLoop_fu_74_imgInput2_4196_read),
    .gain_out_4197_din(grp_gaincontrol_3_1_2160_3840_2_Pipeline_ColLoop_fu_74_gain_out_4197_din),
    .gain_out_4197_full_n(gain_out_4197_full_n),
    .gain_out_4197_write(grp_gaincontrol_3_1_2160_3840_2_Pipeline_ColLoop_fu_74_gain_out_4197_write),
    .width_cast(width_cast_reg_147),
    .rhs(p_read2),
    .ret(ret_reg_152),
    .rhs_37(p_read3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln86_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_gaincontrol_3_1_2160_3840_2_Pipeline_ColLoop_fu_74_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln86_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_gaincontrol_3_1_2160_3840_2_Pipeline_ColLoop_fu_74_ap_start_reg <= 1'b1;
        end else if ((grp_gaincontrol_3_1_2160_3840_2_Pipeline_ColLoop_fu_74_ap_ready == 1'b1)) begin
            grp_gaincontrol_3_1_2160_3840_2_Pipeline_ColLoop_fu_74_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_V_fu_46 <= 12'd0;
    end else if (((icmp_ln86_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_V_fu_46 <= i_V_5_fu_104_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ret_reg_152 <= ret_fu_110_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        width_cast_reg_147 <= {{p_read1[11:1]}};
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_gaincontrol_3_1_2160_3840_2_Pipeline_ColLoop_fu_74_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln86_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln86_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        gain_out_4197_write = grp_gaincontrol_3_1_2160_3840_2_Pipeline_ColLoop_fu_74_gain_out_4197_write;
    end else begin
        gain_out_4197_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        imgInput2_4196_read = grp_gaincontrol_3_1_2160_3840_2_Pipeline_ColLoop_fu_74_imgInput2_4196_read;
    end else begin
        imgInput2_4196_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln86_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_gaincontrol_3_1_2160_3840_2_Pipeline_ColLoop_fu_74_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign gain_out_4197_din = grp_gaincontrol_3_1_2160_3840_2_Pipeline_ColLoop_fu_74_gain_out_4197_din;

assign grp_gaincontrol_3_1_2160_3840_2_Pipeline_ColLoop_fu_74_ap_start = grp_gaincontrol_3_1_2160_3840_2_Pipeline_ColLoop_fu_74_ap_start_reg;

assign i_V_5_fu_104_p2 = (i_V_fu_46 + 12'd1);

assign icmp_ln86_fu_115_p2 = ((i_V_fu_46 == p_read) ? 1'b1 : 1'b0);

assign ret_fu_110_p1 = i_V_fu_46[0:0];

endmodule //ISPPipeline_accel_gaincontrol_3_1_2160_3840_2_s
