// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ISPPipeline_accel_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_Pipeline_VITIS_LOOP_319_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        minValue_V_load_2,
        minValue_V_load_1,
        minValue_V_load,
        hist_address0,
        hist_ce0,
        hist_q0,
        hist1_address0,
        hist1_ce0,
        hist1_q0,
        hist2_address0,
        hist2_ce0,
        hist2_q0,
        j,
        conv_i_i1068,
        minValue_V_0_i,
        minValue_V_0_o,
        minValue_V_0_o_ap_vld,
        minValue_V_1_i,
        minValue_V_1_o,
        minValue_V_1_o_ap_vld,
        minValue_V_2_i,
        minValue_V_2_o,
        minValue_V_2_o_ap_vld,
        minValue_V_load_253_out,
        minValue_V_load_253_out_ap_vld,
        minValue_V_load_147_out,
        minValue_V_load_147_out_ap_vld,
        minValue_V_load41_out,
        minValue_V_load41_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] minValue_V_load_2;
input  [23:0] minValue_V_load_1;
input  [23:0] minValue_V_load;
output  [11:0] hist_address0;
output   hist_ce0;
input  [31:0] hist_q0;
output  [11:0] hist1_address0;
output   hist1_ce0;
input  [31:0] hist1_q0;
output  [11:0] hist2_address0;
output   hist2_ce0;
input  [31:0] hist2_q0;
input  [1:0] j;
input  [28:0] conv_i_i1068;
input  [23:0] minValue_V_0_i;
output  [23:0] minValue_V_0_o;
output   minValue_V_0_o_ap_vld;
input  [23:0] minValue_V_1_i;
output  [23:0] minValue_V_1_o;
output   minValue_V_1_o_ap_vld;
input  [23:0] minValue_V_2_i;
output  [23:0] minValue_V_2_o;
output   minValue_V_2_o_ap_vld;
output  [23:0] minValue_V_load_253_out;
output   minValue_V_load_253_out_ap_vld;
output  [23:0] minValue_V_load_147_out;
output   minValue_V_load_147_out_ap_vld;
output  [23:0] minValue_V_load41_out;
output   minValue_V_load41_out_ap_vld;

reg ap_idle;
reg hist_ce0;
reg hist1_ce0;
reg hist2_ce0;
reg[23:0] minValue_V_0_o;
reg minValue_V_0_o_ap_vld;
reg[23:0] minValue_V_1_o;
reg minValue_V_1_o_ap_vld;
reg[23:0] minValue_V_2_o;
reg minValue_V_2_o_ap_vld;
reg minValue_V_load_253_out_ap_vld;
reg minValue_V_load_147_out_ap_vld;
reg minValue_V_load41_out_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_subdone;
wire   [0:0] and_ln319_fu_316_p2;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [1:0] j_read_reg_418;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire  signed [32:0] conv_i_i1068_cast_fu_227_p1;
reg  signed [32:0] conv_i_i1068_cast_reg_424;
reg   [12:0] p1_V_1_reg_429;
wire   [31:0] rhs_fu_266_p5;
reg   [31:0] rhs_reg_450;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire   [23:0] tmp_s_fu_327_p5;
reg   [23:0] tmp_s_reg_459;
wire    ap_block_pp0_stage2_11001;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln573_fu_259_p1;
wire    ap_block_pp0_stage0;
reg   [31:0] lhs_V_fu_78;
wire   [31:0] n1_V_fu_322_p2;
wire    ap_loop_init;
wire    ap_block_pp0_stage2;
reg   [12:0] t_V_fu_82;
wire   [12:0] p1_V_fu_280_p2;
reg   [12:0] ap_sig_allocacmp_p1_V_1;
reg   [23:0] minValue_V_2_1_fu_86;
wire   [23:0] minValue_V_0_2_fu_348_p2;
reg   [23:0] minValue_V_2_2_fu_90;
reg   [23:0] minValue_V_2_3_fu_94;
wire    ap_block_pp0_stage0_01001;
wire    ap_block_pp0_stage2_01001;
wire    ap_block_pp0_stage1;
wire   [32:0] zext_ln225_36_fu_289_p1;
wire   [32:0] zext_ln225_fu_285_p1;
wire   [32:0] ret_fu_292_p2;
wire   [0:0] tmp_fu_303_p3;
wire   [0:0] icmp_ln1057_fu_298_p2;
wire   [0:0] xor_ln1057_fu_310_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_312;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

ISPPipeline_accel_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U450(
    .din0(hist_q0),
    .din1(hist1_q0),
    .din2(hist2_q0),
    .din3(j),
    .dout(rhs_fu_266_p5)
);

ISPPipeline_accel_mux_32_24_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 24 ),
    .din2_WIDTH( 24 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 24 ))
mux_32_24_1_1_U451(
    .din0(minValue_V_0_i),
    .din1(minValue_V_1_i),
    .din2(minValue_V_2_i),
    .din3(j),
    .dout(tmp_s_fu_327_p5)
);

ISPPipeline_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_exit_pp0_iter0_stage2) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        lhs_V_fu_78 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'd1 == and_ln319_fu_316_p2))) begin
        lhs_V_fu_78 <= n1_V_fu_322_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            minValue_V_2_1_fu_86 <= minValue_V_load;
        end else if (((j_read_reg_418 == 2'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            minValue_V_2_1_fu_86 <= minValue_V_0_2_fu_348_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            minValue_V_2_2_fu_90 <= minValue_V_load_1;
        end else if (((j_read_reg_418 == 2'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            minValue_V_2_2_fu_90 <= minValue_V_0_2_fu_348_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            minValue_V_2_3_fu_94 <= minValue_V_load_2;
        end else if ((1'b1 == ap_condition_312)) begin
            minValue_V_2_3_fu_94 <= minValue_V_0_2_fu_348_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        t_V_fu_82 <= 13'd0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'd1 == and_ln319_fu_316_p2))) begin
        t_V_fu_82 <= p1_V_fu_280_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_i_i1068_cast_reg_424 <= conv_i_i1068_cast_fu_227_p1;
        p1_V_1_reg_429 <= ap_sig_allocacmp_p1_V_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        rhs_reg_450 <= rhs_fu_266_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'd1 == and_ln319_fu_316_p2))) begin
        tmp_s_reg_459 <= tmp_s_fu_327_p5;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln319_fu_316_p2) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_p1_V_1 = 13'd0;
    end else begin
        ap_sig_allocacmp_p1_V_1 = t_V_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hist1_ce0 = 1'b1;
    end else begin
        hist1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hist2_ce0 = 1'b1;
    end else begin
        hist2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hist_ce0 = 1'b1;
    end else begin
        hist_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((j_read_reg_418 == 2'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        minValue_V_0_o = minValue_V_0_2_fu_348_p2;
    end else begin
        minValue_V_0_o = minValue_V_0_i;
    end
end

always @ (*) begin
    if (((j_read_reg_418 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        minValue_V_0_o_ap_vld = 1'b1;
    end else begin
        minValue_V_0_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((j_read_reg_418 == 2'd1) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        minValue_V_1_o = minValue_V_0_2_fu_348_p2;
    end else begin
        minValue_V_1_o = minValue_V_1_i;
    end
end

always @ (*) begin
    if (((j_read_reg_418 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        minValue_V_1_o_ap_vld = 1'b1;
    end else begin
        minValue_V_1_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~(j_read_reg_418 == 2'd1) & ~(j_read_reg_418 == 2'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        minValue_V_2_o = minValue_V_0_2_fu_348_p2;
    end else begin
        minValue_V_2_o = minValue_V_2_i;
    end
end

always @ (*) begin
    if ((~(j_read_reg_418 == 2'd1) & ~(j_read_reg_418 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        minValue_V_2_o_ap_vld = 1'b1;
    end else begin
        minValue_V_2_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln319_fu_316_p2) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        minValue_V_load41_out_ap_vld = 1'b1;
    end else begin
        minValue_V_load41_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln319_fu_316_p2) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        minValue_V_load_147_out_ap_vld = 1'b1;
    end else begin
        minValue_V_load_147_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln319_fu_316_p2) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        minValue_V_load_253_out_ap_vld = 1'b1;
    end else begin
        minValue_V_load_253_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln319_fu_316_p2 = (xor_ln1057_fu_310_p2 & icmp_ln1057_fu_298_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_312 = (~(j_read_reg_418 == 2'd1) & ~(j_read_reg_418 == 2'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign conv_i_i1068_cast_fu_227_p1 = $signed(conv_i_i1068);

assign hist1_address0 = zext_ln573_fu_259_p1;

assign hist2_address0 = zext_ln573_fu_259_p1;

assign hist_address0 = zext_ln573_fu_259_p1;

assign icmp_ln1057_fu_298_p2 = ((ret_fu_292_p2 < conv_i_i1068_cast_reg_424) ? 1'b1 : 1'b0);

assign j_read_reg_418 = j;

assign minValue_V_0_2_fu_348_p2 = (tmp_s_reg_459 + 24'd1024);

assign minValue_V_load41_out = minValue_V_2_1_fu_86;

assign minValue_V_load_147_out = minValue_V_2_2_fu_90;

assign minValue_V_load_253_out = minValue_V_2_3_fu_94;

assign n1_V_fu_322_p2 = (rhs_reg_450 + lhs_V_fu_78);

assign p1_V_fu_280_p2 = (p1_V_1_reg_429 + 13'd1);

assign ret_fu_292_p2 = (zext_ln225_36_fu_289_p1 + zext_ln225_fu_285_p1);

assign tmp_fu_303_p3 = p1_V_1_reg_429[32'd12];

assign xor_ln1057_fu_310_p2 = (tmp_fu_303_p3 ^ 1'd1);

assign zext_ln225_36_fu_289_p1 = rhs_reg_450;

assign zext_ln225_fu_285_p1 = lhs_V_fu_78;

assign zext_ln573_fu_259_p1 = ap_sig_allocacmp_p1_V_1;

endmodule //ISPPipeline_accel_AWBNormalizationkernel_10_10_2160_3840_2_20_1_4096_2_Pipeline_VITIS_LOOP_319_3
